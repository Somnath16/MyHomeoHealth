{"file_contents":{"DEPLOYMENT.md":{"content":"# My Homeo Health - Deployment Guide\n\nThis document provides comprehensive deployment instructions for My Homeo Health on various platforms.\n\n## Local Development Setup\n\n### Quick Setup Options\n\n1. **Full Automated Setup (Recommended)**\n   ```bash\n   # Linux/macOS\n   chmod +x setup.sh && ./setup.sh\n   \n   # Windows (Run as Administrator)\n   setup.bat\n   ```\n\n2. **Quick Start (If you have Node.js & PostgreSQL)**\n   ```bash\n   chmod +x quick-start.sh && ./quick-start.sh\n   ```\n\n3. **Docker Setup**\n   ```bash\n   chmod +x docker-setup.sh && ./docker-setup.sh\n   ```\n\n4. **Test Your Setup**\n   ```bash\n   chmod +x test-setup.sh && ./test-setup.sh\n   ```\n\n### What Gets Configured\n\n- **Node.js 18+**: Automatic installation verification\n- **PostgreSQL**: Database setup with proper user permissions\n- **Environment Variables**: Secure configuration with session secrets\n- **Dependencies**: All npm packages installed\n- **Database Schema**: Automatic migration and setup\n- **AI Integration**: Optional Gemini/OpenAI/Anthropic configuration\n- **Port Management**: Automatic port conflict resolution\n\n## Environment Configuration\n\n### Required Variables\n```env\nDATABASE_URL=postgresql://username:password@host:port/database\nNODE_ENV=development\nSESSION_SECRET=your-secure-session-secret\nPORT=5000\n```\n\n### Optional Variables\n```env\n# AI Integration (choose one)\nGEMINI_API_KEY=your_gemini_api_key\nOPENAI_API_KEY=your_openai_api_key\nANTHROPIC_API_KEY=your_anthropic_api_key\n\n# Database Connection Details (auto-configured)\nPGHOST=localhost\nPGPORT=5432\nPGDATABASE=homeo_health\nPGUSER=homeo_user\nPGPASSWORD=your_password\n```\n\n## Cloud Deployment\n\n### Replit (Primary Platform)\n1. Import the repository to Replit\n2. Replit automatically provisions PostgreSQL\n3. No additional configuration needed\n4. Click \"Run\" to start\n\n### Vercel\n1. Deploy frontend to Vercel\n2. Configure external PostgreSQL (Neon, Supabase, etc.)\n3. Set environment variables in Vercel dashboard\n4. Use serverless functions for API\n\n### Railway\n1. Connect GitHub repository\n2. Railway auto-detects Node.js project\n3. Add PostgreSQL service\n4. Configure environment variables\n5. Deploy automatically\n\n### Heroku\n1. Create new Heroku app\n2. Add Heroku Postgres add-on\n3. Configure environment variables\n4. Deploy via Git or GitHub integration\n\n### DigitalOcean App Platform\n1. Create new app from GitHub\n2. Configure Node.js service\n3. Add managed PostgreSQL database\n4. Set environment variables\n5. Deploy\n\n## Database Setup Options\n\n### Local PostgreSQL\n```bash\n# Ubuntu/Debian\nsudo apt-get install postgresql postgresql-contrib\n\n# macOS\nbrew install postgresql\nbrew services start postgresql\n\n# Windows\n# Download from https://www.postgresql.org/download/windows/\n```\n\n### Cloud Databases\n- **Neon**: `postgresql://user:pass@ep-xxx.us-east-1.aws.neon.tech/db`\n- **Supabase**: `postgresql://postgres:pass@db.xxx.supabase.co:5432/postgres`\n- **Railway**: `postgresql://user:pass@containers-us-west-xxx.railway.app:port/db`\n- **PlanetScale**: `mysql://user:pass@aws.connect.psdb.cloud/db?sslaccept=strict`\n\n## Production Considerations\n\n### Security\n- Use strong `SESSION_SECRET` (32+ characters)\n- Enable HTTPS/SSL in production\n- Set `NODE_ENV=production`\n- Use environment-specific database credentials\n- Enable CORS for specific domains only\n\n### Performance\n- Enable database connection pooling\n- Use CDN for static assets\n- Implement proper caching strategies\n- Monitor database performance\n- Set up database indexes for frequently queried data\n\n### Monitoring\n- Set up application logging\n- Monitor database connections\n- Track API response times\n- Set up error reporting (Sentry, etc.)\n- Monitor system resources\n\n## Default Credentials\n\nAfter deployment, use these credentials to access the system:\n\n### Admin Account\n- **Username**: `admin`\n- **Password**: `admin123`\n- **Access**: Complete system administration\n\n### Doctor Accounts\n- **Username**: `doctor` / **Password**: `doctor123`\n- **Username**: `ranajit` / **Password**: `ranajit123`\n- **Access**: Patient management, prescriptions, appointments\n\n**Important**: Change default passwords in production!\n\n## AI Integration Setup\n\n### Google Gemini (Recommended)\n1. Visit [Google AI Studio](https://makersuite.google.com/app/apikey)\n2. Create new API key\n3. Add to environment: `GEMINI_API_KEY=your_key`\n\n### OpenAI\n1. Visit [OpenAI Platform](https://platform.openai.com/api-keys)\n2. Create new API key\n3. Add to environment: `OPENAI_API_KEY=your_key`\n\n### Anthropic Claude\n1. Visit [Anthropic Console](https://console.anthropic.com/)\n2. Create new API key\n3. Add to environment: `ANTHROPIC_API_KEY=your_key`\n\n## Troubleshooting\n\n### Common Issues\n\n**Port Already in Use**\n```bash\n# Find process using port\nlsof -i :5000  # macOS/Linux\nnetstat -ano | findstr :5000  # Windows\n\n# Change port in .env.local\nPORT=5001\n```\n\n**Database Connection Failed**\n```bash\n# Check PostgreSQL status\nsystemctl status postgresql  # Linux\nbrew services list | grep postgres  # macOS\n\n# Test connection\npsql -h localhost -U homeo_user -d homeo_health\n```\n\n**Build Errors**\n```bash\n# Clear dependencies and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n\n# Check TypeScript compilation\nnpm run check\n```\n\n**Environment Variables Not Loading**\n- Ensure `.env.local` exists in project root\n- Check file permissions\n- Restart development server after changes\n- Use absolute paths for environment file\n\n### Getting Help\n\n1. **Run the test script**: `./test-setup.sh`\n2. **Check logs**: Look for detailed error messages\n3. **Verify prerequisites**: Ensure Node.js 18+ and PostgreSQL\n4. **Database connectivity**: Test database connection separately\n5. **Port conflicts**: Try alternative ports\n\n## Feature Overview\n\nOnce deployed, the system provides:\n\n- 👥 **Patient Management**: Complete patient records and medical history\n- 📅 **Appointment Scheduling**: Doctor availability and booking system  \n- 💊 **Medicine Management**: Inventory tracking with low stock alerts\n- 📋 **Prescription System**: Digital prescriptions with professional templates\n- 🤖 **AI Integration**: AI-powered medicine suggestions and prescription assistance\n- 📱 **Mobile Responsive**: Works seamlessly on all devices\n- 🌍 **Multi-language**: English and Bengali language support\n- 👨‍⚕️ **Multi-doctor**: Support for multiple practitioners\n- 🔐 **Secure Access**: Role-based authentication and authorization\n- 📊 **Admin Dashboard**: Complete system administration and reporting\n\n## Support\n\nFor deployment issues or questions:\n- Review this deployment guide\n- Run the test setup script\n- Check the troubleshooting section\n- Verify environment configuration\n\n---\n\n**Ready to deploy your homeopathy clinic management system!** 🏥","size_bytes":6752},"LOCAL_SETUP.md":{"content":"# My Homeo Health - Local Development Setup\n\n## Overview\n\nMy Homeo Health is a comprehensive homeopathy clinic management system with role-based access control, patient management, appointment scheduling, prescription management, and AI-powered features.\n\n## Important: Database Configuration\n\nThe application has been updated to use standard PostgreSQL drivers for better local development support. This resolves WebSocket connection errors that occurred with cloud-only database configurations.\n\n### Database Options\n1. **Local PostgreSQL**: Install PostgreSQL locally (recommended for development)\n2. **Docker PostgreSQL**: Use our automated Docker setup script\n3. **Cloud PostgreSQL**: Any cloud service (Neon, Supabase, etc.)\n\n## Prerequisites\n\nBefore setting up the project locally, ensure you have the following installed:\n\n### Required Software\n- **Node.js** >= 18.0.0 ([Download](https://nodejs.org/))\n- **PostgreSQL** >= 13.0 ([Download](https://www.postgresql.org/downloads/))\n- **Git** ([Download](https://git-scm.com/downloads))\n- **Visual Studio Code** (recommended) ([Download](https://code.visualstudio.com/))\n\n### Recommended VS Code Extensions\n- TypeScript and JavaScript Language Features (built-in)\n- ES7+ React/Redux/React-Native snippets\n- Tailwind CSS IntelliSense\n- PostgreSQL by Chris Kolkman\n- Auto Rename Tag\n- Bracket Pair Colorizer\n- GitLens\n\n## Quick Setup (Automated)\n\n### Option 1: Interactive Setup Script\n```bash\ngit clone <your-repository-url>\ncd my-homeo-health\nchmod +x setup.sh\n./setup.sh\n```\n\n### Option 2: Docker Setup (Easiest)\n```bash\ngit clone <your-repository-url>\ncd my-homeo-health\nchmod +x docker-setup.sh\n./docker-setup.sh\n```\n\n### Option 3: Quick Setup (Non-interactive)\n```bash\ngit clone <your-repository-url>\ncd my-homeo-health\nchmod +x quick-setup.sh\n./quick-setup.sh\n```\n\n## Manual Setup\n\n### 1. Clone and Install Dependencies\n```bash\ngit clone <your-repository-url>\ncd my-homeo-health\nnpm install\n```\n\n### 2. Environment Configuration\nCreate a `.env` file in the root directory:\n\n```env\n# Database Configuration\nDATABASE_URL=postgresql://username:password@localhost:5432/homeo_health\n\n# AI Configuration\nGEMINI_API_KEY=your_gemini_api_key_here\n\n# Session Configuration\nSESSION_SECRET=your-secure-session-secret-key-here\n\n# Server Configuration\nPORT=5000\nNODE_ENV=development\n```\n\n### 3. Database Setup\n\n#### Option A: Local PostgreSQL\n1. Install PostgreSQL locally\n2. Create a database:\n   ```sql\n   CREATE DATABASE homeo_health;\n   CREATE USER homeo_user WITH PASSWORD 'your_password';\n   GRANT ALL PRIVILEGES ON DATABASE homeo_health TO homeo_user;\n   ```\n3. Update DATABASE_URL in `.env`\n\n#### Option B: Cloud Database (Neon, Supabase, etc.)\n1. Create a PostgreSQL database on your preferred cloud provider\n2. Copy the connection URL to DATABASE_URL in `.env`\n\n### 4. API Keys Setup\n\n#### Gemini API Key\n1. Visit [Google AI Studio](https://makersuite.google.com/app/apikey)\n2. Create a new API key\n3. Add it to your `.env` file as `GEMINI_API_KEY`\n\n### 5. Database Schema\n```bash\nnpm run db:push\n```\n\n### 6. Start Development Server\n```bash\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n## Troubleshooting Common Issues\n\n### Error: WebSocket Connection Failed / ECONNREFUSED\nThis error occurs when using cloud-specific database drivers with local PostgreSQL. The application has been updated to use standard PostgreSQL drivers.\n\n**Solution:**\n1. Ensure you're using the latest code with standard PostgreSQL drivers\n2. Use a local PostgreSQL connection string: `postgresql://username:password@localhost:5432/database_name`\n3. Or use the Docker setup script for automated database configuration\n\n### Error: Port 5002 ENOTSUP\nThis error can occur with certain WebSocket configurations.\n\n**Solution:**\n1. The application has been updated to avoid this issue\n2. Ensure PORT environment variable is set to 5000 (default)\n3. Restart the development server after configuration changes\n\n### Database Connection Issues\n**Symptoms:** Connection timeouts, authentication failures\n\n**Solutions:**\n1. Verify PostgreSQL is running: `pg_ctl status` or `brew services list | grep postgresql`\n2. Check database credentials in `.env` file\n3. Test connection manually: `psql -h localhost -U username -d database_name`\n4. Use Docker setup for isolated database environment\n\n## Default Login Credentials\n\n### Admin Account\n- **Username:** admin\n- **Password:** admin123\n\n### Doctor Account\n- **Username:** ranajit\n- **Password:** ranajit123\n\n## Project Structure\n\n```\nmy-homeo-health/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/         # Page components\n│   │   ├── hooks/         # Custom React hooks\n│   │   ├── contexts/      # React contexts\n│   │   └── lib/           # Utility libraries\n├── server/                # Backend Express application\n│   ├── db.ts             # Database connection\n│   ├── storage.ts        # Data access layer\n│   ├── routes.ts         # API routes\n│   ├── gemini.ts         # AI integration\n│   └── index.ts          # Server entry point\n├── shared/               # Shared types and schemas\n│   └── schema.ts         # Database schema definitions\n├── package.json          # Project dependencies\n├── vite.config.ts        # Vite configuration\n├── tailwind.config.ts    # Tailwind CSS configuration\n├── drizzle.config.ts     # Database configuration\n└── tsconfig.json         # TypeScript configuration\n```\n\n## Available Scripts\n\n```bash\n# Development\nnpm run dev              # Start development server with hot reload\nnpm run build           # Build for production\nnpm run preview         # Preview production build\n\n# Database\nnpm run db:push         # Push schema changes to database\nnpm run db:studio       # Open Drizzle Studio (database GUI)\n\n# Type Checking\nnpm run type-check      # Run TypeScript type checking\n```\n\n## Development Workflow\n\n### 1. Starting Development\n```bash\nnpm run dev\n```\nThis starts both the frontend (Vite) and backend (Express) servers concurrently.\n\n### 2. Database Changes\nWhen modifying the database schema in `shared/schema.ts`:\n```bash\nnpm run db:push\n```\n\n### 3. Adding New Dependencies\n```bash\n# Frontend dependencies\nnpm install package-name\n\n# Development dependencies\nnpm install -D package-name\n```\n\n## VS Code Configuration\n\n### Recommended Settings (.vscode/settings.json)\n```json\n{\n  \"typescript.preferences.importModuleSpecifier\": \"relative\",\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"tailwindCSS.includeLanguages\": {\n    \"typescript\": \"javascript\",\n    \"typescriptreact\": \"javascript\"\n  },\n  \"files.associations\": {\n    \"*.css\": \"tailwindcss\"\n  }\n}\n```\n\n### Launch Configuration (.vscode/launch.json)\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch Program\",\n      \"program\": \"${workspaceFolder}/server/index.ts\",\n      \"request\": \"launch\",\n      \"skipFiles\": [\"<node_internals>/**\"],\n      \"type\": \"node\",\n      \"runtimeExecutable\": \"npm\",\n      \"runtimeArgs\": [\"run\", \"dev\"]\n    }\n  ]\n}\n```\n\n## Troubleshooting\n\n### Common Issues\n\n#### 1. Database Connection Issues\n- Verify PostgreSQL is running\n- Check DATABASE_URL in `.env`\n- Ensure database exists and user has permissions\n\n#### 2. Port Already in Use\n```bash\n# Kill process using port 5000\nlsof -ti:5000 | xargs kill -9\n# Or change PORT in .env file\n```\n\n#### 3. Node Modules Issues\n```bash\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n#### 4. TypeScript Errors\n```bash\nnpm run type-check\n```\n\n#### 5. Database Schema Issues\n```bash\nnpm run db:push\n```\n\n### Environment Variables Checklist\n- [ ] DATABASE_URL is set and valid\n- [ ] GEMINI_API_KEY is set\n- [ ] SESSION_SECRET is set\n- [ ] PORT is available (default: 5000)\n\n## Production Deployment\n\n### Build for Production\n```bash\nnpm run build\n```\n\n### Environment Variables for Production\n```env\nNODE_ENV=production\nDATABASE_URL=your_production_database_url\nGEMINI_API_KEY=your_gemini_api_key\nSESSION_SECRET=your_secure_production_secret\nPORT=5000\n```\n\n## Support\n\nIf you encounter any issues during setup:\n\n1. Check the troubleshooting section above\n2. Verify all prerequisites are installed\n3. Ensure environment variables are correctly set\n4. Check the console for specific error messages\n\n## Feature Overview\n\n### Core Features\n- **User Management:** Role-based access (Admin, Doctor)\n- **Patient Management:** Comprehensive patient records\n- **Appointment Scheduling:** Calendar-based booking system\n- **Prescription Management:** Digital prescription creation\n- **Medicine Database:** Comprehensive medicine catalog\n- **AI Integration:** Gemini AI for medicine suggestions\n- **Print Templates:** Customizable prescription templates\n- **Multi-language Support:** English/Bengali interface\n\n### Admin Features\n- Doctor management and permissions\n- Template management and assignment\n- System-wide analytics and reporting\n- User role management\n\n### Doctor Features\n- Patient management\n- Prescription creation with AI assistance\n- Appointment scheduling\n- Analytics dashboard\n- Print prescription with assigned templates\n\nThis setup guide ensures you can run My Homeo Health locally with full functionality.","size_bytes":9433},"README.md":{"content":"# My Homeo Health - Complete Clinic Management System\n\nA comprehensive homeopathy clinic management system built for modern healthcare practices. Features patient management, appointment scheduling, prescription handling, medicine inventory, and AI-powered assistance.\n\n## 🚀 Quick Setup\n\n### Windows Users\n```cmd\n# Open Command Prompt as Administrator\nsetup.bat\n```\n\n### Linux/macOS Users\n```bash\n# Make executable and run\nchmod +x setup.sh\n./setup.sh\n```\n\n### Quick Start (If you have Node.js & PostgreSQL)\n```bash\n./quick-start.sh\n```\n\n### Docker Setup\n```bash\n./docker-setup.sh\n```\n\n## ✨ Features\n\n### 👥 **Patient Management**\n- Complete patient records with medical history\n- Demographics and contact information\n- Appointment history tracking\n- Prescription records\n\n### 📅 **Appointment System**\n- Doctor availability management\n- Real-time scheduling with conflict prevention\n- WhatsApp integration for booking\n- Automated reminders and notifications\n\n### 💊 **Medicine Inventory**\n- Comprehensive medicine database\n- Stock level tracking with low stock alerts\n- Bulk import via CSV/Excel/PDF\n- Medicine search and filtering\n- Company and symptom tracking\n\n### 📋 **Prescription Management**\n- Digital prescription creation\n- Pre-built templates for common conditions\n- AI-powered medicine suggestions\n- Multi-language support (English/Bengali)\n- Professional print layouts\n\n### 🤖 **AI Integration**\n- Google Gemini powered suggestions\n- Medicine recommendations based on symptoms\n- Prescription template generation\n- Interactive medicine discussions\n\n### 👨‍⚕️ **Multi-Doctor Support**\n- Individual doctor profiles and specializations\n- Separate patient lists and appointments\n- Doctor-specific medicine management\n- Role-based access control\n\n### 🔐 **Admin Panel**\n- Complete system administration\n- User management (Doctors, Patients, Admins)\n- System statistics and reporting\n- Template and configuration management\n\n### 📱 **Modern Interface**\n- Fully responsive design\n- Mobile-first approach\n- Progressive Web App (PWA) capabilities\n- Dark/light theme support\n\n## 🛠 What the Setup Scripts Do\n\n### Automated Installation\n- **Node.js 20+**: Automatic installation and verification\n- **PostgreSQL**: Database setup with user creation\n- **Dependencies**: All npm packages installed automatically\n- **Database**: Schema creation and initial data\n\n### Configuration\n- **Environment Variables**: Secure generation and setup\n- **Database Connection**: Automatic connection string configuration\n- **Session Security**: Cryptographically secure session secrets\n- **Port Management**: Automatic port conflict resolution\n\n### AI Setup (Optional)\n- **Google Gemini**: Medicine suggestions and prescription AI\n- **OpenAI GPT**: Alternative AI provider\n- **Anthropic Claude**: Advanced AI capabilities\n\n### Security Features\n- **Database User**: Dedicated PostgreSQL user with proper permissions\n- **Session Management**: Secure HTTP-only cookies\n- **Role-Based Access**: Admin, Doctor, and Patient roles\n- **Input Validation**: Comprehensive data validation\n\n## 📋 Default Credentials\n\nAfter setup, access the system with:\n\n### Admin Account\n- **Username**: `admin`\n- **Password**: `admin123`\n- **Access**: Full system administration\n\n### Doctor Accounts\n- **Dr. Rajesh**: `doctor` / `doctor123`\n- **Dr. Ranajit**: `ranajit` / `ranajit123`\n- **Access**: Patient management, prescriptions, appointments\n\n## 🔧 Manual Setup\n\nIf the automated scripts don't work for your system:\n\n### Prerequisites\n1. **Node.js 18+**: [Download](https://nodejs.org/)\n2. **PostgreSQL 13+**: [Download](https://postgresql.org/download/)\n3. **Git**: [Download](https://git-scm.com/)\n\n### Step-by-Step\n```bash\n# 1. Clone the repository\ngit clone <repository-url>\ncd homeo-health\n\n# 2. Install dependencies\nnpm install\n\n# 3. Setup PostgreSQL database\ncreatedb homeo_health\npsql -d homeo_health -c \"CREATE USER homeo_user WITH PASSWORD 'password';\"\npsql -d homeo_health -c \"GRANT ALL PRIVILEGES ON DATABASE homeo_health TO homeo_user;\"\n\n# 4. Configure environment\ncp .env.example .env.local\n# Edit .env.local with your database credentials\n\n# 5. Initialize database\nnpm run db:push\n\n# 6. Start the application\nnpm run dev\n```\n\n## 🌐 Deployment Options\n\n### Replit (Recommended)\n- Native support with automatic PostgreSQL\n- Zero-configuration deployment\n- Built-in database management\n\n### Other Platforms\n- **Vercel**: Frontend with external database\n- **Railway**: Full-stack with PostgreSQL\n- **Heroku**: Complete application hosting\n- **DigitalOcean**: VPS with custom setup\n\n## 📁 Project Structure\n\n```\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/    # Reusable UI components\n│   │   ├── pages/         # Application pages\n│   │   └── lib/           # Utilities and helpers\n├── server/                # Express.js backend\n│   ├── routes.ts          # API endpoints\n│   ├── storage.ts         # Database operations\n│   └── config.ts          # Server configuration\n├── shared/                # Shared types and schemas\n│   └── schema.ts          # Database schema\n├── setup.sh              # Linux/macOS setup script\n├── setup.bat             # Windows setup script\n├── quick-start.sh         # Quick setup for existing installs\n└── docker-setup.sh       # Docker-based setup\n```\n\n## 🎯 Key Technologies\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for fast development\n- **Tailwind CSS** for styling\n- **shadcn/ui** component library\n- **TanStack Query** for state management\n\n### Backend\n- **Node.js** with Express\n- **TypeScript** for type safety\n- **Drizzle ORM** for database operations\n- **PostgreSQL** for data storage\n- **Session-based authentication**\n\n### AI & Integrations\n- **Google Gemini API** for AI features\n- **WhatsApp Business API** for notifications\n- **File processing** for bulk imports\n\n## 🔍 Troubleshooting\n\n### Common Issues\n\n**Port Already in Use**\n```bash\n# Find process using port 5000\nlsof -i :5000  # macOS/Linux\nnetstat -ano | findstr :5000  # Windows\n\n# Change port in .env.local\nPORT=5001\n```\n\n**Database Connection Failed**\n```bash\n# Check PostgreSQL status\nsudo systemctl status postgresql  # Linux\nbrew services list | grep postgres  # macOS\n\n# Test connection\npsql -h localhost -U homeo_user -d homeo_health\n```\n\n**Permission Denied**\n```bash\n# Linux/macOS\nchmod +x setup.sh\nsudo ./setup.sh\n\n# Windows\n# Run Command Prompt as Administrator\n```\n\n### Getting Help\n\n1. **Check Logs**: Look for detailed error messages\n2. **Verify Prerequisites**: Ensure Node.js and PostgreSQL are installed\n3. **Database Issues**: Confirm PostgreSQL is running and accessible\n4. **Port Conflicts**: Try alternative ports\n5. **File Permissions**: Ensure proper read/write access\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Test thoroughly\n5. Submit a pull request\n\n## 📞 Support\n\nFor technical support or questions:\n- Create an issue in the repository\n- Check the troubleshooting guide\n- Review the setup documentation\n\n---\n\n**Happy Healthcare Management!** 🏥","size_bytes":7319},"SETUP_REQUIREMENTS.md":{"content":"# Setup Requirements - My Homeo Health\n\n## Quick Reference\n\n### System Requirements\n- **Node.js** >= 18.0.0\n- **PostgreSQL** >= 13.0\n- **npm** (comes with Node.js)\n\n### Environment Variables Required\n```env\nDATABASE_URL=postgresql://user:password@host:port/database\nGEMINI_API_KEY=your_gemini_api_key\nSESSION_SECRET=your_secure_secret_key\n```\n\n### Setup Commands\n```bash\n# Clone and install\ngit clone <repository-url>\ncd my-homeo-health\nnpm install\n\n# Quick setup\n./quick-setup.sh\n\n# Interactive setup\n./setup.sh\n\n# Docker setup\n./docker-setup.sh\n\n# Manual database setup\nnpm run db:push\n\n# Start development\nnpm run dev\n```\n\n### Default Login\n- **Admin:** admin / admin123\n- **Doctor:** ranajit / ranajit123\n\n### Ports\n- **Application:** http://localhost:5000\n- **Database:** localhost:5432 (if local)\n\n### API Keys\n- **Gemini API:** [Get from Google AI Studio](https://makersuite.google.com/app/apikey)\n\nFor detailed setup instructions, see [LOCAL_SETUP.md](LOCAL_SETUP.md)","size_bytes":975},"docker-setup.sh":{"content":"#!/bin/bash\n\n# My Homeo Health - Docker Setup Script\n# Sets up PostgreSQL using Docker for local development\n\nset -e\n\n# Colors\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nRED='\\033[0;31m'\nNC='\\033[0m'\n\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\nmain() {\n    clear\n    echo \"================================================\"\n    echo \"   My Homeo Health - Docker Setup              \"\n    echo \"================================================\"\n    echo \"\"\n    \n    # Check Docker\n    if ! command_exists docker; then\n        print_error \"Docker not found. Please install Docker first.\"\n        echo \"Visit: https://docs.docker.com/get-docker/\"\n        exit 1\n    fi\n    \n    # Check Docker Compose\n    if ! command_exists docker-compose && ! docker compose version >/dev/null 2>&1; then\n        print_error \"Docker Compose not found. Please install Docker Compose.\"\n        exit 1\n    fi\n    \n    COMPOSE_CMD=\"docker compose\"\n    if command_exists docker-compose; then\n        COMPOSE_CMD=\"docker-compose\"\n    fi\n    \n    print_success \"Docker and Docker Compose found\"\n    \n    # Check Node.js\n    if ! command_exists node; then\n        print_error \"Node.js not found. Please install Node.js 18+ first.\"\n        exit 1\n    fi\n    \n    NODE_VERSION=$(node --version)\n    print_success \"Node.js: $NODE_VERSION\"\n    \n    # Create docker-compose.yml\n    print_status \"Creating Docker configuration...\"\n    cat > docker-compose.yml << 'EOF'\nversion: '3.8'\nservices:\n  postgres:\n    image: postgres:15\n    container_name: homeo-postgres\n    environment:\n      POSTGRES_DB: homeo_health\n      POSTGRES_USER: homeo_user\n      POSTGRES_PASSWORD: homeo_password\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U homeo_user -d homeo_health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nvolumes:\n  postgres_data:\nEOF\n    \n    # Start PostgreSQL container\n    print_status \"Starting PostgreSQL container...\"\n    $COMPOSE_CMD up -d postgres\n    \n    # Wait for PostgreSQL to be ready\n    print_status \"Waiting for PostgreSQL to be ready...\"\n    sleep 10\n    \n    # Verify connection\n    for i in {1..30}; do\n        if docker exec homeo-postgres pg_isready -U homeo_user -d homeo_health >/dev/null 2>&1; then\n            print_success \"PostgreSQL is ready\"\n            break\n        fi\n        if [ $i -eq 30 ]; then\n            print_error \"PostgreSQL failed to start\"\n            exit 1\n        fi\n        echo -n \".\"\n        sleep 2\n    done\n    \n    # Install dependencies\n    print_status \"Installing Node.js dependencies...\"\n    npm install\n    print_success \"Dependencies installed\"\n    \n    # Create .env.local\n    print_status \"Creating environment configuration...\"\n    cat > .env.local << EOF\nDATABASE_URL=postgresql://homeo_user:homeo_password@localhost:5432/homeo_health\nPGHOST=localhost\nPGPORT=5432\nPGDATABASE=homeo_health\nPGUSER=homeo_user\nPGPASSWORD=homeo_password\nNODE_ENV=development\nSESSION_SECRET=$(openssl rand -base64 32)\nPORT=5000\nVITE_API_URL=http://localhost:5000\nEOF\n    \n    # Optional AI configuration\n    echo \"\"\n    read -p \"Configure AI features? (y/n): \" config_ai\n    if [[ $config_ai =~ ^[Yy]$ ]]; then\n        echo \"Choose AI provider:\"\n        echo \"1) Google Gemini\"\n        echo \"2) OpenAI GPT\" \n        echo \"3) Anthropic Claude\"\n        read -p \"Enter choice (1-3): \" ai_choice\n        \n        case $ai_choice in\n            1)\n                read -p \"Enter Gemini API Key: \" api_key\n                echo \"GEMINI_API_KEY=$api_key\" >> .env.local\n                ;;\n            2)\n                read -p \"Enter OpenAI API Key: \" api_key\n                echo \"OPENAI_API_KEY=$api_key\" >> .env.local\n                ;;\n            3)\n                read -p \"Enter Anthropic API Key: \" api_key\n                echo \"ANTHROPIC_API_KEY=$api_key\" >> .env.local\n                ;;\n        esac\n    fi\n    \n    # Initialize database\n    print_status \"Initializing database...\"\n    source .env.local\n    export DATABASE_URL\n    npm run db:push || print_warning \"Database setup will complete on first run\"\n    \n    print_success \"Docker setup complete!\"\n    echo \"\"\n    echo \"================================================\"\n    echo \"             SETUP COMPLETE!                    \"\n    echo \"================================================\"\n    echo \"\"\n    echo \"📊 Database: PostgreSQL (Docker container)\"\n    echo \"🌐 Server will run on: http://localhost:5000\"\n    echo \"👤 Admin login: admin / admin123\"\n    echo \"🩺 Doctor login: doctor / doctor123\"\n    echo \"\"\n    echo \"Docker commands:\"\n    echo \"  Start database: $COMPOSE_CMD up -d\"\n    echo \"  Stop database: $COMPOSE_CMD down\"\n    echo \"  View logs: $COMPOSE_CMD logs postgres\"\n    echo \"\"\n    \n    read -p \"Start the application now? (y/n): \" start_now\n    if [[ $start_now =~ ^[Yy]$ ]]; then\n        print_status \"Starting application...\"\n        npm run dev\n    else\n        print_success \"Run 'npm run dev' to start the application\"\n        echo \"Don't forget to start Docker containers: $COMPOSE_CMD up -d\"\n    fi\n}\n\ntrap 'echo -e \"\\n\\n${RED}Setup interrupted${NC}\"; exit 1' INT\nmain \"$@\"","size_bytes":5459},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"local-dev-setup.sh":{"content":"#!/bin/bash\n\n# My Homeo Health - Local Development Setup Script\n# This script sets up the project for local development\n\nset -e\n\necho \"🏥 My Homeo Health - Local Development Setup\"\necho \"=============================================\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${GREEN}✓${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}⚠${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}✗${NC} $1\"\n}\n\nprint_info() {\n    echo -e \"${BLUE}ℹ${NC} $1\"\n}\n\n# Check if Node.js is installed\ncheck_node() {\n    if command -v node >/dev/null 2>&1; then\n        NODE_VERSION=$(node --version)\n        print_status \"Node.js found: $NODE_VERSION\"\n        \n        # Check if version is >= 18\n        MAJOR_VERSION=$(echo $NODE_VERSION | cut -d'.' -f1 | sed 's/v//')\n        if [ \"$MAJOR_VERSION\" -lt 18 ]; then\n            print_error \"Node.js version 18 or higher is required. Current version: $NODE_VERSION\"\n            print_info \"Please update Node.js: https://nodejs.org/\"\n            exit 1\n        fi\n    else\n        print_error \"Node.js is not installed\"\n        print_info \"Please install Node.js 18+: https://nodejs.org/\"\n        exit 1\n    fi\n}\n\n# Check if PostgreSQL is installed\ncheck_postgres() {\n    if command -v psql >/dev/null 2>&1; then\n        POSTGRES_VERSION=$(psql --version | awk '{print $3}')\n        print_status \"PostgreSQL found: $POSTGRES_VERSION\"\n    else\n        print_warning \"PostgreSQL not found locally\"\n        print_info \"You can either:\"\n        print_info \"1. Install PostgreSQL locally: https://www.postgresql.org/download/\"\n        print_info \"2. Use a cloud database (Neon, Supabase, etc.)\"\n    fi\n}\n\n# Install dependencies\ninstall_dependencies() {\n    print_info \"Installing project dependencies...\"\n    if npm install; then\n        print_status \"Dependencies installed successfully\"\n    else\n        print_error \"Failed to install dependencies\"\n        exit 1\n    fi\n}\n\n# Setup environment file\nsetup_environment() {\n    if [ ! -f \".env\" ]; then\n        print_info \"Creating .env file from template...\"\n        cp .env.example .env\n        print_status \".env file created\"\n        print_warning \"Please edit .env file with your configuration:\"\n        print_info \"  - DATABASE_URL: Your PostgreSQL connection string\"\n        print_info \"  - GEMINI_API_KEY: Get from https://makersuite.google.com/app/apikey\"\n        print_info \"  - SESSION_SECRET: Generate a secure random string\"\n    else\n        print_status \".env file already exists\"\n    fi\n}\n\n# Generate session secret if needed\ngenerate_session_secret() {\n    if ! grep -q \"your-secure-session-secret-key-here\" .env 2>/dev/null; then\n        return\n    fi\n    \n    print_info \"Generating secure session secret...\"\n    if command -v openssl >/dev/null 2>&1; then\n        SESSION_SECRET=$(openssl rand -hex 32)\n        sed -i.bak \"s/your-secure-session-secret-key-here/$SESSION_SECRET/\" .env\n        rm .env.bak 2>/dev/null || true\n        print_status \"Session secret generated\"\n    else\n        print_warning \"OpenSSL not found. Please manually replace 'your-secure-session-secret-key-here' in .env\"\n    fi\n}\n\n# Create VS Code configuration\nsetup_vscode() {\n    if [ -d \".vscode\" ]; then\n        print_status \"VS Code configuration already exists\"\n    else\n        print_info \"VS Code configuration created\"\n        print_info \"Recommended extensions will be suggested when you open the project\"\n    fi\n}\n\n# Test database connection\ntest_database() {\n    print_info \"Testing database connection...\"\n    \n    # Check if .env has a valid DATABASE_URL\n    if grep -q \"postgresql://\" .env 2>/dev/null; then\n        if npm run db:push >/dev/null 2>&1; then\n            print_status \"Database connection successful and schema updated\"\n        else\n            print_warning \"Database connection failed or schema update failed\"\n            print_info \"Please check your DATABASE_URL in .env file\"\n            print_info \"Run 'npm run db:push' manually after fixing the connection\"\n        fi\n    else\n        print_warning \"DATABASE_URL not configured in .env\"\n        print_info \"Please set your PostgreSQL connection string in .env\"\n    fi\n}\n\n# Main setup process\nmain() {\n    echo\n    print_info \"Starting setup process...\"\n    echo\n    \n    # Pre-flight checks\n    check_node\n    check_postgres\n    echo\n    \n    # Setup process\n    install_dependencies\n    setup_environment\n    generate_session_secret\n    setup_vscode\n    echo\n    \n    # Database setup\n    test_database\n    echo\n    \n    # Final instructions\n    echo \"🎉 Setup completed!\"\n    echo\n    print_info \"Next steps:\"\n    print_info \"1. Edit .env file with your configuration\"\n    print_info \"2. Run 'npm run db:push' to setup database schema\"\n    print_info \"3. Run 'npm run dev' to start development server\"\n    echo\n    print_info \"Default login credentials:\"\n    print_info \"  Admin: admin / admin123\"\n    print_info \"  Doctor: ranajit / ranajit123\"\n    echo\n    print_info \"The application will be available at: http://localhost:5000\"\n    echo\n    \n    # Check if we should start the dev server\n    read -p \"Start development server now? (y/N): \" -n 1 -r\n    echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n        print_info \"Starting development server...\"\n        npm run dev\n    else\n        print_info \"Run 'npm run dev' when you're ready to start development\"\n    fi\n}\n\n# Run main function\nmain \"$@\"","size_bytes":5506},"local-fix.sh":{"content":"#!/bin/bash\n\n# Local Development Fix Script for My Homeo Health\n# This script addresses the WebSocket/database connection issues in local development\n\nset -e\n\necho \"🔧 My Homeo Health - Local Development Fix\"\necho \"==========================================\"\necho \"\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\necho -e \"${BLUE}This script fixes common local development issues:${NC}\"\necho \"1. WebSocket connection errors (ECONNREFUSED)\"\necho \"2. Port binding issues (ENOTSUP on port 5002)\"\necho \"3. Database driver configuration for local PostgreSQL\"\necho \"\"\n\n# Check if .env exists\nif [ ! -f \".env\" ]; then\n    echo -e \"${YELLOW}Creating .env file from template...${NC}\"\n    cat > .env << EOL\n# Database Configuration (Local PostgreSQL)\nDATABASE_URL=postgresql://postgres:password@localhost:5432/homeo_health\n\n# AI Configuration\nGEMINI_API_KEY=your_gemini_api_key_here\n\n# Session Configuration\nSESSION_SECRET=$(openssl rand -base64 32 2>/dev/null || python3 -c \"import secrets; print(secrets.token_urlsafe(32))\" 2>/dev/null || echo \"change-this-in-production\")\n\n# Server Configuration\nPORT=5000\nNODE_ENV=development\nEOL\n    echo -e \"${GREEN}✅ .env file created${NC}\"\nelse\n    echo -e \"${GREEN}✅ .env file already exists${NC}\"\nfi\n\n# Update database URL if it contains neon.tech (cloud-specific)\nif grep -q \"neon.tech\" .env 2>/dev/null; then\n    echo -e \"${YELLOW}⚠️  Detected cloud database URL. For local development, consider using:${NC}\"\n    echo \"DATABASE_URL=postgresql://postgres:password@localhost:5432/homeo_health\"\n    echo \"\"\n    echo \"Or use our Docker setup script for automatic database configuration:\"\n    echo \"./docker-setup.sh\"\n    echo \"\"\nfi\n\n# Check if PostgreSQL is running locally\necho -e \"${BLUE}Checking PostgreSQL status...${NC}\"\nif command -v pg_ctl &> /dev/null; then\n    if pg_ctl status &> /dev/null; then\n        echo -e \"${GREEN}✅ PostgreSQL is running${NC}\"\n    else\n        echo -e \"${YELLOW}⚠️  PostgreSQL not running. Start it with:${NC}\"\n        echo \"  macOS (Homebrew): brew services start postgresql\"\n        echo \"  Linux (systemd): sudo systemctl start postgresql\"\n        echo \"  Or use Docker setup: ./docker-setup.sh\"\n    fi\nelif command -v psql &> /dev/null; then\n    echo -e \"${GREEN}✅ PostgreSQL client found${NC}\"\nelse\n    echo -e \"${YELLOW}⚠️  PostgreSQL not found. Consider using Docker setup:${NC}\"\n    echo \"./docker-setup.sh\"\nfi\n\necho \"\"\necho -e \"${BLUE}Installing dependencies...${NC}\"\nif npm install; then\n    echo -e \"${GREEN}✅ Dependencies installed${NC}\"\nelse\n    echo -e \"${RED}❌ Failed to install dependencies${NC}\"\n    exit 1\nfi\n\necho \"\"\necho -e \"${BLUE}Setting up database schema...${NC}\"\nif npm run db:push; then\n    echo -e \"${GREEN}✅ Database schema updated${NC}\"\nelse\n    echo -e \"${YELLOW}⚠️  Database schema setup failed. Please check your DATABASE_URL${NC}\"\n    echo \"Common solutions:\"\n    echo \"1. Ensure PostgreSQL is running\"\n    echo \"2. Create the database: createdb homeo_health\"\n    echo \"3. Update DATABASE_URL in .env with correct credentials\"\n    echo \"4. Use Docker setup: ./docker-setup.sh\"\nfi\n\necho \"\"\necho -e \"${GREEN}🎉 Local development fix completed!${NC}\"\necho \"\"\necho \"Next steps:\"\necho \"1. Update GEMINI_API_KEY in .env with your actual API key\"\necho \"2. Start the development server: npm run dev\"\necho \"3. Open http://localhost:5000 in your browser\"\necho \"\"\necho \"Default login credentials:\"\necho \"  Admin: admin / admin123\"\necho \"  Doctor: ranajit / ranajit123\"\necho \"\"\necho \"If you still encounter issues, check LOCAL_SETUP.md for detailed troubleshooting.\"","size_bytes":3659},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"quick-setup.sh":{"content":"#!/bin/bash\n\n# My Homeo Health - Quick Setup Script (Non-interactive)\n# For advanced users who want minimal prompts\n\nset -e\n\necho \"🏥 My Homeo Health - Quick Setup\"\necho \"===============================\"\n\n# Colors\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nRED='\\033[0;31m'\nBLUE='\\033[0;34m'\nNC='\\033[0m'\n\nprint_status() { echo -e \"${GREEN}✓${NC} $1\"; }\nprint_warning() { echo -e \"${YELLOW}⚠${NC} $1\"; }\nprint_error() { echo -e \"${RED}✗${NC} $1\"; }\nprint_info() { echo -e \"${BLUE}ℹ${NC} $1\"; }\n\n# Check Node.js\nif ! command -v node >/dev/null 2>&1; then\n    print_error \"Node.js not found. Please install Node.js 18+: https://nodejs.org/\"\n    exit 1\nfi\n\nNODE_VERSION=$(node --version)\nMAJOR_VERSION=$(echo $NODE_VERSION | cut -d'.' -f1 | sed 's/v//')\nif [ \"$MAJOR_VERSION\" -lt 18 ]; then\n    print_error \"Node.js 18+ required. Current: $NODE_VERSION\"\n    exit 1\nfi\n\nprint_status \"Node.js $NODE_VERSION\"\n\n# Install dependencies\nprint_info \"Installing dependencies...\"\nnpm install\nprint_status \"Dependencies installed\"\n\n# Create .env if it doesn't exist\nif [ ! -f \".env\" ]; then\n    cp .env.example .env\n    print_status \".env created from template\"\n    \n    # Generate session secret\n    if command -v openssl >/dev/null 2>&1; then\n        SESSION_SECRET=$(openssl rand -hex 32)\n        sed -i.bak \"s/your-secure-session-secret-key-here/$SESSION_SECRET/\" .env\n        rm .env.bak 2>/dev/null || true\n        print_status \"Session secret generated\"\n    fi\n    \n    print_warning \"Please edit .env with your configuration:\"\n    print_info \"  - DATABASE_URL: Your PostgreSQL connection\"\n    print_info \"  - GEMINI_API_KEY: Get from https://makersuite.google.com/app/apikey\"\nelse\n    print_status \".env already exists\"\nfi\n\n# Make scripts executable\nchmod +x setup.sh 2>/dev/null || true\nchmod +x docker-setup.sh 2>/dev/null || true\n\nprint_status \"Setup completed!\"\nprint_info \"Next steps:\"\nprint_info \"1. Edit .env with your configuration\"\nprint_info \"2. Run 'npm run db:push' to setup database\"\nprint_info \"3. Run 'npm run dev' to start development\"\nprint_info \"\"\nprint_info \"Login: admin/admin123 or ranajit/ranajit123\"","size_bytes":2122},"replit.md":{"content":"# My Homeo Health - Replit Configuration\n\n## Overview\n\nMy Homeo Health is a comprehensive full-stack homeopathy clinic management system. It provides role-based access control, patient and appointment management, prescription handling, and multilingual support (English/Bengali). The project aims to streamline clinic operations and enhance patient care through modern web technologies.\n\n## Recent Updates (August 2025)\n\n- ✅ **Admin Management System**: Complete admin user management with CRUD operations, security controls preventing self-deletion and last admin deletion protection  \n- ✅ **Prescription Templates**: Added 10 comprehensive HTML prescription templates for both doctors covering common homeopathic conditions\n- ✅ **Local Setup Scripts**: Created comprehensive setup automation for Windows (setup.bat), Linux/macOS (setup.sh), quick-start (quick-start.sh), and Docker (docker-setup.sh) with full dependency management, database setup, AI configuration, and port management\n- ✅ **Setup Testing**: Added test-setup.sh script for validating local deployment readiness with comprehensive system checks\n- ✅ **Code Cleanup**: Removed unnecessary files - test/temp files, duplicate documentation, outdated screenshots, and backup files\n- ✅ **Smart Database Management**: Enhanced setup scripts with intelligent database detection, automatic creation with secure credentials, and existing database integration support\n- ✅ **Interactive Database Selection**: Setup scripts now display all existing databases with numbered options, allowing users to select from existing databases or create new ones\n- ✅ **Port Configuration**: Setup scripts now ask users to configure the server port with validation and availability checking\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\nThe application employs a modern full-stack architecture, separating client and server components.\n\n### Frontend Architecture\n- **Framework**: React 18+ with TypeScript\n- **Build Tool**: Vite\n- **UI Framework**: shadcn/ui on Radix UI\n- **Styling**: Tailwind CSS with custom CSS variables\n- **State Management**: TanStack Query (React Query) for server state\n- **Routing**: Wouter\n- **Design**: Responsive, mobile-first with PWA capabilities\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **Session Management**: Express sessions with PostgreSQL store\n- **Authentication**: Session-based with role-based access control (admin, doctor, patient)\n\n### Key Architectural Components & Decisions\n- **Database Layer**: PostgreSQL with Neon serverless connection, Drizzle ORM, centralized schema, and connection pooling. Supports automatic migrations and seeding.\n- **Authentication System**: Secure, session-based with HTTP-only cookies and role-based access for admin, doctor, and patient roles.\n- **API Structure**: RESTful design, Zod schemas for validation, and centralized error handling.\n- **User Interface**: Responsive design, PWA features, modular components, and intuitive navigation.\n- **Data Flow**: Client requests via TanStack Query, validated by Express middleware, processed by API routes, interacting with PostgreSQL via Drizzle ORM, returning JSON responses.\n- **Core Features**:\n    - **Appointment Management**: Doctor availability system with past date prevention, dynamic time slot generation, and conversational WhatsApp booking with session management and multi-language support.\n    - **Medicine Management**: Comprehensive medicine management with stock tracking, low stock alerts, and bulk upload functionality (CSV, Excel, PDF) with intelligent parsing and unique code validation. Includes AI-powered medicine suggestion and discussion features.\n    - **Prescription Management**: AI-powered template generation with language selection (Bengali/English), customizable clinic details, real-time preview, and comprehensive print functionality with multiple professional templates.\n    - **Patient Management**: Patient CRUD operations, including secure deletion with admin control and cascading data removal.\n    - **Admin Dashboard**: Dedicated admin portal with statistics, doctor/medicine/patient management (full CRUD), and role-based routing.\n    - **User Profile Management**: Centralized profile management with secure updates for personal details and password changes, accessible from all portals.\n\n### Development & Deployment Strategy\n- **Environment Alignment**: Consistent behavior across development and production with centralized configuration and environment-specific settings for database connections (e.g., connection pooling) and session security.\n- **Local Development**: Comprehensive setup infrastructure for VS Code and standalone environments, including automated setup scripts and Docker support for PostgreSQL.\n\n## External Dependencies\n\n- **@neondatabase/serverless**: PostgreSQL database connection (for cloud deployments)\n- **drizzle-orm**: Type-safe SQL ORM\n- **@tanstack/react-query**: Server state management\n- **express-session**: Session management\n- **connect-pg-simple**: PostgreSQL session store\n- **@radix-ui/***: Accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **lucide-react**: Icon library\n- **class-variance-authority**: CSS variant management\n- **typescript**: Type safety\n- **vite**: Build tool and dev server\n- **tsx**: TypeScript execution for Node.js\n- **Gemini API**: For AI-powered features (template generation, medicine suggestions, medicine discussion).\n- **multer**: For handling multipart file uploads.\n- **csv-parser**: For CSV file parsing.\n- **xlsx**: For Excel file parsing.\n- **pdf-parse**: For PDF file parsing.\n```","size_bytes":5780},"setup.sh":{"content":"#!/bin/bash\n\n# My Homeo Health - Automated Setup Script\n# This script will install all dependencies and configure the project for local development\n\nset -e  # Exit on any error\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Function to check if command exists\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\n# Function to get OS type\nget_os() {\n    if [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n        echo \"linux\"\n    elif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n        echo \"macos\"\n    elif [[ \"$OSTYPE\" == \"cygwin\" ]] || [[ \"$OSTYPE\" == \"msys\" ]] || [[ \"$OSTYPE\" == \"win32\" ]]; then\n        echo \"windows\"\n    else\n        echo \"unknown\"\n    fi\n}\n\n# Function to install Node.js\ninstall_nodejs() {\n    print_status \"Installing Node.js...\"\n    \n    OS=$(get_os)\n    case $OS in\n        \"linux\")\n            # Install Node.js using NodeSource repository\n            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\n            sudo apt-get install -y nodejs\n            ;;\n        \"macos\")\n            if command_exists brew; then\n                brew install node@20\n                brew link --overwrite node@20\n            else\n                print_error \"Homebrew is not installed. Please install Homebrew first:\"\n                print_error \"Visit: https://brew.sh/\"\n                exit 1\n            fi\n            ;;\n        *)\n            print_error \"Please install Node.js 20.x manually from https://nodejs.org/\"\n            exit 1\n            ;;\n    esac\n}\n\n# Function to install PostgreSQL\ninstall_postgresql() {\n    print_status \"Installing PostgreSQL...\"\n    \n    OS=$(get_os)\n    case $OS in\n        \"linux\")\n            sudo apt-get update\n            sudo apt-get install -y postgresql postgresql-contrib\n            sudo systemctl start postgresql\n            sudo systemctl enable postgresql\n            ;;\n        \"macos\")\n            if command_exists brew; then\n                brew install postgresql@15\n                brew services start postgresql@15\n            else\n                print_error \"Homebrew is not installed. Please install Homebrew first:\"\n                print_error \"Visit: https://brew.sh/\"\n                exit 1\n            fi\n            ;;\n        *)\n            print_error \"Please install PostgreSQL manually\"\n            exit 1\n            ;;\n    esac\n}\n\n# Function to setup PostgreSQL database\nsetup_database() {\n    print_status \"Setting up PostgreSQL database...\"\n    \n    # Show existing databases\n    echo \"\"\n    print_status \"Available PostgreSQL databases:\"\n    echo \"\"\n    \n    # Get list of databases (excluding system databases)\n    existing_dbs=$(psql -lqt 2>/dev/null | cut -d \\| -f 1 | grep -v -E '^\\s*(template[01]|postgres)\\s*$' | sed 's/^ *//g' | sed 's/ *$//g' | grep -v '^$' | sort)\n    \n    if [[ -n \"$existing_dbs\" ]]; then\n        echo \"Existing databases:\"\n        counter=1\n        declare -a db_array\n        while IFS= read -r db; do\n            echo \"  $counter) $db\"\n            db_array[$counter]=\"$db\"\n            ((counter++))\n        done <<< \"$existing_dbs\"\n        echo \"  $counter) Create new database\"\n        echo \"\"\n        \n        while true; do\n            read -p \"Select database (1-$counter) or enter custom name: \" db_choice\n            \n            # Check if it's a number\n            if [[ \"$db_choice\" =~ ^[0-9]+$ ]]; then\n                if [[ $db_choice -ge 1 && $db_choice -lt $counter ]]; then\n                    # Selected existing database\n                    db_name=\"${db_array[$db_choice]}\"\n                    db_exists=true\n                    break\n                elif [[ $db_choice -eq $counter ]]; then\n                    # Create new database\n                    read -p \"Enter new database name (default: myhomeohealth): \" db_name\n                    if [[ -z \"$db_name\" ]]; then\n                        db_name=\"myhomeohealth\"\n                    fi\n                    db_exists=false\n                    break\n                else\n                    print_error \"Invalid selection. Please choose 1-$counter\"\n                fi\n            else\n                # Custom database name entered\n                db_name=\"$db_choice\"\n                # Check if this custom name exists\n                if echo \"$existing_dbs\" | grep -qw \"$db_name\"; then\n                    db_exists=true\n                else\n                    db_exists=false\n                fi\n                break\n            fi\n        done\n    else\n        print_warning \"No existing databases found or unable to list databases\"\n        read -p \"Enter database name (default: myhomeohealth): \" db_name\n        if [[ -z \"$db_name\" ]]; then\n            db_name=\"myhomeohealth\"\n        fi\n        db_exists=false\n    fi\n    \n    # Check database existence based on selection\n    if [[ \"$db_exists\" == \"true\" ]]; then\n        print_success \"Using existing database '$db_name'\"\n    else\n        print_status \"Will create new database '$db_name'\"\n    fi\n    \n    if [[ \"$db_exists\" == \"true\" ]]; then\n        print_success \"Database '$db_name' already exists\"\n        \n        # Ask for existing credentials\n        echo \"\"\n        print_status \"Please provide credentials for existing database:\"\n        read -p \"PostgreSQL username: \" db_user\n        read -s -p \"PostgreSQL password: \" db_password\n        echo \"\"\n        read -p \"PostgreSQL host (default: localhost): \" db_host\n        if [[ -z \"$db_host\" ]]; then\n            db_host=\"localhost\"\n        fi\n        read -p \"PostgreSQL port (default: 5432): \" db_port\n        if [[ -z \"$db_port\" ]]; then\n            db_port=\"5432\"\n        fi\n        \n        # Test connection\n        export PGPASSWORD=\"$db_password\"\n        if psql -h \"$db_host\" -p \"$db_port\" -U \"$db_user\" -d \"$db_name\" -c \"\\q\" 2>/dev/null; then\n            print_success \"Database connection successful\"\n            DATABASE_URL=\"postgresql://$db_user:$db_password@$db_host:$db_port/$db_name\"\n        else\n            print_error \"Failed to connect to database with provided credentials\"\n            return 1\n        fi\n        \n    else\n        print_status \"Database '$db_name' not found. Creating new database...\"\n        \n        # Generate random password for new database\n        db_user=\"homeo_user\"\n        db_password=$(openssl rand -base64 12 2>/dev/null || date +%s | sha256sum | base64 | head -c 12)\n        db_host=\"localhost\"\n        db_port=\"5432\"\n        \n        # Create database and user\n        print_status \"Creating database and user...\"\n        \n        # Use postgres superuser to create database\n        if command_exists sudo; then\n            sudo -u postgres psql -c \"CREATE DATABASE $db_name;\" 2>/dev/null || {\n                print_status \"Trying alternative database creation method...\"\n                psql -U postgres -c \"CREATE DATABASE $db_name;\" 2>/dev/null || {\n                    print_error \"Failed to create database. Please ensure PostgreSQL is running and you have proper permissions.\"\n                    print_status \"Manual setup: Run 'createdb $db_name' or ask your administrator to create the database.\"\n                    return 1\n                }\n            }\n            \n            sudo -u postgres psql -c \"CREATE USER $db_user WITH ENCRYPTED PASSWORD '$db_password';\" 2>/dev/null || true\n            sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $db_name TO $db_user;\" 2>/dev/null || true\n            sudo -u postgres psql -c \"ALTER USER $db_user CREATEDB;\" 2>/dev/null || true\n        else\n            createdb \"$db_name\" 2>/dev/null || {\n                print_error \"Failed to create database. Please run: createdb $db_name\"\n                return 1\n            }\n        fi\n        \n        print_success \"Database '$db_name' created successfully\"\n        print_success \"Database user '$db_user' created with password: $db_password\"\n        \n        DATABASE_URL=\"postgresql://$db_user:$db_password@$db_host:$db_port/$db_name\"\n        \n        # Save credentials to a file for reference\n        echo \"Database Credentials (save this information):\" > .database-info.txt\n        echo \"Database Name: $db_name\" >> .database-info.txt\n        echo \"Username: $db_user\" >> .database-info.txt\n        echo \"Password: $db_password\" >> .database-info.txt\n        echo \"Host: $db_host\" >> .database-info.txt\n        echo \"Port: $db_port\" >> .database-info.txt\n        echo \"Connection URL: $DATABASE_URL\" >> .database-info.txt\n        \n        print_warning \"Database credentials saved to .database-info.txt\"\n    fi\n    \n    # Save to .env.local\n    echo \"DATABASE_URL=$DATABASE_URL\" > .env.local\n    print_success \"Database configuration saved to .env.local\"\n    \n    return 0\n}\n\n# Function to get available port\nget_available_port() {\n    local port=$1\n    while netstat -tuln 2>/dev/null | grep -q \":$port \"; do\n        port=$((port + 1))\n    done\n    echo $port\n}\n\n# Function to configure environment\nconfigure_environment() {\n    print_status \"Configuring environment variables...\"\n    \n    # Extract database components from DATABASE_URL for individual env vars\n    if [[ $DATABASE_URL =~ postgresql://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+) ]]; then\n        DB_USER=\"${BASH_REMATCH[1]}\"\n        DB_PASSWORD=\"${BASH_REMATCH[2]}\"\n        DB_HOST=\"${BASH_REMATCH[3]}\"\n        DB_PORT=\"${BASH_REMATCH[4]}\"\n        DB_NAME=\"${BASH_REMATCH[5]}\"\n    fi\n    \n    # Add other environment variables to .env.local (DATABASE_URL was already added)\n    cat >> .env.local << EOF\n\n# Individual Database Configuration\nPGHOST=$DB_HOST\nPGPORT=$DB_PORT\nPGDATABASE=$DB_NAME\nPGUSER=$DB_USER\nPGPASSWORD=$DB_PASSWORD\n\n# Server Configuration\nNODE_ENV=development\nSESSION_SECRET=$(openssl rand -base64 32)\n\n# Development Settings\nVITE_API_URL=http://localhost:5000\nEOF\n    \n    # Ask for AI configuration\n    echo \"\"\n    read -p \"Do you want to configure AI features? (y/n): \" configure_ai\n    if [[ $configure_ai =~ ^[Yy]$ ]]; then\n        echo \"\"\n        echo \"Please choose your AI provider:\"\n        echo \"1) Google Gemini\"\n        echo \"2) OpenAI GPT\"\n        echo \"3) Anthropic Claude\"\n        read -p \"Enter your choice (1-3): \" ai_choice\n        \n        case $ai_choice in\n            1)\n                read -p \"Enter your Google Gemini API Key: \" gemini_key\n                echo \"GEMINI_API_KEY=$gemini_key\" >> .env.local\n                echo \"AI_PROVIDER=gemini\" >> .env.local\n                ;;\n            2)\n                read -p \"Enter your OpenAI API Key: \" openai_key\n                echo \"OPENAI_API_KEY=$openai_key\" >> .env.local\n                echo \"AI_PROVIDER=openai\" >> .env.local\n                ;;\n            3)\n                read -p \"Enter your Anthropic API Key: \" anthropic_key\n                echo \"ANTHROPIC_API_KEY=$anthropic_key\" >> .env.local\n                echo \"AI_PROVIDER=anthropic\" >> .env.local\n                ;;\n        esac\n        print_success \"AI configuration completed\"\n    fi\n    \n    print_success \"Environment configuration completed\"\n}\n\n# Main setup function\nmain() {\n    clear\n    echo \"================================================\"\n    echo \"   My Homeo Health - Automated Setup Script    \"\n    echo \"================================================\"\n    echo \"\"\n    \n    # Check if we're in the right directory\n    if [[ ! -f \"package.json\" ]] || [[ ! -d \"client\" ]] || [[ ! -d \"server\" ]]; then\n        print_error \"Please run this script from the My Homeo Health project directory\"\n        exit 1\n    fi\n    \n    print_status \"Starting automated setup process...\"\n    \n    # Check and install Node.js\n    if command_exists node; then\n        NODE_VERSION=$(node --version)\n        print_success \"Node.js is already installed: $NODE_VERSION\"\n        \n        # Check if version is compatible (18.x or higher)\n        MAJOR_VERSION=$(echo $NODE_VERSION | cut -d'.' -f1 | sed 's/v//')\n        if [ \"$MAJOR_VERSION\" -lt 18 ]; then\n            print_warning \"Node.js version is too old. Installing newer version...\"\n            install_nodejs\n        fi\n    else\n        print_warning \"Node.js not found. Installing...\"\n        install_nodejs\n    fi\n    \n    # Check and install PostgreSQL\n    if command_exists psql; then\n        print_success \"PostgreSQL is already installed\"\n    else\n        print_warning \"PostgreSQL not found. Installing...\"\n        install_postgresql\n    fi\n    \n    # Setup database\n    setup_database\n    \n    # Install project dependencies\n    print_status \"Installing project dependencies...\"\n    npm install\n    print_success \"Dependencies installed successfully\"\n    \n    # Configure environment\n    configure_environment\n    \n    # Run database migrations\n    print_status \"Running database setup...\"\n    if [[ -f \".env.local\" ]]; then\n        export $(grep -v '^#' .env.local | xargs)\n        print_status \"Environment variables loaded\"\n    fi\n    \n    # Test database connection before migration\n    if [[ -n \"$DATABASE_URL\" ]]; then\n        print_status \"Testing database connection...\"\n        if psql \"$DATABASE_URL\" -c \"\\q\" 2>/dev/null; then\n            print_success \"Database connection successful\"\n            npm run db:push 2>/dev/null && print_success \"Database schema updated\" || print_warning \"Database migration will be attempted when server starts\"\n        else\n            print_warning \"Unable to connect to database. Schema will be created when server starts\"\n        fi\n    else\n        print_warning \"DATABASE_URL not set. Please check .env.local file\"\n    fi\n    \n    # Configure port\n    echo \"\"\n    print_status \"Configuring server port...\"\n    \n    DEFAULT_PORT=5000\n    echo \"Current default port: $DEFAULT_PORT\"\n    \n    # Check if default port is in use\n    if netstat -tuln 2>/dev/null | grep -q \":$DEFAULT_PORT \"; then\n        print_warning \"Port $DEFAULT_PORT is already in use\"\n        echo \"Available ports: 5001, 5002, 3000, 8000, 8080\"\n        read -p \"Enter port number (default: 5001): \" CUSTOM_PORT\n        PORT=${CUSTOM_PORT:-5001}\n    else\n        read -p \"Enter port number (default: $DEFAULT_PORT): \" USER_PORT\n        PORT=${USER_PORT:-$DEFAULT_PORT}\n    fi\n    \n    # Validate port number\n    if ! [[ \"$PORT\" =~ ^[0-9]+$ ]] || [ \"$PORT\" -lt 1024 ] || [ \"$PORT\" -gt 65535 ]; then\n        print_warning \"Invalid port number. Using default port 5000\"\n        PORT=5000\n    fi\n    \n    # Find available port if specified port is in use\n    PORT=$(get_available_port $PORT)\n    \n    print_success \"Server will run on port: $PORT\"\n    \n    # Update .env.local with selected port\n    echo \"PORT=$PORT\" >> .env.local\n    \n    # Build the project\n    print_status \"Building the project...\"\n    npm run build 2>/dev/null || print_warning \"Build step skipped - will run in development mode\"\n    \n    print_success \"Setup completed successfully!\"\n    echo \"\"\n    echo \"================================================\"\n    echo \"             SETUP COMPLETE!                    \"\n    echo \"================================================\"\n    echo \"\"\n    echo \"📊 Database: PostgreSQL (localhost:5432)\"\n    echo \"🌐 Server will run on: http://localhost:$PORT\"\n    echo \"👤 Default admin login: admin / admin123\"\n    echo \"🩺 Default doctor login: doctor / doctor123\"\n    echo \"\"\n    echo \"To start the application:\"\n    echo \"  npm run dev\"\n    echo \"\"\n    echo \"Or run it now?\"\n    read -p \"Start the application now? (y/n): \" start_now\n    \n    if [[ $start_now =~ ^[Yy]$ ]]; then\n        print_status \"Starting My Homeo Health application...\"\n        echo \"\"\n        echo \"🚀 Application starting on http://localhost:$PORT\"\n        echo \"🔄 This may take a few moments for the first run...\"\n        echo \"\"\n        npm run dev\n    else\n        print_success \"Setup complete! Run 'npm run dev' when you're ready to start.\"\n    fi\n}\n\n# Trap Ctrl+C\ntrap 'echo -e \"\\n\\n${RED}Setup interrupted by user${NC}\"; exit 1' INT\n\n# Run main function\nmain \"$@\"","size_bytes":16205},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/config.ts":{"content":"// Environment configuration for development and production alignment\nimport dotenv from 'dotenv';\n\n// Load environment variables from .env.local\ndotenv.config({ path: '.env.local' });\n\nexport const config = {\n  // Environment detection\n  isDevelopment: process.env.NODE_ENV === \"development\",\n  isProduction: process.env.NODE_ENV === \"production\",\n  \n  // Server configuration\n  port: parseInt(process.env.PORT || '5000', 10),\n  host: process.env.HOST || '0.0.0.0',\n  \n  // Database configuration\n  database: {\n    url: process.env.DATABASE_URL,\n    maxConnections: process.env.NODE_ENV === 'production' ? 20 : 5,\n    ssl: process.env.DATABASE_URL?.includes('localhost') || \n         process.env.DATABASE_URL?.includes('127.0.0.1') ? false : { rejectUnauthorized: false }\n  },\n  \n  // Session configuration\n  session: {\n    secret: process.env.SESSION_SECRET || \"homeo-health-secret-key-2025\",\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    secure: process.env.NODE_ENV === \"production\",\n    sameSite: process.env.NODE_ENV === \"production\" ? 'strict' as const : 'lax' as const\n  },\n  \n  // API configuration\n  api: {\n    geminiKey: process.env.GEMINI_API_KEY,\n    rateLimit: process.env.NODE_ENV === 'production' ? 100 : 1000 // requests per minute\n  },\n  \n  // File upload limits\n  upload: {\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n    allowedMimeTypes: [\n      'text/csv',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'application/pdf'\n    ]\n  },\n  \n  // CORS configuration\n  cors: {\n    origin: process.env.NODE_ENV === 'production' \n      ? [process.env.CLIENT_URL, /\\.replit\\.app$/].filter(Boolean)\n      : ['http://localhost:3000', 'http://localhost:5000'],\n    credentials: true\n  }\n};\n\n// Validation function to ensure required environment variables\nexport function validateConfig() {\n  const required = ['DATABASE_URL'];\n  const missing = required.filter(key => !process.env[key]);\n  \n  if (missing.length > 0) {\n    throw new Error(`Missing required environment variables: ${missing.join(', ')}`);\n  }\n  \n  // Warn about optional but recommended variables\n  const recommended = ['GEMINI_API_KEY', 'SESSION_SECRET'];\n  const missingRecommended = recommended.filter(key => !process.env[key]);\n  \n  if (missingRecommended.length > 0) {\n    console.warn(`⚠️  Missing recommended environment variables: ${missingRecommended.join(', ')}`);\n  }\n}","size_bytes":2429},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/node-postgres';\nimport { Pool } from 'pg';\nimport * as schema from \"@shared/schema\";\nimport { config } from \"./config\";\n\nif (!config.database.url) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nconsole.log(\"Database URL configured:\", config.database.url.substring(0, 30) + \"...\");\n\n// Create connection pool with environment-specific settings\nexport const pool = new Pool({ \n  connectionString: config.database.url,\n  ssl: config.database.ssl,\n  max: config.database.maxConnections,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 5000\n});\n\n// Add error handling for connection issues\npool.on('error', (err: Error) => {\n  console.error('Database pool error:', err);\n});\n\nexport const db = drizzle({ client: pool, schema });","size_bytes":822},"server/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface MedicineSuggestion {\n  name: string;\n  power?: string;\n  dosage: string;\n  frequency: string;\n  duration: string;\n  reasoning: string;\n}\n\nexport async function getHomeopathicMedicineSuggestions(symptoms: string): Promise<MedicineSuggestion[]> {\n  try {\n    const systemPrompt = `You are an expert homeopathic doctor with 20+ years of experience. \nAnalyze the given symptoms and suggest appropriate homeopathic medicines with proper dosage.\nFocus on common homeopathic remedies and provide practical treatment recommendations.\nRespond with JSON format containing an array of medicine suggestions.`;\n\n    const userPrompt = `Patient symptoms: ${symptoms}\n\nPlease suggest 3-5 homeopathic medicines that could help with these symptoms. For each medicine, provide:\n- name: The medicine name (e.g., \"Arnica Montana\", \"Belladonna\")\n- power: The potency (e.g., \"30\", \"200\", \"1M\") - optional\n- dosage: Amount per dose (e.g., \"3 drops\", \"2 pills\")\n- frequency: How often (e.g., \"3 times daily\", \"twice daily\")\n- duration: Treatment period (e.g., \"7 days\", \"15 days\")\n- reasoning: Brief explanation why this medicine suits these symptoms\n\nReturn only valid JSON with no additional text.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            suggestions: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  name: { type: \"string\" },\n                  power: { type: \"string\" },\n                  dosage: { type: \"string\" },\n                  frequency: { type: \"string\" },\n                  duration: { type: \"string\" },\n                  reasoning: { type: \"string\" }\n                },\n                required: [\"name\", \"dosage\", \"frequency\", \"duration\", \"reasoning\"]\n              }\n            }\n          },\n          required: [\"suggestions\"]\n        }\n      },\n      contents: userPrompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      const data = JSON.parse(rawJson);\n      return data.suggestions || [];\n    }\n    \n    return [];\n  } catch (error) {\n    console.error('Gemini API error:', error);\n    throw new Error(`Failed to get AI suggestions: ${error}`);\n  }\n}\n\nexport async function analyzeDiscussion(question: string): Promise<string> {\n  try {\n    const systemPrompt = `আপনি একজন অভিজ্ঞ হোমিওপ্যাথি চিকিৎসক। আপনার ২০+ বছরের অভিজ্ঞতা রয়েছে। \nরোগীর প্রশ্ন বিশ্লেষণ করুন এবং হোমিওপ্যাথি ঔষধ সম্পর্কে বিস্তারিত তথ্য প্রদান করুন।\nবাংলায় উত্তর দিন এবং চিকিৎসা পরামর্শ দিন।`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n      },\n      contents: question,\n    });\n\n    return response.text || \"দুঃখিত, আমি এই মুহূর্তে আপনার প্রশ্নের উত্তর দিতে পারছি না।\";\n  } catch (error) {\n    console.error('Medicine discussion error:', error);\n    throw new Error(`Failed to analyze medicine discussion: ${error}`);\n  }\n}\n\nexport interface TemplateGenerationOptions {\n  clinicName: string;\n  doctorName: string;\n  degree: string;\n  headerNotes: string;\n  footerNotes: string;\n  description: string;\n  language: 'bengali' | 'english';\n}\n\nexport async function generatePrescriptionTemplate(options: TemplateGenerationOptions): Promise<string> {\n  try {\n    const { clinicName, doctorName, degree, headerNotes, footerNotes, description, language } = options;\n    \n    const systemPrompt = language === 'bengali' \n      ? `আপনি একজন পেশাদার ওয়েব ডিজাইনার এবং হোমিওপ্যাথি বিশেষজ্ঞ। আপনার কাজ হলো একটি সুন্দর, পেশাদার HTML প্রেসক্রিপশন টেমপ্লেট তৈরি করা।`\n      : `You are a professional web designer and homeopathy expert. Your task is to create a beautiful, professional HTML prescription template.`;\n\n    const userPrompt = language === 'bengali' \n      ? `একটি পেশাদার হোমিওপ্যাথি প্রেসক্রিপশন টেমপ্লেট তৈরি করুন:\n\nক্লিনিকের তথ্য:\n- ক্লিনিকের নাম: ${clinicName}\n- ডাক্তারের নাম: ${doctorName}\n- ডিগ্রি: ${degree}\n- হেডার নোট: ${headerNotes}\n- ফুটার নোট: ${footerNotes}\n${description ? `- বিশেষ প্রয়োজনীয়তা ও বর্ণনা: ${description}` : ''}\n\nটেমপ্লেটে নিম্নলিখিত ভেরিয়েবল ব্যবহার করুন:\n- {{clinicName}} - ক্লিনিকের নাম\n- {{doctorName}} - ডাক্তারের নাম\n- {{patientName}} - রোগীর নাম\n- {{patientAge}} - রোগীর বয়স\n- {{patientGender}} - রোগীর লিঙ্গ\n- {{patientPhone}} - রোগীর ফোন\n- {{patientAddress}} - রোগীর ঠিকানা\n- {{date}} - তারিখ\n- {{prescriptionId}} - প্রেসক্রিপশন আইডি\n- {{symptoms}} - উপসর্গ\n- {{medicines}} - ঔষধের তালিকা (HTML ফরম্যাটে)\n- {{notes}} - অতিরিক্ত নোট\n\nপ্রয়োজনীয়তা:\n1. সম্পূর্ণ HTML ডকুমেন্ট তৈরি করুন\n2. সুন্দর CSS স্টাইলিং যুক্ত করুন\n3. প্রিন্ট-ফ্রেন্ডলি ডিজাইন\n4. বাংলা ফন্ট সাপোর্ট\n5. ক্লিনিক লোগো এবং ব্র্যান্ডিং এরিয়া\n6. রোগী এবং ঔষধের তথ্যের জন্য স্পষ্ট সেকশন\n7. হেডার এবং ফুটারে প্রদত্ত নোট অন্তর্ভুক্ত করুন`\n      : `Create a professional homeopathy prescription template:\n\nClinic Information:\n- Clinic Name: ${clinicName}\n- Doctor Name: ${doctorName}\n- Degree: ${degree}\n- Header Notes: ${headerNotes}\n- Footer Notes: ${footerNotes}\n${description ? `- Special Requirements & Description: ${description}` : ''}\n\nUse these variables in the template:\n- {{clinicName}} - Clinic name\n- {{doctorName}} - Doctor name\n- {{patientName}} - Patient name\n- {{patientAge}} - Patient age\n- {{patientGender}} - Patient gender\n- {{patientPhone}} - Patient phone\n- {{patientAddress}} - Patient address\n- {{date}} - Date\n- {{prescriptionId}} - Prescription ID\n- {{symptoms}} - Symptoms\n- {{medicines}} - Medicines list (HTML format)\n- {{notes}} - Additional notes\n\nRequirements:\n1. Create complete HTML document\n2. Include beautiful CSS styling\n3. Print-friendly design\n4. Support for Bengali fonts\n5. Clinic logo and branding area\n6. Clear sections for patient and medicine information\n7. Include provided notes in header and footer`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n      },\n      contents: userPrompt,\n    });\n\n    const generatedContent = response.text;\n    \n    if (!generatedContent) {\n      throw new Error('No content generated');\n    }\n\n    // Clean up the HTML - remove markdown code blocks if present\n    let cleanHTML = generatedContent.trim();\n    if (cleanHTML.startsWith('```html')) {\n      cleanHTML = cleanHTML.replace(/^```html\\n/, '').replace(/\\n```$/, '');\n    } else if (cleanHTML.startsWith('```')) {\n      cleanHTML = cleanHTML.replace(/^```\\n/, '').replace(/\\n```$/, '');\n    }\n\n    return cleanHTML;\n\n  } catch (error) {\n    console.error('Template generation error:', error);\n    throw new Error(`Failed to generate prescription template: ${error}`);\n  }\n}","size_bytes":8616},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { config, validateConfig } from \"./config\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Validate environment configuration\n  try {\n    validateConfig();\n    log(`Starting server in ${config.isDevelopment ? 'development' : 'production'} mode`);\n  } catch (error: any) {\n    log(`Configuration error: ${error.message}`, \"error\");\n    process.exit(1);\n  }\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Setup serving based on environment\n  if (config.isDevelopment) {\n    log(\"Setting up Vite development server with HMR\");\n    await setupVite(app, server);\n  } else {\n    log(\"Setting up static file serving for production\");\n    serveStatic(app);\n  }\n\n  // Start server with environment-specific configuration\n  server.listen({\n    port: config.port,\n    host: config.host,\n    reusePort: true,\n  }, () => {\n    log(`Server running on ${config.host}:${config.port}`);\n    log(`Environment: ${config.isDevelopment ? 'development' : 'production'}`);\n    log(`Database: ${config.database.url?.includes('localhost') ? 'local' : 'remote'}`);\n  });\n})();\n","size_bytes":2333},"server/notifications.ts":{"content":"// Notification service for sending push notifications\nimport { db } from \"./db\";\nimport * as schema from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\ninterface NotificationPayload {\n  title: string;\n  body: string;\n  data?: any;\n  icon?: string;\n  badge?: string;\n  actions?: Array<{\n    action: string;\n    title: string;\n    icon?: string;\n  }>;\n}\n\n// This would require web-push library in production\n// For demo purposes, we'll simulate the notification sending\nexport class NotificationService {\n  async sendToUser(userId: string, payload: NotificationPayload) {\n    try {\n      // Get user's push subscriptions\n      const subscriptions = await db.select()\n        .from(schema.pushSubscriptions)\n        .where(eq(schema.pushSubscriptions.userId, userId));\n\n      if (subscriptions.length === 0) {\n        console.log(`No push subscriptions found for user ${userId}`);\n        return;\n      }\n\n      // In production, this would use web-push to send actual notifications\n      console.log(`Sending notification to ${subscriptions.length} devices:`, {\n        userId,\n        payload,\n        subscriptions: subscriptions.map(sub => ({ endpoint: sub.endpoint }))\n      });\n\n      // Simulate successful delivery\n      return {\n        success: true,\n        delivered: subscriptions.length,\n        message: `Notification sent to ${subscriptions.length} devices`\n      };\n    } catch (error) {\n      console.error('Error sending notification:', error);\n      throw error;\n    }\n  }\n\n  async sendAppointmentReminder(appointmentId: string) {\n    try {\n      // Get appointment details\n      const [appointment] = await db.select({\n        id: schema.appointments.id,\n        patientName: schema.patients.name,\n        doctorName: schema.users.username,\n        dateTime: schema.appointments.dateTime,\n        type: schema.appointments.type,\n        patientId: schema.appointments.patientId,\n        doctorId: schema.appointments.doctorId\n      })\n      .from(schema.appointments)\n      .innerJoin(schema.patients, eq(schema.appointments.patientId, schema.patients.id))\n      .innerJoin(schema.users, eq(schema.appointments.doctorId, schema.users.id))\n      .where(eq(schema.appointments.id, appointmentId));\n\n      if (!appointment) {\n        console.log(`Appointment ${appointmentId} not found`);\n        return;\n      }\n\n      const appointmentDate = new Date(appointment.dateTime);\n      const timeString = appointmentDate.toLocaleTimeString('en-US', { \n        hour: 'numeric', \n        minute: '2-digit', \n        hour12: true \n      });\n\n      const payload: NotificationPayload = {\n        title: 'Appointment Reminder',\n        body: `Your ${appointment.type} appointment with Dr. ${appointment.doctorName} is coming up at ${timeString}`,\n        data: {\n          appointmentId: appointment.id,\n          type: 'appointment_reminder',\n          url: '/appointments'\n        },\n        icon: '/icon-192x192.png',\n        badge: '/icon-72x72.png',\n        actions: [\n          {\n            action: 'view',\n            title: 'View Details'\n          },\n          {\n            action: 'dismiss',\n            title: 'Dismiss'\n          }\n        ]\n      };\n\n      // Send to patient\n      await this.sendToUser(appointment.patientId, payload);\n\n      // Send to doctor with different message\n      const doctorPayload: NotificationPayload = {\n        ...payload,\n        body: `Upcoming appointment with ${appointment.patientName} at ${timeString}`,\n        data: {\n          ...payload.data,\n          type: 'doctor_reminder'\n        }\n      };\n\n      await this.sendToUser(appointment.doctorId, doctorPayload);\n\n      return {\n        success: true,\n        message: 'Appointment reminders sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending appointment reminder:', error);\n      throw error;\n    }\n  }\n\n  async scheduleDailyReminders() {\n    try {\n      // Get all appointments for tomorrow\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      tomorrow.setHours(0, 0, 0, 0);\n      const dayAfter = new Date(tomorrow);\n      dayAfter.setDate(dayAfter.getDate() + 1);\n\n      const appointments = await db.select({\n        id: schema.appointments.id,\n        patientName: schema.patients.name,\n        doctorName: schema.users.username,\n        dateTime: schema.appointments.dateTime,\n        type: schema.appointments.type,\n        patientId: schema.appointments.patientId,\n      })\n      .from(schema.appointments)\n      .innerJoin(schema.patients, eq(schema.appointments.patientId, schema.patients.id))\n      .innerJoin(schema.users, eq(schema.appointments.doctorId, schema.users.id))\n      .where(eq(schema.appointments.status, 'pending'));\n\n      const tomorrowAppointments = appointments.filter(apt => {\n        const aptDate = new Date(apt.dateTime);\n        return aptDate >= tomorrow && aptDate < dayAfter;\n      });\n\n      if (tomorrowAppointments.length === 0) {\n        console.log('No appointments scheduled for tomorrow');\n        return;\n      }\n\n      // Group by patient\n      const patientAppointments = tomorrowAppointments.reduce((acc, apt) => {\n        if (!acc[apt.patientId]) {\n          acc[apt.patientId] = [];\n        }\n        acc[apt.patientId].push(apt);\n        return acc;\n      }, {} as Record<string, typeof tomorrowAppointments>);\n\n      // Send daily reminders\n      for (const [patientId, appointments] of Object.entries(patientAppointments)) {\n        const appointmentList = appointments\n          .map(apt => `${apt.type} at ${new Date(apt.dateTime).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })}`)\n          .join(', ');\n\n        const payload: NotificationPayload = {\n          title: 'Tomorrow\\'s Appointments',\n          body: `You have ${appointments.length} appointment${appointments.length > 1 ? 's' : ''} tomorrow: ${appointmentList}`,\n          data: {\n            type: 'daily_reminder',\n            url: '/appointments',\n            appointmentIds: appointments.map(apt => apt.id)\n          },\n          icon: '/icon-192x192.png',\n          badge: '/icon-72x72.png'\n        };\n\n        await this.sendToUser(patientId, payload);\n      }\n\n      return {\n        success: true,\n        message: `Daily reminders sent to ${Object.keys(patientAppointments).length} patients`\n      };\n    } catch (error) {\n      console.error('Error sending daily reminders:', error);\n      throw error;\n    }\n  }\n}\n\nexport const notificationService = new NotificationService();","size_bytes":6532},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport * as schema from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport crypto from \"crypto\";\nimport multer from \"multer\";\nimport csv from \"csv-parser\";\nimport * as XLSX from \"xlsx\";\nimport { Readable } from \"stream\";\nimport { insertUserSchema, insertPatientSchema, insertAppointmentSchema, insertPrescriptionSchema, insertMedicineSchema, whatsappSessions } from \"@shared/schema\";\nimport { GoogleGenAI } from \"@google/genai\";\nimport { config } from \"./config\";\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n    userRole?: string;\n  }\n}\n\ndeclare module \"express\" {\n  interface Request {\n    user?: {\n      id: string;\n      role: string;\n    };\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure multer for file uploads using config settings\n  const upload = multer({\n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: config.upload.maxFileSize,\n    },\n    fileFilter: (req, file, cb) => {\n      if (config.upload.allowedMimeTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only CSV, Excel, and PDF files are allowed'));\n      }\n    }\n  });\n\n  // Session configuration using centralized config\n  app.use(session({\n    secret: config.session.secret,\n    resave: false,\n    saveUninitialized: false,\n    rolling: true, // Reset expiration on activity\n    name: 'homeo.sid', // Custom session name\n    cookie: {\n      secure: config.session.secure, // HTTPS only in production\n      httpOnly: true,\n      maxAge: config.session.maxAge,\n      sameSite: config.session.sameSite\n    },\n    // Use database session store in production for scalability\n    store: config.isProduction ? undefined : undefined // Can be configured with connect-pg-simple if needed\n  }));\n\n  // Authentication middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    // Add user to request for convenience\n    req.user = { id: req.session.userId, role: req.session.userRole };\n    next();\n  };\n\n  const requireRole = (roles: string[]) => (req: any, res: any, next: any) => {\n    if (!roles.includes(req.session.userRole)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n    next();\n  };\n\n  // Push notification subscription management\n  app.post(\"/api/notifications/subscribe\", requireAuth, async (req, res) => {\n    try {\n      const { endpoint, keys } = req.body;\n      const userId = req.session.userId!;\n      \n      // Store subscription in database\n      const subscription = {\n        id: crypto.randomUUID(),\n        userId,\n        endpoint,\n        p256dh: keys.p256dh,\n        auth: keys.auth,\n\n      };\n      \n      await db.insert(schema.pushSubscriptions).values(subscription);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error saving push subscription:\", error);\n      res.status(500).json({ error: \"Failed to save subscription\" });\n    }\n  });\n\n  app.post(\"/api/notifications/unsubscribe\", requireAuth, async (req, res) => {\n    try {\n      const { endpoint } = req.body;\n      \n      await db.delete(schema.pushSubscriptions)\n        .where(eq(schema.pushSubscriptions.endpoint, endpoint));\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error removing push subscription:\", error);\n      res.status(500).json({ error: \"Failed to remove subscription\" });\n    }\n  });\n\n  app.post(\"/api/notifications/settings\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const settings = req.body;\n      \n      // Store notification settings using UPSERT functionality\n      const notificationSetting = {\n        id: crypto.randomUUID(),\n        userId,\n        appointmentReminders: settings.appointmentReminders,\n        reminderTime: settings.reminderTime,\n        dailyReminders: settings.dailyReminders,\n        weeklyReports: settings.weeklyReports\n      };\n\n      await db.insert(schema.notificationSettings)\n        .values(notificationSetting)\n        .onConflictDoUpdate({\n          target: schema.notificationSettings.userId,\n          set: {\n            appointmentReminders: settings.appointmentReminders,\n            reminderTime: settings.reminderTime,\n            dailyReminders: settings.dailyReminders,\n            weeklyReports: settings.weeklyReports\n          }\n        });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error saving notification settings:\", error);\n      res.status(500).json({ error: \"Failed to save settings\" });\n    }\n  });\n\n  app.get(\"/api/notifications/settings\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      \n      const [settings] = await db.select().from(schema.notificationSettings)\n        .where(eq(schema.notificationSettings.userId, userId));\n      \n      res.json(settings || {\n        appointmentReminders: true,\n        reminderTime: 30,\n        dailyReminders: false,\n        weeklyReports: false\n      });\n    } catch (error) {\n      console.error(\"Error fetching notification settings:\", error);\n      res.status(500).json({ error: \"Failed to fetch settings\" });\n    }\n  });\n\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      if (!user || user.password !== password || !user.isActive) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.userId = user.id;\n      req.session.userRole = user.role;\n      \n      // Save session explicitly\n      req.session.save((err) => {\n        if (err) {\n          console.error(\"Session save error:\", err);\n        }\n      });\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users/doctors\", requireAuth, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const doctors = await storage.getDoctors();\n      const doctorsWithoutPasswords = doctors.map(({ password, ...doctor }) => doctor);\n      res.json(doctorsWithoutPasswords);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch doctors\" });\n    }\n  });\n\n  app.post(\"/api/users\", requireAuth, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", requireAuth, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const user = await storage.updateUser(id, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Patient routes\n  app.get(\"/api/patients\", requireAuth, async (req, res) => {\n    try {\n      const doctorId = req.session.userRole === \"doctor\" ? req.session.userId : undefined;\n      const patients = await storage.getPatients(doctorId);\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch patients\" });\n    }\n  });\n\n  app.get(\"/api/patients/:id\", requireAuth, async (req, res) => {\n    try {\n      const patient = await storage.getPatient(req.params.id);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      \n      // Check if doctor can access this patient\n      if (req.session.userRole === \"doctor\" && patient.doctorId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch patient\" });\n    }\n  });\n\n  app.post(\"/api/patients\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      const patientData = insertPatientSchema.parse({\n        ...req.body,\n        doctorId: req.session.userRole === \"doctor\" ? req.session.userId : req.body.doctorId\n      });\n      const patient = await storage.createPatient(patientData);\n      res.json(patient);\n    } catch (error) {\n      console.error(\"Error creating patient:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(400).json({ message: \"Invalid patient data\" });\n      }\n    }\n  });\n\n  // Appointment routes\n  app.get(\"/api/appointments\", requireAuth, async (req, res) => {\n    try {\n      const doctorId = req.session.userRole === \"doctor\" ? req.session.userId : undefined;\n      const appointments = await storage.getAppointments(doctorId);\n      res.json(appointments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch appointments\" });\n    }\n  });\n\n  app.get(\"/api/appointments/date/:date\", requireAuth, async (req, res) => {\n    try {\n      const { date } = req.params;\n      const doctorId = req.session.userRole === \"doctor\" ? req.session.userId! : req.query.doctorId as string;\n      const appointments = await storage.getAppointmentsByDate(doctorId, date);\n      res.json(appointments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch appointments\" });\n    }\n  });\n\n  app.post(\"/api/appointments\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      // Convert dateTime string to Date object\n      const appointmentInput = {\n        ...req.body,\n        doctorId: req.session.userRole === \"doctor\" ? req.session.userId : req.body.doctorId,\n        dateTime: new Date(req.body.dateTime) // Convert string to Date\n      };\n      \n      const appointmentData = insertAppointmentSchema.parse(appointmentInput);\n      const appointment = await storage.createAppointment(appointmentData);\n      res.json(appointment);\n    } catch (error) {\n      console.error(\"Error creating appointment:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(400).json({ message: \"Invalid appointment data\" });\n      }\n    }\n  });\n\n  app.put(\"/api/appointments/:id\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      // Get appointment first to check access\n      const existingAppointment = await storage.getAppointment(id);\n      if (!existingAppointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      \n      // Check if doctor can access this appointment\n      if (req.session.userRole === \"doctor\" && existingAppointment.doctorId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const appointment = await storage.updateAppointment(id, updates);\n      res.json(appointment);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update appointment\" });\n    }\n  });\n\n  app.delete(\"/api/appointments/:id\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const appointment = await storage.getAppointment(id);\n      \n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n\n      // For doctors, check if they own this appointment\n      if (req.session.userRole === 'doctor' && appointment.doctorId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const success = await storage.deleteAppointment(id);\n      if (!success) {\n        return res.status(500).json({ message: \"Failed to delete appointment\" });\n      }\n      \n      res.json({ message: \"Appointment deleted successfully\" });\n    } catch (error) {\n      console.error('Delete appointment error:', error);\n      res.status(500).json({ message: \"Failed to delete appointment\" });\n    }\n  });\n\n  // Prescription routes\n  app.get(\"/api/prescriptions\", requireAuth, async (req, res) => {\n    try {\n      const doctorId = req.session.userRole === \"doctor\" ? req.session.userId : undefined;\n      const patientId = req.query.patientId as string;\n      const prescriptions = await storage.getPrescriptions(doctorId, patientId);\n      res.json(prescriptions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch prescriptions\" });\n    }\n  });\n\n  app.get(\"/api/prescriptions/patient/:patientId\", requireAuth, async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const doctorId = req.session.userRole === \"doctor\" ? req.session.userId : undefined;\n      const prescriptions = await storage.getPrescriptions(doctorId, patientId);\n      res.json(prescriptions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch patient prescriptions\" });\n    }\n  });\n\n  app.post(\"/api/prescriptions\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      const prescriptionData = insertPrescriptionSchema.parse({\n        ...req.body,\n        doctorId: req.session.userRole === \"doctor\" ? req.session.userId : req.body.doctorId\n      });\n      const prescription = await storage.createPrescription(prescriptionData);\n      res.json(prescription);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid prescription data\" });\n    }\n  });\n\n  app.patch(\"/api/prescriptions/:id\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      // Get existing prescription to check access\n      const existingPrescription = await storage.getPrescription(id);\n      if (!existingPrescription) {\n        return res.status(404).json({ message: \"Prescription not found\" });\n      }\n      \n      // Check if doctor can access this prescription\n      if (req.session.userRole === \"doctor\" && existingPrescription.doctorId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      // Validate required fields\n      if (!updateData.symptoms || !updateData.medicines || !Array.isArray(updateData.medicines)) {\n        return res.status(400).json({ message: \"Invalid prescription data\" });\n      }\n\n      const prescription = await storage.updatePrescription(id, updateData);\n      res.json(prescription);\n    } catch (error) {\n      console.error(\"Error updating prescription:\", error);\n      res.status(500).json({ message: \"Failed to update prescription\" });\n    }\n  });\n\n  app.delete(\"/api/prescriptions/:id\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const prescription = await storage.getPrescription(id);\n      \n      if (!prescription) {\n        return res.status(404).json({ message: \"Prescription not found\" });\n      }\n\n      // For doctors, check if they own this prescription\n      if (req.session.userRole === 'doctor' && prescription.doctorId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const success = await storage.deletePrescription(id);\n      if (!success) {\n        return res.status(500).json({ message: \"Failed to delete prescription\" });\n      }\n      \n      res.json({ message: \"Prescription deleted successfully\" });\n    } catch (error) {\n      console.error('Delete prescription error:', error);\n      res.status(500).json({ message: \"Failed to delete prescription\" });\n    }\n  });\n\n  // Patient deletion route\n  app.delete(\"/api/patients/:id\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get existing patient to check access\n      const existingPatient = await storage.getPatient(id);\n      if (!existingPatient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      \n      // Check if doctor can access this patient\n      if (req.session.userRole === \"doctor\" && existingPatient.doctorId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      // Check if doctor has delete permission (only if role is doctor)\n      if (req.session.userRole === \"doctor\") {\n        const doctor = await storage.getUser(req.session.userId!);\n        if (!doctor?.canDeletePatients) {\n          return res.status(403).json({ message: \"Delete permission not granted. Contact admin to enable patient deletion.\" });\n        }\n      }\n      \n      // Delete patient and related data\n      await storage.deletePatient(id);\n      res.json({ message: \"Patient deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting patient:\", error);\n      res.status(500).json({ message: \"Failed to delete patient\" });\n    }\n  });\n\n  // Admin route to manage doctor permissions\n  app.patch(\"/api/users/:id/permissions\", requireAuth, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { canDeletePatients } = req.body;\n      \n      const user = await storage.updateUser(id, { canDeletePatients });\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user permissions:\", error);\n      res.status(500).json({ message: \"Failed to update permissions\" });\n    }\n  });\n\n  // Route to get all doctors (admin only)\n  app.get(\"/api/users\", requireAuth, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { role } = req.query;\n      const users = await storage.getUsersByRole(role as string || \"doctor\");\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Update user profile\n  app.patch(\"/api/users/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.session.userId!;\n      \n      // Users can only update their own profile, or admin can update any\n      if (id !== userId && req.session.userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Permission denied\" });\n      }\n      \n      const updateData = req.body;\n      \n      // Remove fields that shouldn't be updated via this endpoint\n      delete updateData.password;\n      delete updateData.username;\n      delete updateData.role;\n      \n      const updatedUser = await storage.updateUser(id, updateData);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Update user password\n  app.patch(\"/api/users/:id/password\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.session.userId!;\n      const { currentPassword, newPassword } = req.body;\n      \n      // Users can only change their own password\n      if (id !== userId) {\n        return res.status(403).json({ message: \"Permission denied\" });\n      }\n      \n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: \"Current password and new password are required\" });\n      }\n      \n      if (newPassword.length < 6) {\n        return res.status(400).json({ message: \"New password must be at least 6 characters long\" });\n      }\n      \n      // Get current user to verify password\n      const currentUser = await storage.getUser(id);\n      if (!currentUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Verify current password (in a real app, you'd hash and compare)\n      if (currentUser.password !== currentPassword) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n      \n      // Update password\n      const updatedUser = await storage.updateUser(id, { password: newPassword });\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ message: \"Password updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating password:\", error);\n      res.status(500).json({ message: \"Failed to update password\" });\n    }\n  });\n\n  // Patient update route\n  app.patch(\"/api/patients/:id\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      // Get existing patient to check access\n      const existingPatient = await storage.getPatient(id);\n      if (!existingPatient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      \n      // Check if doctor can access this patient\n      if (req.session.userRole === \"doctor\" && existingPatient.doctorId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      // Validate required fields\n      if (!updateData.name || !updateData.age || !updateData.gender || !updateData.phone) {\n        return res.status(400).json({ message: \"Name, age, gender, and phone are required\" });\n      }\n      \n      const patient = await storage.updatePatient(id, updateData);\n      res.json(patient);\n    } catch (error) {\n      console.error(\"Error updating patient:\", error);\n      res.status(500).json({ message: \"Failed to update patient\" });\n    }\n  });\n\n  // Medicine routes\n  app.get(\"/api/medicines\", requireAuth, async (req, res) => {\n    try {\n      const doctorId = req.session.userRole === \"doctor\" ? req.session.userId : undefined;\n      const medicines = await storage.getMedicines(doctorId);\n      res.json(medicines);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch medicines\" });\n    }\n  });\n\n  app.post(\"/api/medicines\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      const medicineData = insertMedicineSchema.parse({\n        ...req.body,\n        doctorId: req.session.userRole === \"doctor\" ? req.session.userId : req.body.doctorId\n      });\n      \n      // Check if medicine code already exists\n      const existingMedicines = await storage.getMedicines();\n      const existingMedicine = existingMedicines.find(m => m.code === medicineData.code);\n      if (existingMedicine) {\n        return res.status(400).json({ message: \"Medicine code already exists. Please use a unique code.\" });\n      }\n      \n      const medicine = await storage.createMedicine(medicineData);\n      res.json(medicine);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid medicine data\" });\n    }\n  });\n\n  app.patch(\"/api/medicines/:id\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // First check if medicine exists and belongs to the doctor\n      const existingMedicine = await storage.getMedicine(id);\n      if (!existingMedicine) {\n        return res.status(404).json({ message: \"Medicine not found\" });\n      }\n      \n      // Check if doctor is trying to update their own medicine\n      if (req.session.userRole === \"doctor\" && existingMedicine.doctorId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const updateData = insertMedicineSchema.partial().parse(req.body);\n      \n      // Check if medicine code is being updated and if it already exists\n      if (updateData.code && updateData.code !== existingMedicine.code) {\n        const existingMedicines = await storage.getMedicines();\n        const codeExists = existingMedicines.find(m => m.code === updateData.code && m.id !== id);\n        if (codeExists) {\n          return res.status(400).json({ message: \"Medicine code already exists. Please use a unique code.\" });\n        }\n      }\n      \n      const medicine = await storage.updateMedicine(id, updateData);\n      \n      if (!medicine) {\n        return res.status(404).json({ message: \"Medicine not found\" });\n      }\n      \n      res.json(medicine);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid medicine data\" });\n    }\n  });\n\n  app.delete(\"/api/medicines/:id\", requireAuth, requireRole([\"doctor\", \"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const medicine = await storage.getMedicine(id);\n      \n      if (!medicine) {\n        return res.status(404).json({ message: \"Medicine not found\" });\n      }\n\n      // For doctors, check if they own this medicine\n      if (req.session.userRole === 'doctor' && medicine.doctorId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const success = await storage.deleteMedicine(id);\n      if (!success) {\n        return res.status(500).json({ message: \"Failed to delete medicine\" });\n      }\n      \n      res.json({ message: \"Medicine deleted successfully\" });\n    } catch (error) {\n      console.error('Delete medicine error:', error);\n      res.status(500).json({ message: \"Failed to delete medicine\" });\n    }\n  });\n\n  // Medicine suggestion routes\n  app.get(\"/api/medicines/suggestions\", requireAuth, async (req, res) => {\n    try {\n      const { symptoms } = req.query;\n      if (!symptoms || typeof symptoms !== 'string') {\n        return res.status(400).json({ message: \"Symptoms parameter is required\" });\n      }\n\n      const doctorId = req.session.userRole === \"doctor\" ? req.session.userId : undefined;\n      const allMedicines = await storage.getMedicines(doctorId);\n      \n      // Database-based suggestions: search medicines by symptoms\n      const dbSuggestions = allMedicines.filter(medicine => {\n        if (!medicine.symptoms) return false;\n        const medicineSymptoms = medicine.symptoms.toLowerCase();\n        const searchSymptoms = symptoms.toLowerCase();\n        \n        // Check if any word in symptoms matches medicine symptoms\n        const searchWords = searchSymptoms.split(/\\s+/);\n        return searchWords.some(word => medicineSymptoms.includes(word));\n      }).slice(0, 5); // Limit to 5 suggestions\n\n      res.json({\n        suggestions: dbSuggestions.map(medicine => ({\n          id: medicine.id,\n          name: medicine.name,\n          power: medicine.power,\n          dosage: medicine.dosage,\n          symptoms: medicine.symptoms,\n          description: medicine.description,\n          source: 'database'\n        }))\n      });\n    } catch (error) {\n      console.error('Medicine suggestion error:', error);\n      res.status(500).json({ message: \"Failed to get medicine suggestions\" });\n    }\n  });\n\n  // Medicine upload route\n  app.post(\"/api/medicines/upload\", requireAuth, requireRole([\"doctor\", \"admin\"]), upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const doctorId = req.session.userRole === \"doctor\" ? req.session.userId : req.body.doctorId;\n      if (!doctorId) {\n        return res.status(400).json({ message: \"Doctor ID is required\" });\n      }\n\n      let medicines: any[] = [];\n      const results = {\n        successful: 0,\n        failed: 0,\n        errors: [] as string[]\n      };\n\n      // Parse file based on type\n      if (req.file.mimetype === 'text/csv') {\n        // Parse CSV\n        medicines = await parseCSV(req.file.buffer);\n      } else if (req.file.mimetype.includes('sheet') || req.file.mimetype.includes('excel')) {\n        // Parse Excel\n        medicines = await parseExcel(req.file.buffer);\n      } else if (req.file.mimetype === 'application/pdf') {\n        // Parse PDF\n        const pdfParse = await import('pdf-parse');\n        medicines = await parsePDF(req.file.buffer, pdfParse.default);\n      } else {\n        return res.status(400).json({ message: \"Unsupported file format\" });\n      }\n\n      // Get existing medicines to check for duplicate codes\n      const existingMedicines = await storage.getMedicines();\n      const existingCodes = new Set(existingMedicines.map(m => m.code.toUpperCase()));\n\n      // Process each medicine\n      for (const medicineData of medicines) {\n        try {\n          // Validate required fields\n          if (!medicineData.name || !medicineData.code) {\n            results.failed++;\n            results.errors.push(`Missing required fields (name or code) for: ${medicineData.name || 'unknown'}`);\n            continue;\n          }\n\n          // Generate unique code if duplicate\n          let uniqueCode = medicineData.code.toUpperCase();\n          let counter = 1;\n          while (existingCodes.has(uniqueCode)) {\n            uniqueCode = `${medicineData.code.toUpperCase()}${counter}`;\n            counter++;\n          }\n\n          // Create medicine object\n          const medicineToCreate = {\n            name: medicineData.name.trim(),\n            code: uniqueCode,\n            description: medicineData.description?.trim() || \"\",\n            power: medicineData.power?.trim() || \"\",\n            dosage: medicineData.dosage?.trim() || \"\",\n            symptoms: medicineData.symptoms?.trim() || \"\",\n            doctorId\n          };\n\n          // Validate with schema\n          const validatedMedicine = insertMedicineSchema.parse(medicineToCreate);\n          \n          // Create medicine\n          await storage.createMedicine(validatedMedicine);\n          existingCodes.add(uniqueCode); // Add to set to avoid duplicates in this batch\n          results.successful++;\n\n        } catch (error: any) {\n          results.failed++;\n          results.errors.push(`Failed to create medicine \"${medicineData.name}\": ${error.message}`);\n        }\n      }\n\n      res.json({\n        message: `Upload completed. ${results.successful} medicines imported, ${results.failed} failed.`,\n        ...results\n      });\n\n    } catch (error: any) {\n      console.error('Medicine upload error:', error);\n      res.status(500).json({ \n        message: \"Failed to process file upload\",\n        error: error.message \n      });\n    }\n  });\n\n  // Helper functions for file parsing\n  function parseCSV(buffer: Buffer): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const medicines: any[] = [];\n      const stream = Readable.from(buffer.toString());\n      \n      stream\n        .pipe(csv({\n          mapHeaders: ({ header }) => header.toLowerCase().trim()\n        }))\n        .on('data', (data) => {\n          medicines.push({\n            name: data.name || data['medicine name'] || data['name'],\n            code: data.code || data['medicine code'] || data['code'],\n            company: data.company || data['manufacturer'] || data['company/manufacturer'],\n            description: data.description || data['desc'],\n            power: data.power || data['potency'],\n            dosage: data.dosage || data['dose'],\n            symptoms: data.symptoms || data['indications'] || data['used for'],\n            currentStock: parseInt(data['current stock'] || data['stock'] || data['currentstock']) || 0,\n            lowStockThreshold: parseInt(data['low stock threshold'] || data['threshold'] || data['lowstockthreshold']) || 10\n          });\n        })\n        .on('end', () => resolve(medicines))\n        .on('error', reject);\n    });\n  }\n\n  function parseExcel(buffer: Buffer): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      try {\n        const workbook = XLSX.read(buffer, { type: 'buffer' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n\n        if (jsonData.length < 2) {\n          return resolve([]);\n        }\n\n        const headers = (jsonData[0] as string[]).map(h => h.toLowerCase().trim());\n        const medicines: any[] = [];\n\n        for (let i = 1; i < jsonData.length; i++) {\n          const row = jsonData[i] as any[];\n          if (!row || row.length === 0) continue;\n\n          const medicine: any = {};\n          headers.forEach((header, index) => {\n            const value = row[index];\n            if (value !== undefined && value !== null && value !== '') {\n              if (header.includes('name')) medicine.name = String(value).trim();\n              else if (header.includes('code')) medicine.code = String(value).trim();\n              else if (header.includes('company') || header.includes('manufacturer')) medicine.company = String(value).trim();\n              else if (header.includes('description') || header.includes('desc')) medicine.description = String(value).trim();\n              else if (header.includes('power') || header.includes('potency')) medicine.power = String(value).trim();\n              else if (header.includes('dosage') || header.includes('dose')) medicine.dosage = String(value).trim();\n              else if (header.includes('symptoms') || header.includes('indications') || header.includes('used for')) medicine.symptoms = String(value).trim();\n              else if (header.includes('current stock') || header.includes('stock')) medicine.currentStock = parseInt(String(value)) || 0;\n              else if (header.includes('threshold') || header.includes('low stock')) medicine.lowStockThreshold = parseInt(String(value)) || 10;\n            }\n          });\n\n          if (medicine.name || medicine.code) {\n            medicines.push(medicine);\n          }\n        }\n\n        resolve(medicines);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async function parsePDF(buffer: Buffer, pdfParseFunc: any): Promise<any[]> {\n    try {\n      const pdfData = await pdfParseFunc(buffer);\n      const text = pdfData.text;\n      \n      // Simple PDF parsing - look for patterns like:\n      // Medicine Name, Code, Description, etc.\n      const lines = text.split('\\n').filter(line => line.trim());\n      const medicines: any[] = [];\n\n      for (const line of lines) {\n        // Skip headers and empty lines\n        if (!line || line.toLowerCase().includes('medicine') || line.toLowerCase().includes('name') || line.length < 10) {\n          continue;\n        }\n\n        // Try to parse comma-separated or tab-separated values\n        const parts = line.split(/[,\\t]/).map(p => p.trim()).filter(p => p);\n        \n        if (parts.length >= 2) {\n          medicines.push({\n            name: parts[0],\n            code: parts[1],\n            company: parts[2] || \"\",\n            description: parts[3] || \"\",\n            power: parts[4] || \"\",\n            dosage: parts[5] || \"\",\n            symptoms: parts[6] || \"\",\n            currentStock: parseInt(parts[7]) || 0,\n            lowStockThreshold: parseInt(parts[8]) || 10\n          });\n        }\n      }\n\n      return medicines;\n    } catch (error) {\n      throw new Error('Failed to parse PDF file');\n    }\n  }\n\n  app.post(\"/api/medicines/ai-suggestions\", requireAuth, async (req, res) => {\n    try {\n      const { symptoms } = req.body;\n      if (!symptoms || typeof symptoms !== 'string') {\n        return res.status(400).json({ message: \"Symptoms are required\" });\n      }\n\n      const { getHomeopathicMedicineSuggestions } = await import('./gemini');\n      const aiSuggestions = await getHomeopathicMedicineSuggestions(symptoms);\n      \n      res.json({\n        suggestions: aiSuggestions.map(suggestion => ({\n          ...suggestion,\n          source: 'ai'\n        }))\n      });\n    } catch (error) {\n      console.error('AI suggestion error:', error);\n      res.status(500).json({ message: \"Failed to get AI suggestions. Please check your API configuration.\" });\n    }\n  });\n\n  // AI Discussion endpoint for medicines\n  app.post(\"/api/medicines/ai-discuss\", requireAuth, async (req, res) => {\n    try {\n      const { query, language } = req.body;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ message: \"Query is required\" });\n      }\n\n      // Initialize Gemini AI\n      const genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n      \n      const isBengali = language === 'bengali';\n      \n      // Create a comprehensive prompt for homeopathic medicine consultation\n      const systemPrompt = isBengali \n        ? `আপনি একজন অভিজ্ঞ হোমিওপ্যাথিক ডাক্তার যার হোমিওপ্যাথিক ওষুধ এবং তাদের প্রয়োগ সম্পর্কে ব্যাপক জ্ঞান রয়েছে। \n      হোমিওপ্যাথিক ওষুধ সম্পর্কে নিম্নলিখিত প্রশ্নের জন্য বাংলা ভাষায় সম্পূর্ণ তথ্য প্রদান করুন।\n      \n      যদি ব্যবহারকারী একটি নির্দিষ্ট ওষুধ সম্পর্কে জিজ্ঞাসা করেন (যেমন অ্যার্নিকা মন্টানা, বেলাডোনা ইত্যাদি), প্রদান করুন:\n      1. ওষুধটি কিসের জন্য ব্যবহৃত হয় (লক্ষণ/অবস্থা)\n      2. সাধারণ ডোজ এবং শক্তি\n      3. কখন এটি ব্যবহার করতে হবে\n      4. কোনো গুরুত্বপূর্ণ নোট বা সতর্কতা\n      \n      যদি ব্যবহারকারী লক্ষণ বা রোগ সম্পর্কে জিজ্ঞাসা করেন, প্রদান করুন:\n      1. হোমিওপ্যাথিক ওষুধের তালিকা যা সাহায্য করতে পারে\n      2. প্রতিটি ওষুধের ক্রিয়ার সংক্ষিপ্ত বিবরণ\n      3. প্রস্তাবিত শক্তি\n      4. ব্যবহারের নির্দেশাবলী\n      \n      সর্বদা বাংলায় উত্তর দিন এবং হোমিওপ্যাথিক অনুশীলনের জন্য তথ্য সঠিক এবং সহায়ক রাখুন।\n      \n      ব্যবহারকারীর প্রশ্ন: ${query}`\n        : `You are an expert homeopathic doctor with extensive knowledge of homeopathic medicines and their applications. \n      Please provide comprehensive information in English for the following query about homeopathic medicines.\n      \n      If the user asks about a specific medicine (like Arnica Montana, Belladonna, etc.), provide:\n      1. What the medicine is used for (symptoms/conditions)\n      2. Common dosage and potency\n      3. When to use it\n      4. Any important notes or precautions\n      \n      If the user asks about symptoms or diseases, provide:\n      1. List of homeopathic medicines that can help\n      2. Brief description of each medicine's action\n      3. Recommended potencies\n      4. Usage instructions\n      \n      Always respond in English and keep the information accurate and helpful for homeopathic practice.\n      \n      User Query: ${query}`;\n\n      const response = await genAI.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        contents: systemPrompt,\n      });\n\n      const aiResponse = response.text || \"দুঃখিত, এই মুহূর্তে তথ্য প্রদান করা সম্ভব হচ্ছে না।\";\n      \n      res.json({ response: aiResponse });\n    } catch (error) {\n      console.error(\"Error in AI discussion:\", error);\n      res.status(500).json({ \n        message: \"AI সেবা সাময়িকভাবে অনুপলব্ধ\",\n        response: \"দুঃখিত, এই মুহূর্তে AI সেবা পাওয়া যাচ্ছে না। পরে আবার চেষ্টা করুন।\" \n      });\n    }\n  });\n\n  // Statistics routes\n  app.get(\"/api/stats/dashboard\", requireAuth, async (req, res) => {\n    try {\n      const doctorId = req.session.userRole === \"doctor\" ? req.session.userId! : undefined;\n      \n      const patients = await storage.getPatients(doctorId);\n      const appointments = await storage.getAppointments(doctorId);\n      const prescriptions = await storage.getPrescriptions(doctorId);\n      const medicines = await storage.getMedicines(doctorId);\n      \n      const today = new Date().toISOString().split('T')[0];\n      const todayAppointments = appointments.filter(a => {\n        const appointmentDate = a.dateTime.toISOString().split('T')[0];\n        return appointmentDate === today;\n      });\n      \n      const prescriptionsToday = prescriptions.filter(p => {\n        const prescriptionDate = p.createdAt!.toISOString().split('T')[0];\n        return prescriptionDate === today;\n      });\n      \n      const pendingAppointments = appointments.filter(a => a.status === \"upcoming\");\n\n      res.json({\n        totalPatients: patients.length,\n        todayAppointments: todayAppointments.length,\n        prescriptionsToday: prescriptionsToday.length,\n        pendingAppointments: pendingAppointments.length,\n        totalMedicines: medicines.length,\n        totalDoctors: doctorId ? 1 : (await storage.getDoctors()).length\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/stats\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const doctors = await storage.getDoctors();\n      const patients = await storage.getPatients();\n      const medicines = await storage.getMedicines();\n      const appointments = await storage.getAppointments();\n\n      // Get appointments count by doctor\n      const appointmentsByDoctor = doctors.map(doctor => {\n        const doctorAppointments = appointments.filter(apt => apt.doctorId === doctor.id);\n        return {\n          doctorName: doctor.name,\n          count: doctorAppointments.length\n        };\n      }).filter(item => item.count > 0);\n\n      res.json({\n        doctorsCount: doctors.length,\n        patientsCount: patients.length,\n        medicinesCount: medicines.length,\n        appointmentsCount: appointments.length,\n        appointmentsByDoctor\n      });\n    } catch (error) {\n      console.error('Admin stats error:', error);\n      res.status(500).json({ message: \"Failed to fetch admin statistics\" });\n    }\n  });\n\n  app.get(\"/api/admin/doctors\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const doctors = await storage.getDoctors();\n      const result = doctors.map(doctor => ({\n        ...doctor,\n        isActive: doctor.isActive !== false // Default to true if not explicitly false\n      }));\n      res.json(result);\n    } catch (error) {\n      console.error('Admin doctors error:', error);\n      res.status(500).json({ message: \"Failed to fetch doctors\" });\n    }\n  });\n\n  app.post(\"/api/admin/doctors\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse({\n        ...req.body,\n        role: 'doctor'\n      });\n      \n      const newDoctor = await storage.createUser(userData);\n      res.json(newDoctor);\n    } catch (error) {\n      console.error('Admin create doctor error:', error);\n      res.status(500).json({ message: \"Failed to create doctor\" });\n    }\n  });\n\n  app.patch(\"/api/admin/doctors/:id\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      // Remove password if empty\n      if (updateData.password === \"\") {\n        delete updateData.password;\n      }\n      \n      const updatedDoctor = await storage.updateUser(id, updateData);\n      if (!updatedDoctor) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      \n      res.json(updatedDoctor);\n    } catch (error) {\n      console.error('Admin update doctor error:', error);\n      res.status(500).json({ message: \"Failed to update doctor\" });\n    }\n  });\n\n  // Admin user management routes\n  app.get(\"/api/admin/admins\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const admins = await db.select().from(schema.users).where(eq(schema.users.role, 'admin'));\n      const result = admins.map(admin => ({\n        id: admin.id,\n        name: admin.name,\n        username: admin.username,\n        email: admin.email,\n        createdAt: admin.createdAt,\n        isActive: admin.isActive !== false\n      }));\n      res.json(result);\n    } catch (error) {\n      console.error('Admin fetch admins error:', error);\n      res.status(500).json({ message: \"Failed to fetch admin users\" });\n    }\n  });\n\n  app.post(\"/api/admin/admins\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse({\n        ...req.body,\n        role: 'admin'\n      });\n      \n      const newAdmin = await storage.createUser(userData);\n      res.json({\n        id: newAdmin.id,\n        name: newAdmin.name,\n        username: newAdmin.username,\n        email: newAdmin.email,\n        createdAt: newAdmin.createdAt,\n        isActive: newAdmin.isActive\n      });\n    } catch (error) {\n      console.error('Admin create admin error:', error);\n      if (error.message.includes('duplicate key')) {\n        res.status(400).json({ message: \"Username already exists\" });\n      } else {\n        res.status(500).json({ message: \"Failed to create admin user\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/admin/admins/:id\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      // Prevent admin from deactivating themselves\n      if (id === req.session.userId && updateData.isActive === false) {\n        return res.status(400).json({ message: \"Cannot deactivate your own admin account\" });\n      }\n      \n      // Remove password if empty\n      if (updateData.password === \"\") {\n        delete updateData.password;\n      }\n      \n      const updatedAdmin = await storage.updateUser(id, updateData);\n      if (!updatedAdmin) {\n        return res.status(404).json({ message: \"Admin user not found\" });\n      }\n      \n      res.json({\n        id: updatedAdmin.id,\n        name: updatedAdmin.name,\n        username: updatedAdmin.username,\n        email: updatedAdmin.email,\n        createdAt: updatedAdmin.createdAt,\n        isActive: updatedAdmin.isActive\n      });\n    } catch (error) {\n      console.error('Admin update admin error:', error);\n      res.status(500).json({ message: \"Failed to update admin user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/admins/:id\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get the admin user to be deleted\n      const adminToDelete = await db.select().from(schema.users).where(eq(schema.users.id, id)).limit(1);\n      if (adminToDelete.length === 0) {\n        return res.status(404).json({ message: \"Admin user not found\" });\n      }\n      \n      // Prevent deleting the main 'admin' username\n      if (adminToDelete[0].username === 'admin') {\n        return res.status(400).json({ message: \"Cannot delete the main admin user\" });\n      }\n      \n      // Prevent admin from deleting themselves\n      if (id === req.session.userId) {\n        return res.status(400).json({ message: \"Cannot delete your own admin account\" });\n      }\n      \n      // Check if there are other active admins\n      const activeAdmins = await db.select().from(schema.users)\n        .where(eq(schema.users.role, 'admin'))\n        .where(eq(schema.users.isActive, true));\n      \n      if (activeAdmins.length <= 1) {\n        return res.status(400).json({ message: \"Cannot delete the last active admin user\" });\n      }\n      \n      const success = await storage.deleteUser(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Admin user not found\" });\n      }\n      \n      res.json({ message: \"Admin user deleted successfully\" });\n    } catch (error) {\n      console.error('Admin delete admin error:', error);\n      res.status(500).json({ message: \"Failed to delete admin user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/doctors/:id\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Delete all related data first\n      const patients = await storage.getPatients(id);\n      for (const patient of patients) {\n        await storage.deletePatient(patient.id, id);\n      }\n      \n      const success = await storage.deleteUser(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      \n      res.json({ message: \"Doctor deleted successfully\" });\n    } catch (error) {\n      console.error('Admin delete doctor error:', error);\n      res.status(500).json({ message: \"Failed to delete doctor\" });\n    }\n  });\n\n  app.patch(\"/api/admin/doctors/:id/ai-feature\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { aiFeatureEnabled } = req.body;\n      \n      const updatedDoctor = await storage.updateUser(id, { aiFeatureEnabled });\n      if (!updatedDoctor) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      \n      res.json({ \n        message: \"AI feature setting updated successfully\",\n        aiFeatureEnabled: updatedDoctor.aiFeatureEnabled \n      });\n    } catch (error) {\n      console.error('Admin toggle AI feature error:', error);\n      res.status(500).json({ message: \"Failed to update AI feature setting\" });\n    }\n  });\n\n  app.patch(\"/api/admin/doctors/:id/delete-permission\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { canDeletePatients } = req.body;\n      \n      const updatedDoctor = await storage.updateUser(id, { canDeletePatients });\n      if (!updatedDoctor) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      \n      res.json({ \n        message: \"Delete permission updated successfully\",\n        canDeletePatients: updatedDoctor.canDeletePatients \n      });\n    } catch (error) {\n      console.error('Admin toggle delete permission error:', error);\n      res.status(500).json({ message: \"Failed to update delete permission\" });\n    }\n  });\n\n  app.get(\"/api/admin/patients\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const patients = await storage.getPatients();\n      const doctors = await storage.getDoctors();\n      \n      // Add doctor names and prescription counts\n      const patientsWithDetails = await Promise.all(\n        patients.map(async (patient) => {\n          const doctor = doctors.find(d => d.id === patient.doctorId);\n          const prescriptions = await storage.getPrescriptions(patient.doctorId);\n          const patientPrescriptions = prescriptions.filter(p => p.patientId === patient.id);\n          \n          return {\n            ...patient,\n            doctorName: doctor?.name || 'Unknown',\n            prescriptionCount: patientPrescriptions.length\n          };\n        })\n      );\n      \n      res.json(patientsWithDetails);\n    } catch (error) {\n      console.error('Admin patients error:', error);\n      res.status(500).json({ message: \"Failed to fetch patients\" });\n    }\n  });\n\n  // Prescription Template Management Routes\n  app.get(\"/api/admin/templates\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const templates = await storage.getPrescriptionTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error('Get templates error:', error);\n      res.status(500).json({ message: \"Failed to fetch templates\" });\n    }\n  });\n\n  app.post(\"/api/admin/templates\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const templateData = {\n        ...req.body,\n        createdBy: req.session.userId!\n      };\n      \n      const newTemplate = await storage.createPrescriptionTemplate(templateData);\n      res.json(newTemplate);\n    } catch (error) {\n      console.error('Create template error:', error);\n      res.status(500).json({ message: \"Failed to create template\" });\n    }\n  });\n\n  app.patch(\"/api/admin/templates/:id\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      const updatedTemplate = await storage.updatePrescriptionTemplate(id, updateData);\n      if (!updatedTemplate) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      \n      res.json(updatedTemplate);\n    } catch (error) {\n      console.error('Update template error:', error);\n      res.status(500).json({ message: \"Failed to update template\" });\n    }\n  });\n\n  app.delete(\"/api/admin/templates/:id\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deletePrescriptionTemplate(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      \n      res.json({ message: \"Template deleted successfully\" });\n    } catch (error) {\n      console.error('Delete template error:', error);\n      res.status(500).json({ message: \"Failed to delete template\" });\n    }\n  });\n\n  // Template Assignment Routes\n  app.get(\"/api/admin/template-assignments\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const assignments = await storage.getAdminTemplateAssignments();\n      res.json(assignments);\n    } catch (error) {\n      console.error('Get template assignments error:', error);\n      res.status(500).json({ message: \"Failed to fetch template assignments\" });\n    }\n  });\n\n  app.get(\"/api/doctor/templates\", requireAuth, requireRole(['doctor']), async (req, res) => {\n    try {\n      const assignments = await storage.getDoctorTemplateAssignments((req as any).user.id);\n      res.json(assignments);\n    } catch (error) {\n      console.error('Get doctor templates error:', error);\n      res.status(500).json({ message: \"Failed to fetch assigned templates\" });\n    }\n  });\n\n  app.post(\"/api/admin/template-assignments\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const assignmentData = {\n        ...req.body,\n        assignedBy: (req as any).user.id\n      };\n      \n      const newAssignment = await storage.assignTemplateToDoctor(assignmentData);\n      res.json(newAssignment);\n    } catch (error) {\n      console.error('Assign template error:', error);\n      res.status(500).json({ message: \"Failed to assign template\" });\n    }\n  });\n\n  app.delete(\"/api/admin/template-assignments/:doctorId/:templateId\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { doctorId, templateId } = req.params;\n      const success = await storage.removeTemplateFromDoctor(doctorId, templateId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Template assignment not found\" });\n      }\n      \n      res.json({ message: \"Template assignment removed successfully\" });\n    } catch (error) {\n      console.error('Remove template assignment error:', error);\n      res.status(500).json({ message: \"Failed to remove template assignment\" });\n    }\n  });\n\n  app.patch(\"/api/admin/template-assignments/:doctorId/:templateId/default\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { doctorId, templateId } = req.params;\n      const success = await storage.setDefaultTemplate(doctorId, templateId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Template assignment not found\" });\n      }\n      \n      res.json({ message: \"Default template set successfully\" });\n    } catch (error) {\n      console.error('Set default template error:', error);\n      res.status(500).json({ message: \"Failed to set default template\" });\n    }\n  });\n\n  // AI Template Generation Route\n  app.post(\"/api/admin/generate-template\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const { clinicName, doctorName, degree, headerNotes, footerNotes, description, language } = req.body;\n      \n      if (!clinicName || !doctorName || !language) {\n        return res.status(400).json({ message: \"Clinic name, doctor name, and language are required\" });\n      }\n\n      const { generatePrescriptionTemplate } = await import('./gemini');\n      \n      const templateContent = await generatePrescriptionTemplate({\n        clinicName,\n        doctorName,\n        degree: degree || '',\n        headerNotes: headerNotes || '',\n        footerNotes: footerNotes || '',\n        description: description || '',\n        language\n      });\n      \n      res.json({ \n        templateContent,\n        message: \"Template generated successfully\"\n      });\n    } catch (error) {\n      console.error('AI template generation error:', error);\n      res.status(500).json({ \n        message: \"Failed to generate template. Please check your AI configuration and try again.\"\n      });\n    }\n  });\n\n  // WhatsApp Settings Routes\n  app.patch(\"/api/users/:id/whatsapp\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { whatsappPhone, whatsappEnabled } = req.body;\n      \n      // Check if user can update this profile\n      if (req.session.userId !== id && !['admin'].includes((req.session as any).role || '')) {\n        return res.status(403).json({ message: \"Not authorized to update this profile\" });\n      }\n\n      const updatedUser = await storage.updateUser(id, {\n        whatsappPhone,\n        whatsappEnabled\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"WhatsApp settings updated successfully\", user: updatedUser });\n    } catch (error) {\n      console.error('Update WhatsApp settings error:', error);\n      res.status(500).json({ message: \"Failed to update WhatsApp settings\" });\n    }\n  });\n\n  // Update user settings\n  app.patch(\"/api/users/:id/settings\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { globalLowStockThreshold } = req.body;\n      \n      // Check if user can update this profile\n      if (req.session.userId !== id && !['admin'].includes((req.session as any).role || '')) {\n        return res.status(403).json({ message: \"Not authorized to update this profile\" });\n      }\n\n      const updatedUser = await storage.updateUser(id, {\n        globalLowStockThreshold\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"Settings updated successfully\", user: updatedUser });\n    } catch (error) {\n      console.error('Update settings error:', error);\n      res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  // Enhanced Conversational WhatsApp Booking Route (Public endpoint for webhook/API)\n  app.post(\"/api/whatsapp/message\", async (req, res) => {\n    try {\n      const { doctorPhone, patientPhone, message } = req.body;\n      \n      if (!doctorPhone || !patientPhone || !message) {\n        return res.status(400).json({ \n          message: \"Missing required parameters: doctorPhone, patientPhone, message\" \n        });\n      }\n\n      // Find doctor by WhatsApp phone\n      const doctor = await storage.getUserByWhatsApp(doctorPhone);\n      if (!doctor || !doctor.whatsappEnabled) {\n        return res.status(404).json({ \n          message: \"Doctor not found or WhatsApp booking not enabled\" \n        });\n      }\n\n      // Clean up expired sessions\n      await storage.deleteExpiredWhatsappSessions();\n\n      // Check for existing session\n      let session = await storage.getWhatsappSession(patientPhone, doctor.id);\n      \n      // Appointment keywords to detect booking intent\n      const appointmentKeywords = [\n        'appointment', 'booking', 'book', 'schedule', 'visit', 'consultation',\n        'অ্যাপয়েন্টমেন্ট', 'বুকিং', 'সময়', 'দেখা', 'চিকিৎসা'\n      ];\n      \n      const hasAppointmentKeyword = appointmentKeywords.some(keyword => \n        message.toLowerCase().includes(keyword.toLowerCase())\n      );\n\n      // If no session and appointment keyword detected, start new session\n      if (!session && hasAppointmentKeyword) {\n        const expiresAt = new Date();\n        expiresAt.setMinutes(expiresAt.getMinutes() + 30); // 30 minutes session\n\n        session = await storage.createWhatsappSession({\n          patientPhone,\n          doctorId: doctor.id,\n          step: 'awaiting_name',\n          sessionData: {},\n          expiresAt\n        });\n\n        return res.json({\n          success: true,\n          message: `Hello! I can help you book an appointment with Dr. ${doctor.name}.\\n\\n👤 Please tell me your full name:`\n        });\n      }\n\n      // If no session and no appointment keyword, provide general info\n      if (!session) {\n        return res.json({\n          success: true,\n          message: `Hello! I'm Dr. ${doctor.name}'s appointment booking assistant.\\n\\n🏥 Clinic: ${doctor.clinicName || 'Homeo Health Clinic'}\\n📍 Location: ${doctor.clinicLocation || 'Kolkata'}\\n\\nTo book an appointment, please type \"appointment\" or \"booking\".`\n        });\n      }\n\n      // Handle session-based conversation\n      const sessionData = session.sessionData || {};\n      let responseMessage = '';\n      let nextStep = session.step;\n\n      switch (session.step) {\n        case 'awaiting_name':\n          sessionData.name = message.trim();\n          nextStep = 'awaiting_age';\n          responseMessage = `Thank you, ${sessionData.name}!\\n\\n🎂 Please tell me your age:`;\n          break;\n\n        case 'awaiting_age':\n          const age = parseInt(message.trim());\n          if (isNaN(age) || age < 1 || age > 150) {\n            responseMessage = `Please provide a valid age (1-150):\\n\\nExample: 25`;\n            nextStep = session.step; // Stay in same step\n          } else {\n            sessionData.age = age;\n            nextStep = 'awaiting_gender';\n            responseMessage = `Age: ${age} years\\n\\n⚧️ Please tell me your gender:\\n\\n• Type \"Male\" or \"M\"\\n• Type \"Female\" or \"F\"\\n• Type \"Other\" or \"O\"`;\n          }\n          break;\n\n        case 'awaiting_gender':\n          const genderInput = message.trim().toLowerCase();\n          let gender = '';\n          if (['male', 'm', 'পুরুষ'].includes(genderInput)) {\n            gender = 'Male';\n          } else if (['female', 'f', 'মহিলা'].includes(genderInput)) {\n            gender = 'Female';\n          } else if (['other', 'o', 'অন্যান্য'].includes(genderInput)) {\n            gender = 'Other';\n          } else {\n            responseMessage = `Please choose a valid gender:\\n\\n• Type \"Male\" or \"M\"\\n• Type \"Female\" or \"F\"\\n• Type \"Other\" or \"O\"`;\n            nextStep = session.step; // Stay in same step\n            break;\n          }\n          sessionData.gender = gender;\n          nextStep = 'awaiting_location';\n          responseMessage = `Gender: ${gender}\\n\\n📍 Please tell me your location/area:\\n\\nExample: Kolkata, Dhaka, etc.`;\n          break;\n\n        case 'awaiting_location':\n          sessionData.location = message.trim();\n          nextStep = 'completed';\n          \n          // Now process the booking with collected data\n          try {\n            // Check doctor availability\n            const availability = await storage.getDoctorAvailability(doctor.id);\n            if (!availability.length) {\n              responseMessage = `Sorry, Dr. ${doctor.name} currently has no available appointment slots. Please try again later.`;\n              break;\n            }\n\n            // Find next available slot\n            const nextSlot = await storage.findNextAvailableSlot(doctor.id);\n            if (!nextSlot) {\n              responseMessage = `Sorry, no available appointment slots in the next 7 days. Please try again later.`;\n              break;\n            }\n\n            // Create or find existing patient\n            let patient = await storage.getPatientByPhoneAndDoctor(patientPhone, doctor.id);\n            \n            if (!patient) {\n              patient = await storage.createPatient({\n                name: sessionData.name,\n                age: sessionData.age,\n                gender: sessionData.gender,\n                phone: patientPhone,\n                location: sessionData.location,\n                doctorId: doctor.id\n              });\n            }\n\n            // Create appointment\n            const appointment = await storage.createAppointment({\n              patientId: patient.id,\n              doctorId: doctor.id,\n              dateTime: nextSlot,\n              type: 'consultation',\n              status: 'upcoming',\n              notes: `Booked via WhatsApp conversation`\n            });\n\n            // Format confirmation\n            const appointmentDate = new Date(nextSlot).toLocaleDateString('en-BD');\n            const appointmentTime = new Date(nextSlot).toLocaleTimeString('en-BD', { \n              hour: '2-digit', \n              minute: '2-digit',\n              hour12: true \n            });\n\n            responseMessage = `✅ Appointment Confirmed!\\n\\n👤 Patient: ${sessionData.name}\\n🎂 Age: ${sessionData.age}\\n⚧️ Gender: ${sessionData.gender}\\n📍 Location: ${sessionData.location}\\n\\n📅 Date: ${appointmentDate}\\n⏰ Time: ${appointmentTime}\\n🆔 Appointment ID: ${appointment.appointmentId}\\n👨‍⚕️ Doctor: ${doctor.name}\\n🏥 Clinic: ${doctor.clinicName || 'Homeo Health Clinic'}\\n\\nPlease arrive 10 minutes early. Thank you!`;\n\n          } catch (error) {\n            console.error('Appointment creation error:', error);\n            responseMessage = `Sorry, there was an error creating your appointment. Please try again later.`;\n          }\n          break;\n\n        default:\n          responseMessage = `Session expired. To book a new appointment, please type \"appointment\" or \"booking\".`;\n          nextStep = 'initial';\n      }\n\n      // Update session\n      if (nextStep === 'completed') {\n        // Delete completed session\n        await db.delete(whatsappSessions).where(eq(whatsappSessions.id, session.id));\n      } else {\n        await storage.updateWhatsappSession(session.id, {\n          step: nextStep,\n          sessionData\n        });\n      }\n\n      res.json({\n        success: true,\n        message: responseMessage\n      });\n\n    } catch (error) {\n      console.error('WhatsApp message processing error:', error);\n      res.status(500).json({ \n        message: \"Sorry, there was an error processing your message. Please try again later.\" \n      });\n    }\n  });\n\n  // Doctor Availability Routes\n  app.get(\"/api/doctor/availability\", requireAuth, requireRole(['doctor']), async (req, res) => {\n    try {\n      const availability = await storage.getDoctorAvailability(req.session.userId!);\n      res.json(availability);\n    } catch (error) {\n      console.error('Get doctor availability error:', error);\n      res.status(500).json({ message: \"Failed to fetch availability\" });\n    }\n  });\n\n  app.get(\"/api/doctor/availability/:doctorId\", requireAuth, async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      const availability = await storage.getDoctorAvailability(doctorId);\n      res.json(availability);\n    } catch (error) {\n      console.error('Get doctor availability error:', error);\n      res.status(500).json({ message: \"Failed to fetch availability\" });\n    }\n  });\n\n  app.post(\"/api/doctor/availability\", requireAuth, requireRole(['doctor']), async (req, res) => {\n    try {\n      const availabilityData = {\n        ...req.body,\n        doctorId: req.session.userId!\n      };\n      \n      const availability = await storage.upsertDoctorAvailability(availabilityData);\n      res.json(availability);\n    } catch (error) {\n      console.error('Update doctor availability error:', error);\n      res.status(500).json({ message: \"Failed to update availability\" });\n    }\n  });\n\n  app.delete(\"/api/doctor/availability/:dayOfWeek\", requireAuth, requireRole(['doctor']), async (req, res) => {\n    try {\n      const { dayOfWeek } = req.params;\n      const success = await storage.deleteDoctorAvailability(req.session.userId!, parseInt(dayOfWeek));\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Availability not found\" });\n      }\n      \n      res.json({ message: \"Availability deleted successfully\" });\n    } catch (error) {\n      console.error('Delete doctor availability error:', error);\n      res.status(500).json({ message: \"Failed to delete availability\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":70938},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type Patient, type InsertPatient, \n  type Appointment, type InsertAppointment, type Prescription, type InsertPrescription, \n  type Medicine, type InsertMedicine, type PrescriptionTemplate, type InsertPrescriptionTemplate,\n  type DoctorTemplateAssignment, type InsertDoctorTemplateAssignment,\n  type DoctorAvailability, type InsertDoctorAvailability,\n  type WhatsappSession, type InsertWhatsappSession,\n  users, patients, appointments, prescriptions, medicines, prescriptionTemplates, doctorTemplateAssignments, doctorAvailability, whatsappSessions \n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  getDoctors(): Promise<User[]>;\n  getUsersByRole(role: string): Promise<User[]>;\n  \n  // Patient methods\n  getPatients(doctorId?: string): Promise<Patient[]>;\n  getPatient(id: string): Promise<Patient | undefined>;\n  getPatientByPatientId(patientId: string): Promise<Patient | undefined>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatient(id: string, updates: Partial<Patient>): Promise<Patient | undefined>;\n  \n  // Appointment methods\n  getAppointments(doctorId?: string): Promise<Appointment[]>;\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, updates: Partial<Appointment>): Promise<Appointment | undefined>;\n  getAppointmentsByDate(doctorId: string, date: string): Promise<Appointment[]>;\n  \n  // Prescription methods\n  getPrescriptions(doctorId?: string, patientId?: string): Promise<Prescription[]>;\n  getPrescription(id: string): Promise<Prescription | undefined>;\n  createPrescription(prescription: InsertPrescription): Promise<Prescription>;\n  updatePrescription(id: string, updates: Partial<Prescription>): Promise<Prescription | undefined>;\n  deletePrescription(id: string): Promise<boolean>;\n  \n  // Medicine methods\n  getMedicines(doctorId?: string): Promise<Medicine[]>;\n  getMedicine(id: string): Promise<Medicine | undefined>;\n  createMedicine(medicine: InsertMedicine): Promise<Medicine>;\n  updateMedicine(id: string, updates: Partial<Medicine>): Promise<Medicine | undefined>;\n  deleteMedicine(id: string): Promise<boolean>;\n\n  // Appointment methods (delete)\n  deleteAppointment(id: string): Promise<boolean>;\n  \n  // Admin methods\n  deleteUser(id: string): Promise<boolean>;\n  deletePatient(id: string, doctorId?: string): Promise<void>;\n  \n  // Template methods\n  getPrescriptionTemplates(): Promise<PrescriptionTemplate[]>;\n  getPrescriptionTemplate(id: string): Promise<PrescriptionTemplate | undefined>;\n  createPrescriptionTemplate(template: InsertPrescriptionTemplate): Promise<PrescriptionTemplate>;\n  updatePrescriptionTemplate(id: string, updates: Partial<PrescriptionTemplate>): Promise<PrescriptionTemplate | undefined>;\n  deletePrescriptionTemplate(id: string): Promise<boolean>;\n  \n  // Template assignment methods\n  getAdminTemplateAssignments(): Promise<any[]>;\n  getDoctorTemplateAssignments(doctorId: string): Promise<any[]>;\n  assignTemplateToDoctor(assignment: InsertDoctorTemplateAssignment): Promise<DoctorTemplateAssignment>;\n  removeTemplateFromDoctor(doctorId: string, templateId: string): Promise<boolean>;\n  setDefaultTemplate(doctorId: string, templateId: string): Promise<boolean>;\n\n  // Doctor availability methods\n  getDoctorAvailability(doctorId: string): Promise<DoctorAvailability[]>;\n  upsertDoctorAvailability(availability: InsertDoctorAvailability): Promise<DoctorAvailability>;\n  deleteDoctorAvailability(doctorId: string, dayOfWeek: number): Promise<boolean>;\n\n  // WhatsApp methods\n  getUserByWhatsApp(whatsappPhone: string): Promise<User | undefined>;\n  findNextAvailableSlot(doctorId: string): Promise<Date | null>;\n  getPatientByPhoneAndDoctor(phone: string, doctorId: string): Promise<Patient | undefined>;\n  \n  // WhatsApp session methods\n  getWhatsappSession(patientPhone: string, doctorId: string): Promise<WhatsappSession | undefined>;\n  createWhatsappSession(session: InsertWhatsappSession): Promise<WhatsappSession>;\n  updateWhatsappSession(id: string, updates: Partial<WhatsappSession>): Promise<WhatsappSession | undefined>;\n  deleteExpiredWhatsappSessions(): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    this.initializeData();\n  }\n\n  // Generate doctor-specific prefix from doctor name\n  private generateDoctorPrefix(doctorName: string): string {\n    // Remove \"Dr.\" prefix if present and extract first name\n    const cleanName = doctorName.replace(/^Dr\\.\\s*/i, '');\n    const firstName = cleanName.split(' ')[0].toLowerCase();\n    \n    // Get first letter of first name, capitalize it\n    const firstLetter = firstName.charAt(0).toUpperCase();\n    \n    // For names like \"Dr. Rajesh Sharma\" -> \"R\"\n    // For names like \"Ranajit\" -> \"R\"\n    return firstLetter;\n  }\n\n  // Generate unique patient ID\n  private async generatePatientId(doctorId: string): Promise<string> {\n    const doctor = await this.getUser(doctorId);\n    if (!doctor) throw new Error(\"Doctor not found\");\n    \n    const prefix = this.generateDoctorPrefix(doctor.name);\n    \n    // Count existing patients for this doctor to handle duplicates\n    const existingPatients = await db.select().from(patients).where(eq(patients.doctorId, doctorId));\n    const doctorPatientCount = existingPatients.length;\n    \n    // Check if we need to add a number suffix for duplicate doctor names\n    const allDoctors = await db.select().from(users).where(eq(users.role, 'doctor'));\n    const doctorsWithSamePrefix = allDoctors.filter(d => \n      d.id !== doctorId && this.generateDoctorPrefix(d.name) === prefix\n    );\n    \n    let finalPrefix = `${prefix}HP`;\n    if (doctorsWithSamePrefix.length > 0) {\n      // Add number suffix (2, 3, etc.) for duplicate prefixes\n      finalPrefix = `${prefix}HP${doctorsWithSamePrefix.length + 1}`;\n    }\n    \n    // Generate sequential number\n    const patientNumber = doctorPatientCount + 1;\n    return `${finalPrefix}-${patientNumber}`;\n  }\n\n  // Generate unique appointment ID\n  private async generateAppointmentId(doctorId: string): Promise<string> {\n    const doctor = await this.getUser(doctorId);\n    if (!doctor) throw new Error(\"Doctor not found\");\n    \n    const prefix = this.generateDoctorPrefix(doctor.name);\n    \n    // Count existing appointments for this doctor\n    const existingAppointments = await db.select().from(appointments).where(eq(appointments.doctorId, doctorId));\n    const doctorAppointmentCount = existingAppointments.length;\n    \n    // Check if we need to add a number suffix for duplicate doctor names\n    const allDoctors = await db.select().from(users).where(eq(users.role, 'doctor'));\n    const doctorsWithSamePrefix = allDoctors.filter(d => \n      d.id !== doctorId && this.generateDoctorPrefix(d.name) === prefix\n    );\n    \n    let finalPrefix = `${prefix}HPA`;\n    if (doctorsWithSamePrefix.length > 0) {\n      // Add number suffix for duplicate prefixes\n      finalPrefix = `${prefix}HPA${doctorsWithSamePrefix.length + 1}`;\n    }\n    \n    // Generate sequential number\n    const appointmentNumber = doctorAppointmentCount + 1;\n    return `${finalPrefix}-${appointmentNumber}`;\n  }\n\n  private async initializeData() {\n    try {\n      // Check if we already have initial data\n      const existingUsers = await db.select().from(users).limit(1);\n      if (existingUsers.length > 0) {\n        return; // Data already exists, skip initialization\n      }\n\n      // Create admin user\n      const [admin] = await db.insert(users).values({\n        username: \"admin\",\n        password: \"admin123\",\n        role: \"admin\",\n        name: \"Administrator\",\n        email: \"admin@homeohealth.com\",\n        phone: \"9876543210\",\n        isActive: true,\n      }).returning();\n\n      // Create doctor user\n      const [doctor] = await db.insert(users).values({\n        username: \"doctor\",\n        password: \"doctor123\",\n        role: \"doctor\",\n        name: \"Dr. Rajesh Sharma\",\n        email: \"doctor@homeohealth.com\",\n        phone: \"9123456789\",\n        clinicName: \"Homeo Health Clinic\",\n        clinicNameBengali: \"হোমিও হেলথ ক্লিনিক\",\n        clinicLocation: \"123 Main Street, Kolkata\",\n        clinicLocationBengali: \"১২৩ মেইন স্ট্রিট, কলকাতা\",\n        degree: \"BHMS, MD (Hom)\",\n        degreeBengali: \"বিএইচএমএস, এমডি (হোমিও)\",\n        specialist: \"General Homeopathy\",\n        specialistBengali: \"সাধারণ হোমিওপ্যাথি\",\n        extraNotes: \"15+ years of experience in homeopathic medicine\",\n        extraNotesBengali: \"হোমিওপ্যাথিক ঔষধে ১৫+ বছরের অভিজ্ঞতা\",\n        isActive: true,\n        canDeletePatients: true, // Enable delete permission for default doctor\n      }).returning();\n\n      // Create another doctor user (ranajit)\n      const [ranajitDoctor] = await db.insert(users).values({\n        username: \"ranajit\",\n        password: \"ranajit123\",\n        role: \"doctor\",\n        name: \"Dr. Ranajit Kumar\",\n        email: \"ranajit@homeohealth.com\",\n        phone: \"9234567890\",\n        clinicName: \"Ranajit Homeo Clinic\",\n        clinicNameBengali: \"রণজিৎ হোমিও ক্লিনিক\",\n        clinicLocation: \"456 Park Street, Kolkata\",\n        clinicLocationBengali: \"৪৫৬ পার্ক স্ট্রিট, কলকাতা\",\n        degree: \"BHMS, MD (Hom)\",\n        degreeBengali: \"বিএইচএমএস, এমডি (হোমিও)\",\n        specialist: \"Chronic Diseases\",\n        specialistBengali: \"দীর্ঘস্থায়ী রোগ\",\n        extraNotes: \"Specialist in chronic and constitutional treatments\",\n        extraNotesBengali: \"দীর্ঘস্থায়ী এবং গাঠনিক চিকিৎসায় বিশেষজ্ঞ\",\n        isActive: true,\n        canDeletePatients: true, // Enable delete permission for ranajit doctor\n      }).returning();\n\n      // Create comprehensive sample medicines\n      const medicineData = [\n        { name: \"Arnica Montana\", code: \"ARN\", description: \"For trauma and injury\", dosage: \"30C\", symptoms: \"Bruises, shock, trauma\", company: \"Dr. Willmar Schwabe\", currentStock: 25, lowStockThreshold: 10 },\n        { name: \"Belladonna\", code: \"BELL\", description: \"For fever and inflammation\", dosage: \"30C\", symptoms: \"High fever, headache, inflammation\", company: \"SBL Pvt Ltd\", currentStock: 18, lowStockThreshold: 15 },\n        { name: \"Nux Vomica\", code: \"NUX\", description: \"For digestive issues\", dosage: \"30C\", symptoms: \"Indigestion, constipation, hangover\", company: \"Hahnemann Laboratories\", currentStock: 8, lowStockThreshold: 12 },\n        { name: \"Bryonia Alba\", code: \"BRY\", description: \"For respiratory and joint issues\", dosage: \"200C\", symptoms: \"Dry cough, arthritis, headache\", company: \"Dr. Reckeweg\", currentStock: 22, lowStockThreshold: 10 },\n        { name: \"Pulsatilla\", code: \"PULS\", description: \"For emotional and hormonal issues\", dosage: \"30C\", symptoms: \"Mood swings, menstrual problems, weeping\", company: \"Bjain Pharmaceuticals\", currentStock: 15, lowStockThreshold: 8 },\n        { name: \"Rhus Toxicodendron\", code: \"RHUS\", description: \"For joint and skin problems\", dosage: \"30C\", symptoms: \"Joint stiffness, eczema, restlessness\", company: \"SBL Pvt Ltd\", currentStock: 30, lowStockThreshold: 12 },\n        { name: \"Calcarea Carbonica\", code: \"CALC\", description: \"For constitutional treatment\", dosage: \"200C\", symptoms: \"Weakness, cold tendency, delayed milestones\", company: \"Adel Pekana\", currentStock: 5, lowStockThreshold: 15 },\n        { name: \"Lycopodium\", code: \"LYC\", description: \"For digestive and liver issues\", dosage: \"30C\", symptoms: \"Bloating, liver problems, right-sided symptoms\", company: \"Dr. Willmar Schwabe\", currentStock: 20, lowStockThreshold: 10 },\n        { name: \"Sulphur\", code: \"SULPH\", description: \"For skin conditions\", dosage: \"30C\", symptoms: \"Itchy skin, burning sensation, heat intolerance\", company: \"Hahnemann Laboratories\", currentStock: 12, lowStockThreshold: 8 },\n        { name: \"Arsenicum Album\", code: \"ARS\", description: \"For anxiety and gastric issues\", dosage: \"30C\", symptoms: \"Anxiety, restlessness, burning pains\", company: \"Bjain Pharmaceuticals\", currentStock: 14, lowStockThreshold: 10 }\n      ];\n\n      const createdMedicines = await db.insert(medicines).values(\n        medicineData.map(med => ({\n          name: med.name,\n          code: med.code,\n          description: med.description,\n          dosage: med.dosage,\n          symptoms: med.symptoms,\n          company: med.company,\n          currentStock: med.currentStock,\n          lowStockThreshold: med.lowStockThreshold,\n          doctorId: doctor.id,\n        }))\n      ).returning();\n\n      // Create comprehensive sample patients\n      const patientData = [\n        { name: \"Somnath Roy\", age: 25, gender: \"Male\", phone: \"9874567543\", address: \"123 Park Street, Kolkata\", location: \"Kolkata\" },\n        { name: \"Priya Sharma\", age: 32, gender: \"Female\", phone: \"9876543210\", address: \"45 Marine Drive, Mumbai\", location: \"Mumbai\" },\n        { name: \"Rajesh Kumar\", age: 45, gender: \"Male\", phone: \"9123456789\", address: \"78 CP, Delhi\", location: \"Delhi\" },\n        { name: \"Anita Das\", age: 28, gender: \"Female\", phone: \"9234567890\", address: \"12 Lake Road, Kolkata\", location: \"Kolkata\" },\n        { name: \"Ravi Gupta\", age: 38, gender: \"Male\", phone: \"9345678901\", address: \"67 MG Road, Bangalore\", location: \"Bangalore\" },\n        { name: \"Sunita Patel\", age: 42, gender: \"Female\", phone: \"9456789012\", address: \"34 Station Road, Pune\", location: \"Pune\" },\n        { name: \"Amit Sen\", age: 35, gender: \"Male\", phone: \"9567890123\", address: \"56 Salt Lake, Kolkata\", location: \"Kolkata\" },\n        { name: \"Neha Agarwal\", age: 29, gender: \"Female\", phone: \"9678901234\", address: \"89 Linking Road, Mumbai\", location: \"Mumbai\" }\n      ];\n\n      const createdPatients = await db.insert(patients).values(\n        await Promise.all(patientData.map(async (patientInfo) => {\n          const patientId = await this.generatePatientId(doctor.id);\n          return {\n            patientId,\n            name: patientInfo.name,\n            age: patientInfo.age,\n            gender: patientInfo.gender,\n            phone: patientInfo.phone,\n            address: patientInfo.address,\n            location: patientInfo.location,\n            doctorId: doctor.id,\n          };\n        }))\n      ).returning();\n\n      // Create sample appointments\n      const appointmentData = [];\n      if (createdPatients.length > 0) {\n        // Create appointments for the first few patients\n        for (let i = 0; i < Math.min(createdPatients.length, 5); i++) {\n          const patient = createdPatients[i];\n          const appointmentDate = new Date();\n          appointmentDate.setDate(appointmentDate.getDate() + i); // Different dates\n          appointmentDate.setHours(10 + i, 0, 0, 0); // Different times\n          \n          const appointmentId = await this.generateAppointmentId(doctor.id);\n          \n          appointmentData.push({\n            appointmentId,\n            patientId: patient.id,\n            doctorId: doctor.id,\n            dateTime: appointmentDate,\n            notes: [\n              \"Chronic headache and fatigue\",\n              \"Digestive issues and bloating\", \n              \"Joint pain and stiffness\",\n              \"Skin problems and itching\",\n              \"Anxiety and sleep disorders\"\n            ][i],\n            status: i === 0 ? \"completed\" : \"scheduled\"\n          });\n        }\n      }\n\n      const createdAppointments = await db.insert(appointments).values(appointmentData).returning();\n\n      // Create comprehensive sample prescriptions\n      if (createdPatients.length > 0 && createdMedicines.length > 0) {\n        const prescriptionData = [\n          {\n            prescriptionId: \"RSX-001\",\n            patientId: createdPatients[0].id,\n            doctorId: doctor.id,\n            appointmentId: createdAppointments.length > 0 ? createdAppointments[0].id : null,\n            symptoms: \"Chronic headache, fatigue, general weakness, stress-related symptoms\",\n            medicines: [\n              {\n                medicineId: createdMedicines[0].id, // Arnica Montana\n                dosage: \"30C\",\n                frequency: \"3 times daily\",\n                duration: \"15 days\",\n                instructions: \"Take 30 minutes before meals\"\n              },\n              {\n                medicineId: createdMedicines[1].id, // Belladonna\n                dosage: \"30C\", \n                frequency: \"2 times daily\",\n                duration: \"10 days\",\n                instructions: \"Take when headache is severe\"\n              }\n            ],\n            notes: \"Patient showing gradual improvement with constitutional treatment. Continue for 2 weeks and follow up.\",\n          },\n          {\n            prescriptionId: \"RSX-002\",\n            patientId: createdPatients[1].id,\n            doctorId: doctor.id,\n            appointmentId: createdAppointments.length > 1 ? createdAppointments[1].id : null,\n            symptoms: \"Digestive issues, bloating after meals, constipation, acid reflux\",\n            medicines: [\n              {\n                medicineId: createdMedicines[2].id, // Nux Vomica\n                dosage: \"30C\",\n                frequency: \"3 times daily\",\n                duration: \"20 days\",\n                instructions: \"Take 1 hour after meals\"\n              },\n              {\n                medicineId: createdMedicines[7].id, // Lycopodium\n                dosage: \"30C\",\n                frequency: \"2 times daily\", \n                duration: \"15 days\",\n                instructions: \"Take before breakfast and dinner\"\n              }\n            ],\n            notes: \"Lifestyle modifications recommended. Avoid spicy food. Regular meal timings essential.\",\n          },\n          {\n            prescriptionId: \"RSX-003\",\n            patientId: createdPatients[2].id,\n            doctorId: doctor.id,\n            appointmentId: createdAppointments.length > 2 ? createdAppointments[2].id : null,\n            symptoms: \"Joint pain, morning stiffness, arthritis symptoms, weather sensitivity\",\n            medicines: [\n              {\n                medicineId: createdMedicines[5].id, // Rhus Tox\n                dosage: \"30C\",\n                frequency: \"3 times daily\",\n                duration: \"25 days\",\n                instructions: \"Take during acute pain episodes\"\n              },\n              {\n                medicineId: createdMedicines[3].id, // Bryonia\n                dosage: \"200C\",\n                frequency: \"Once daily\",\n                duration: \"30 days\",\n                instructions: \"Take in the morning on empty stomach\"\n              }\n            ],\n            notes: \"Gentle exercise recommended. Hot water compress helps during pain. Avoid cold weather exposure.\",\n          }\n        ];\n\n        await db.insert(prescriptions).values(prescriptionData);\n      }\n    } catch (error) {\n      console.error('Error initializing data:', error);\n    }\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getDoctors(): Promise<User[]> {\n    // Get all doctors regardless of isActive status for admin dashboard\n    return await db.select().from(users).where(eq(users.role, \"doctor\"));\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, role));\n  }\n\n  // Patient methods\n  async getPatients(doctorId?: string): Promise<Patient[]> {\n    if (doctorId) {\n      return await db.select().from(patients).where(eq(patients.doctorId, doctorId));\n    }\n    return await db.select().from(patients);\n  }\n\n  async getPatient(id: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.id, id));\n    return patient || undefined;\n  }\n\n  async getPatientByPatientId(patientId: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.patientId, patientId));\n    return patient || undefined;\n  }\n\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    const patientId = await this.generatePatientId(insertPatient.doctorId);\n    \n    const [patient] = await db\n      .insert(patients)\n      .values({ ...insertPatient, patientId })\n      .returning();\n    return patient;\n  }\n\n  // Appointment methods\n  async getAppointments(doctorId?: string): Promise<Appointment[]> {\n    if (doctorId) {\n      return await db.select().from(appointments).where(eq(appointments.doctorId, doctorId));\n    }\n    return await db.select().from(appointments);\n  }\n\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    const [appointment] = await db.select().from(appointments).where(eq(appointments.id, id));\n    return appointment || undefined;\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    const appointmentId = await this.generateAppointmentId(insertAppointment.doctorId);\n    \n    const [appointment] = await db\n      .insert(appointments)\n      .values({ ...insertAppointment, appointmentId })\n      .returning();\n    \n    // Update patient's last visit date when appointment is completed\n    if (insertAppointment.patientId && insertAppointment.status === 'completed') {\n      await db\n        .update(patients)\n        .set({ lastVisitDate: insertAppointment.dateTime || new Date() })\n        .where(eq(patients.id, insertAppointment.patientId));\n    }\n    \n    return appointment;\n  }\n\n  async updateAppointment(id: string, updates: Partial<Appointment>): Promise<Appointment | undefined> {\n    const [appointment] = await db\n      .update(appointments)\n      .set(updates)\n      .where(eq(appointments.id, id))\n      .returning();\n    return appointment || undefined;\n  }\n\n  async deleteAppointment(id: string): Promise<boolean> {\n    try {\n      await db.delete(appointments).where(eq(appointments.id, id));\n      return true;\n    } catch (error) {\n      console.error('Delete appointment error:', error);\n      return false;\n    }\n  }\n\n  async getAppointmentsByDate(doctorId: string, date: string): Promise<Appointment[]> {\n    return await db.select().from(appointments).where(\n      and(\n        eq(appointments.doctorId, doctorId),\n        eq(appointments.dateTime, new Date(date))\n      )\n    );\n  }\n\n  // Prescription methods\n  async getPrescriptions(doctorId?: string, patientId?: string): Promise<any[]> {\n    let conditions = [];\n    if (doctorId) conditions.push(eq(prescriptions.doctorId, doctorId));\n    if (patientId) conditions.push(eq(prescriptions.patientId, patientId));\n    \n    const prescriptionList = conditions.length > 0 \n      ? await db.select().from(prescriptions).where(and(...conditions))\n      : await db.select().from(prescriptions);\n\n    // Get all medicines to create a lookup map\n    const allMedicines = await db.select().from(medicines);\n    const medicineMap = new Map(allMedicines.map(med => [med.id, med]));\n\n    // Enrich prescriptions with actual medicine names\n    return prescriptionList.map(prescription => {\n      const enrichedMedicines = prescription.medicines.map((medicine: any) => {\n        if (medicine.medicineId && medicineMap.has(medicine.medicineId)) {\n          const medicineDetails = medicineMap.get(medicine.medicineId);\n          return {\n            ...medicine,\n            name: medicineDetails.name,\n            code: medicineDetails.code,\n            description: medicineDetails.description,\n            power: medicineDetails.power\n          };\n        }\n        return medicine;\n      });\n\n      return {\n        ...prescription,\n        medicines: enrichedMedicines\n      };\n    });\n  }\n\n  async getPrescription(id: string): Promise<Prescription | undefined> {\n    const [prescription] = await db.select().from(prescriptions).where(eq(prescriptions.id, id));\n    return prescription || undefined;\n  }\n\n  async createPrescription(insertPrescription: InsertPrescription): Promise<Prescription> {\n    // Generate prescription ID\n    const existingPrescriptions = await db.select().from(prescriptions).where(eq(prescriptions.doctorId, insertPrescription.doctorId));\n    const prescriptionId = `RRX-${String(existingPrescriptions.length + 1).padStart(3, '0')}`;\n    \n    const [prescription] = await db\n      .insert(prescriptions)\n      .values({ ...insertPrescription, prescriptionId })\n      .returning();\n    \n    // Update patient's last visit date\n    if (insertPrescription.patientId) {\n      await db\n        .update(patients)\n        .set({ lastVisitDate: new Date() })\n        .where(eq(patients.id, insertPrescription.patientId));\n    }\n    \n    return prescription;\n  }\n\n  async updatePrescription(id: string, updateData: Partial<InsertPrescription>): Promise<Prescription | undefined> {\n    const [prescription] = await db\n      .update(prescriptions)\n      .set(updateData)\n      .where(eq(prescriptions.id, id))\n      .returning();\n    return prescription || undefined;\n  }\n\n  async deletePrescription(id: string): Promise<boolean> {\n    try {\n      await db.delete(prescriptions).where(eq(prescriptions.id, id));\n      return true;\n    } catch (error) {\n      console.error('Delete prescription error:', error);\n      return false;\n    }\n  }\n\n  async deletePatient(id: string, doctorId?: string): Promise<void> {\n    // Delete related prescriptions first\n    await db.delete(prescriptions).where(eq(prescriptions.patientId, id));\n    \n    // Delete related appointments\n    await db.delete(appointments).where(eq(appointments.patientId, id));\n    \n    // Delete the patient\n    await db.delete(patients).where(eq(patients.id, id));\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    try {\n      // Delete all related data first\n      const userPatients = await db.select().from(patients).where(eq(patients.doctorId, id));\n      for (const patient of userPatients) {\n        await this.deletePatient(patient.id);\n      }\n      \n      // Delete appointments\n      await db.delete(appointments).where(eq(appointments.doctorId, id));\n      \n      // Delete prescriptions\n      await db.delete(prescriptions).where(eq(prescriptions.doctorId, id));\n      \n      // Delete medicines\n      await db.delete(medicines).where(eq(medicines.doctorId, id));\n      \n      // Finally delete the user\n      const result = await db.delete(users).where(eq(users.id, id));\n      return true;\n    } catch (error) {\n      console.error('Delete user error:', error);\n      return false;\n    }\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    const userList = await db\n      .select()\n      .from(users)\n      .where(eq(users.role, role));\n    return userList;\n  }\n\n  async updatePatient(id: string, updateData: Partial<InsertPatient>): Promise<Patient | undefined> {\n    const [patient] = await db\n      .update(patients)\n      .set(updateData)\n      .where(eq(patients.id, id))\n      .returning();\n    return patient || undefined;\n  }\n\n  // Medicine methods\n  async getMedicines(doctorId?: string): Promise<Medicine[]> {\n    if (doctorId) {\n      return await db.select().from(medicines).where(eq(medicines.doctorId, doctorId));\n    }\n    return await db.select().from(medicines);\n  }\n\n  async getMedicine(id: string): Promise<Medicine | undefined> {\n    const [medicine] = await db.select().from(medicines).where(eq(medicines.id, id));\n    return medicine || undefined;\n  }\n\n  async createMedicine(insertMedicine: InsertMedicine): Promise<Medicine> {\n    const [medicine] = await db\n      .insert(medicines)\n      .values(insertMedicine)\n      .returning();\n    return medicine;\n  }\n\n  async updateMedicine(id: string, updates: Partial<Medicine>): Promise<Medicine | undefined> {\n    const [medicine] = await db\n      .update(medicines)\n      .set(updates)\n      .where(eq(medicines.id, id))\n      .returning();\n    return medicine || undefined;\n  }\n\n  async deleteMedicine(id: string): Promise<boolean> {\n    try {\n      await db.delete(medicines).where(eq(medicines.id, id));\n      return true;\n    } catch (error) {\n      console.error('Delete medicine error:', error);\n      return false;\n    }\n  }\n\n  // Template methods\n  async getPrescriptionTemplates(): Promise<PrescriptionTemplate[]> {\n    return await db.select().from(prescriptionTemplates).where(eq(prescriptionTemplates.isActive, true));\n  }\n\n  async getPrescriptionTemplate(id: string): Promise<PrescriptionTemplate | undefined> {\n    const [template] = await db.select().from(prescriptionTemplates).where(eq(prescriptionTemplates.id, id));\n    return template || undefined;\n  }\n\n  async createPrescriptionTemplate(template: InsertPrescriptionTemplate): Promise<PrescriptionTemplate> {\n    const [newTemplate] = await db\n      .insert(prescriptionTemplates)\n      .values(template)\n      .returning();\n    return newTemplate;\n  }\n\n  async updatePrescriptionTemplate(id: string, updates: Partial<PrescriptionTemplate>): Promise<PrescriptionTemplate | undefined> {\n    const [template] = await db\n      .update(prescriptionTemplates)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(prescriptionTemplates.id, id))\n      .returning();\n    return template || undefined;\n  }\n\n  async deletePrescriptionTemplate(id: string): Promise<boolean> {\n    try {\n      // First, remove all doctor assignments for this template\n      await db.delete(doctorTemplateAssignments).where(eq(doctorTemplateAssignments.templateId, id));\n      \n      // Then delete the template\n      const result = await db\n        .delete(prescriptionTemplates)\n        .where(eq(prescriptionTemplates.id, id));\n      \n      return result.rowCount > 0;\n    } catch (error) {\n      console.error('Error deleting template:', error);\n      return false;\n    }\n  }\n\n  // Template assignment methods for admin (with doctor info)\n  async getAdminTemplateAssignments(): Promise<any[]> {\n    try {\n      // Get all assignments\n      const assignments = await db.select().from(doctorTemplateAssignments);\n      \n      // Get template and doctor details for each assignment\n      const enrichedAssignments = [];\n      for (const assignment of assignments) {\n        // Get template details\n        const template = await db.select().from(prescriptionTemplates)\n          .where(eq(prescriptionTemplates.id, assignment.templateId))\n          .limit(1);\n        \n        if (template.length === 0 || !template[0].isActive) continue;\n        \n        // Get doctor details\n        const doctor = await db.select().from(users)\n          .where(eq(users.id, assignment.doctorId))\n          .limit(1);\n        \n        if (doctor.length === 0) continue;\n        \n        enrichedAssignments.push({\n          ...assignment,\n          templateName: template[0].name,\n          templateType: template[0].type,\n          doctorName: doctor[0].name,\n          doctorUsername: doctor[0].username\n        });\n      }\n      \n      return enrichedAssignments;\n    } catch (error) {\n      console.error('Error in getAdminTemplateAssignments:', error);\n      return [];\n    }\n  }\n\n  // Template assignment methods for doctors (with template content)\n  async getDoctorTemplateAssignments(doctorId: string): Promise<any[]> {\n    try {\n      const query = db\n        .select({\n          id: doctorTemplateAssignments.id,\n          doctorId: doctorTemplateAssignments.doctorId,\n          templateId: doctorTemplateAssignments.templateId,\n          isDefault: doctorTemplateAssignments.isDefault,\n          assignedBy: doctorTemplateAssignments.assignedBy,\n          assignedAt: doctorTemplateAssignments.assignedAt,\n          // Include template data\n          templateName: prescriptionTemplates.name,\n          templateContent: prescriptionTemplates.content,\n          templateType: prescriptionTemplates.type,\n          templateDescription: prescriptionTemplates.name\n        })\n        .from(doctorTemplateAssignments)\n        .innerJoin(prescriptionTemplates, eq(doctorTemplateAssignments.templateId, prescriptionTemplates.id))\n        .where(and(\n          eq(prescriptionTemplates.isActive, true),\n          eq(doctorTemplateAssignments.doctorId, doctorId)\n        ));\n      \n      return await query;\n    } catch (error) {\n      console.error('Error in getDoctorTemplateAssignments:', error);\n      return [];\n    }\n  }\n\n  async assignTemplateToDoctor(assignment: InsertDoctorTemplateAssignment): Promise<DoctorTemplateAssignment> {\n    // If this is being set as default, remove default from other templates for this doctor\n    if (assignment.isDefault) {\n      await db\n        .update(doctorTemplateAssignments)\n        .set({ isDefault: false })\n        .where(eq(doctorTemplateAssignments.doctorId, assignment.doctorId));\n    }\n\n    const [newAssignment] = await db\n      .insert(doctorTemplateAssignments)\n      .values(assignment)\n      .returning();\n    return newAssignment;\n  }\n\n  async removeTemplateFromDoctor(doctorId: string, templateId: string): Promise<boolean> {\n    const result = await db\n      .delete(doctorTemplateAssignments)\n      .where(\n        and(\n          eq(doctorTemplateAssignments.doctorId, doctorId),\n          eq(doctorTemplateAssignments.templateId, templateId)\n        )\n      );\n    \n    return result.rowCount > 0;\n  }\n\n  async setDefaultTemplate(doctorId: string, templateId: string): Promise<boolean> {\n    try {\n      // First, remove default from all other templates for this doctor\n      await db\n        .update(doctorTemplateAssignments)\n        .set({ isDefault: false })\n        .where(eq(doctorTemplateAssignments.doctorId, doctorId));\n\n      // Then set the specified template as default\n      const result = await db\n        .update(doctorTemplateAssignments)\n        .set({ isDefault: true })\n        .where(\n          and(\n            eq(doctorTemplateAssignments.doctorId, doctorId),\n            eq(doctorTemplateAssignments.templateId, templateId)\n          )\n        );\n\n      return result.rowCount > 0;\n    } catch (error) {\n      console.error('Error setting default template:', error);\n      return false;\n    }\n  }\n\n  // Doctor availability methods\n  async getDoctorAvailability(doctorId: string): Promise<DoctorAvailability[]> {\n    return await db\n      .select()\n      .from(doctorAvailability)\n      .where(eq(doctorAvailability.doctorId, doctorId))\n      .orderBy(doctorAvailability.dayOfWeek);\n  }\n\n  async upsertDoctorAvailability(availability: InsertDoctorAvailability): Promise<DoctorAvailability> {\n    // Check if availability already exists for this doctor and day\n    const existing = await db\n      .select()\n      .from(doctorAvailability)\n      .where(\n        and(\n          eq(doctorAvailability.doctorId, availability.doctorId),\n          eq(doctorAvailability.dayOfWeek, availability.dayOfWeek)\n        )\n      );\n\n    if (existing.length > 0) {\n      // Update existing availability\n      const [updated] = await db\n        .update(doctorAvailability)\n        .set({\n          ...availability,\n          updatedAt: new Date(),\n        })\n        .where(\n          and(\n            eq(doctorAvailability.doctorId, availability.doctorId),\n            eq(doctorAvailability.dayOfWeek, availability.dayOfWeek)\n          )\n        )\n        .returning();\n      return updated;\n    } else {\n      // Create new availability\n      const [created] = await db\n        .insert(doctorAvailability)\n        .values(availability)\n        .returning();\n      return created;\n    }\n  }\n\n  async deleteDoctorAvailability(doctorId: string, dayOfWeek: number): Promise<boolean> {\n    const result = await db\n      .delete(doctorAvailability)\n      .where(\n        and(\n          eq(doctorAvailability.doctorId, doctorId),\n          eq(doctorAvailability.dayOfWeek, dayOfWeek)\n        )\n      );\n    \n    return result.rowCount > 0;\n  }\n\n  // WhatsApp methods\n  async getUserByWhatsApp(whatsappPhone: string): Promise<User | undefined> {\n    try {\n      const [user] = await db\n        .select()\n        .from(users)\n        .where(eq(users.whatsappPhone, whatsappPhone));\n      return user || undefined;\n    } catch (error) {\n      console.error('Get user by WhatsApp error:', error);\n      return undefined;\n    }\n  }\n\n  async findNextAvailableSlot(doctorId: string): Promise<Date | null> {\n    try {\n      const availability = await this.getDoctorAvailability(doctorId);\n      if (!availability.length) return null;\n\n      const today = new Date();\n      const maxDays = 7; // Look ahead 7 days\n\n      for (let dayOffset = 0; dayOffset < maxDays; dayOffset++) {\n        const checkDate = new Date(today);\n        checkDate.setDate(today.getDate() + dayOffset);\n        const dayOfWeek = checkDate.getDay();\n\n        const dayAvailability = availability.find(a => a.dayOfWeek === dayOfWeek && a.isAvailable);\n        if (!dayAvailability) continue;\n\n        // Simple slot finding: return first available hour of the day\n        const slotTime = new Date(checkDate);\n        const startHour = parseInt(dayAvailability.startTime.split(':')[0]);\n        slotTime.setHours(startHour, 0, 0, 0);\n\n        // Check if this slot is already booked\n        const existingAppointments = await this.getAppointmentsByDate(doctorId, checkDate.toISOString().split('T')[0]);\n        const isSlotTaken = existingAppointments.some(apt => {\n          const aptTime = new Date(apt.dateTime);\n          return aptTime.getHours() === slotTime.getHours();\n        });\n\n        if (!isSlotTaken && slotTime > new Date()) {\n          return slotTime;\n        }\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Find next available slot error:', error);\n      return null;\n    }\n  }\n\n  async getPatientByPhoneAndDoctor(phone: string, doctorId: string): Promise<Patient | undefined> {\n    try {\n      const [patient] = await db\n        .select()\n        .from(patients)\n        .where(and(\n          eq(patients.phone, phone),\n          eq(patients.doctorId, doctorId)\n        ));\n      return patient || undefined;\n    } catch (error) {\n      console.error('Get patient by phone and doctor error:', error);\n      return undefined;\n    }\n  }\n\n  // WhatsApp session methods\n  async getWhatsappSession(patientPhone: string, doctorId: string): Promise<WhatsappSession | undefined> {\n    try {\n      const [session] = await db\n        .select()\n        .from(whatsappSessions)\n        .where(and(\n          eq(whatsappSessions.patientPhone, patientPhone),\n          eq(whatsappSessions.doctorId, doctorId)\n        ));\n      return session || undefined;\n    } catch (error) {\n      console.error('Get WhatsApp session error:', error);\n      return undefined;\n    }\n  }\n\n  async createWhatsappSession(session: InsertWhatsappSession): Promise<WhatsappSession> {\n    try {\n      const [newSession] = await db\n        .insert(whatsappSessions)\n        .values(session)\n        .returning();\n      return newSession;\n    } catch (error) {\n      console.error('Create WhatsApp session error:', error);\n      throw error;\n    }\n  }\n\n  async updateWhatsappSession(id: string, updates: Partial<WhatsappSession>): Promise<WhatsappSession | undefined> {\n    try {\n      const [updatedSession] = await db\n        .update(whatsappSessions)\n        .set({ ...updates, lastMessageAt: new Date() })\n        .where(eq(whatsappSessions.id, id))\n        .returning();\n      return updatedSession || undefined;\n    } catch (error) {\n      console.error('Update WhatsApp session error:', error);\n      return undefined;\n    }\n  }\n\n  async deleteExpiredWhatsappSessions(): Promise<void> {\n    try {\n      await db\n        .delete(whatsappSessions)\n        .where(sql`expires_at < NOW()`);\n    } catch (error) {\n      console.error('Delete expired WhatsApp sessions error:', error);\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":41008},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"patient\"), // admin, doctor, patient\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  clinicName: text(\"clinic_name\"),\n  clinicNameBengali: text(\"clinic_name_bengali\"),\n  clinicLocation: text(\"clinic_location\"),\n  clinicLocationBengali: text(\"clinic_location_bengali\"),\n  degree: text(\"degree\"),\n  degreeBengali: text(\"degree_bengali\"),\n  specialist: text(\"specialist\"),\n  specialistBengali: text(\"specialist_bengali\"),\n  extraNotes: text(\"extra_notes\"),\n  extraNotesBengali: text(\"extra_notes_bengali\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  canDeletePatients: boolean(\"can_delete_patients\").notNull().default(false),\n  aiFeatureEnabled: boolean(\"ai_feature_enabled\").notNull().default(true),\n  whatsappPhone: text(\"whatsapp_phone\"),\n  whatsappEnabled: boolean(\"whatsapp_enabled\").notNull().default(false),\n  globalLowStockThreshold: integer(\"global_low_stock_threshold\").notNull().default(10),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const patients = pgTable(\"patients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: text(\"patient_id\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  age: integer(\"age\").notNull(),\n  gender: text(\"gender\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\"),\n  location: text(\"location\"),\n  lastVisitDate: timestamp(\"last_visit_date\"),\n  doctorId: varchar(\"doctor_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appointmentId: text(\"appointment_id\").notNull().unique(),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  doctorId: varchar(\"doctor_id\").references(() => users.id).notNull(),\n  dateTime: timestamp(\"date_time\").notNull(),\n  type: text(\"type\").notNull().default(\"consultation\"), // consultation, follow-up, emergency\n  status: text(\"status\").notNull().default(\"upcoming\"), // upcoming, completed, cancelled\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const prescriptions = pgTable(\"prescriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  prescriptionId: text(\"prescription_id\").notNull().unique(),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  doctorId: varchar(\"doctor_id\").references(() => users.id).notNull(),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id),\n  symptoms: text(\"symptoms\").notNull(),\n  medicines: jsonb(\"medicines\").notNull(), // Array of medicine objects\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const whatsappSessions = pgTable(\"whatsapp_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientPhone: text(\"patient_phone\").notNull(),\n  doctorId: varchar(\"doctor_id\").references(() => users.id).notNull(),\n  step: text(\"step\").notNull().default(\"initial\"), // initial, awaiting_name, awaiting_age, awaiting_gender, awaiting_location, completed\n  sessionData: jsonb(\"session_data\"), // Store collected data: {name, age, gender, location}\n  lastMessageAt: timestamp(\"last_message_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const medicines = pgTable(\"medicines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  code: text(\"code\").notNull(),\n  company: text(\"company\"), // Medicine company/manufacturer name\n  description: text(\"description\"),\n  power: text(\"power\"), // e.g., \"30\", \"200\", \"1M\"\n  dosage: text(\"dosage\"), // e.g., \"3 times daily\", \"2 drops\"\n  symptoms: text(\"symptoms\"),\n  currentStock: integer(\"current_stock\").default(0),\n  lowStockThreshold: integer(\"low_stock_threshold\").default(10),\n  doctorId: varchar(\"doctor_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const doctorAvailability = pgTable(\"doctor_availability\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  doctorId: varchar(\"doctor_id\").references(() => users.id).notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 0-6 (Sunday to Saturday)\n  isAvailable: boolean(\"is_available\").notNull().default(true),\n  startTime: text(\"start_time\").notNull().default(\"09:00\"), // HH:MM format\n  endTime: text(\"end_time\").notNull().default(\"19:00\"), // HH:MM format\n  lunchBreakStart: text(\"lunch_break_start\").default(\"13:00\"),\n  lunchBreakEnd: text(\"lunch_break_end\").default(\"14:00\"),\n  slotDuration: integer(\"slot_duration\").notNull().default(20), // minutes\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  patients: many(patients),\n  appointments: many(appointments),\n  prescriptions: many(prescriptions),\n  medicines: many(medicines),\n  availability: many(doctorAvailability),\n  whatsappSessions: many(whatsappSessions),\n}));\n\nexport const patientsRelations = relations(patients, ({ one, many }) => ({\n  doctor: one(users, { fields: [patients.doctorId], references: [users.id] }),\n  appointments: many(appointments),\n  prescriptions: many(prescriptions),\n}));\n\nexport const appointmentsRelations = relations(appointments, ({ one, many }) => ({\n  patient: one(patients, { fields: [appointments.patientId], references: [patients.id] }),\n  doctor: one(users, { fields: [appointments.doctorId], references: [users.id] }),\n  prescriptions: many(prescriptions),\n}));\n\nexport const prescriptionsRelations = relations(prescriptions, ({ one }) => ({\n  patient: one(patients, { fields: [prescriptions.patientId], references: [patients.id] }),\n  doctor: one(users, { fields: [prescriptions.doctorId], references: [users.id] }),\n  appointment: one(appointments, { fields: [prescriptions.appointmentId], references: [appointments.id] }),\n}));\n\nexport const medicinesRelations = relations(medicines, ({ one }) => ({\n  doctor: one(users, { fields: [medicines.doctorId], references: [users.id] }),\n}));\n\nexport const doctorAvailabilityRelations = relations(doctorAvailability, ({ one }) => ({\n  doctor: one(users, { fields: [doctorAvailability.doctorId], references: [users.id] }),\n}));\n\nexport const whatsappSessionsRelations = relations(whatsappSessions, ({ one }) => ({\n  doctor: one(users, { fields: [whatsappSessions.doctorId], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  patientId: true,\n  createdAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  appointmentId: true,\n  createdAt: true,\n});\n\nexport const insertPrescriptionSchema = createInsertSchema(prescriptions).omit({\n  id: true,\n  prescriptionId: true,\n  createdAt: true,\n});\n\nexport const insertMedicineSchema = createInsertSchema(medicines).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDoctorAvailabilitySchema = createInsertSchema(doctorAvailability).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWhatsappSessionSchema = createInsertSchema(whatsappSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Prescription = typeof prescriptions.$inferSelect;\nexport type InsertPrescription = z.infer<typeof insertPrescriptionSchema>;\nexport type Medicine = typeof medicines.$inferSelect;\nexport type InsertMedicine = z.infer<typeof insertMedicineSchema>;\nexport type DoctorAvailability = typeof doctorAvailability.$inferSelect;\nexport type InsertDoctorAvailability = z.infer<typeof insertDoctorAvailabilitySchema>;\nexport type WhatsappSession = typeof whatsappSessions.$inferSelect;\nexport type InsertWhatsappSession = z.infer<typeof insertWhatsappSessionSchema>;\n\n// Push Subscriptions table\nexport const pushSubscriptions = pgTable(\"push_subscriptions\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  endpoint: text(\"endpoint\").notNull().unique(),\n  p256dh: text(\"p256dh\").notNull(),\n  auth: text(\"auth\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Notification Settings table\nexport const notificationSettings = pgTable(\"notification_settings\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").notNull().unique().references(() => users.id, { onDelete: \"cascade\" }),\n  appointmentReminders: boolean(\"appointment_reminders\").default(true),\n  reminderTime: integer(\"reminder_time\").default(30), // minutes before appointment\n  dailyReminders: boolean(\"daily_reminders\").default(false),\n  weeklyReports: boolean(\"weekly_reports\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const pushSubscriptionsRelations = relations(pushSubscriptions, ({ one }) => ({\n  user: one(users, {\n    fields: [pushSubscriptions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const notificationSettingsRelations = relations(notificationSettings, ({ one }) => ({\n  user: one(users, {\n    fields: [notificationSettings.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas for notifications\nexport const insertPushSubscriptionSchema = createInsertSchema(pushSubscriptions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSettingsSchema = createInsertSchema(notificationSettings).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Prescription Templates table\nexport const prescriptionTemplates = pgTable(\"prescription_templates\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // 'html', 'upload'\n  content: text(\"content\"), // HTML template content for custom templates\n  fileUrl: text(\"file_url\"), // URL for uploaded PDF/DOC files\n  fileName: text(\"file_name\"), // Original filename\n  fileType: text(\"file_type\"), // MIME type of uploaded file\n  fileSize: integer(\"file_size\"), // File size in bytes\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdBy: text(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Doctor Template Assignments table\nexport const doctorTemplateAssignments = pgTable(\"doctor_template_assignments\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  doctorId: text(\"doctor_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  templateId: text(\"template_id\").notNull().references(() => prescriptionTemplates.id, { onDelete: \"cascade\" }),\n  isDefault: boolean(\"is_default\").notNull().default(false),\n  assignedBy: text(\"assigned_by\").notNull().references(() => users.id),\n  assignedAt: timestamp(\"assigned_at\").defaultNow(),\n});\n\n// Template Relations\nexport const prescriptionTemplatesRelations = relations(prescriptionTemplates, ({ one, many }) => ({\n  createdBy: one(users, { fields: [prescriptionTemplates.createdBy], references: [users.id] }),\n  assignments: many(doctorTemplateAssignments),\n}));\n\nexport const doctorTemplateAssignmentsRelations = relations(doctorTemplateAssignments, ({ one }) => ({\n  doctor: one(users, { fields: [doctorTemplateAssignments.doctorId], references: [users.id] }),\n  template: one(prescriptionTemplates, { fields: [doctorTemplateAssignments.templateId], references: [prescriptionTemplates.id] }),\n  assignedBy: one(users, { fields: [doctorTemplateAssignments.assignedBy], references: [users.id] }),\n}));\n\n// Insert schemas for templates\nexport const insertPrescriptionTemplateSchema = createInsertSchema(prescriptionTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDoctorTemplateAssignmentSchema = createInsertSchema(doctorTemplateAssignments).omit({\n  id: true,\n  assignedAt: true,\n});\n\n// Types for templates\nexport type PrescriptionTemplate = typeof prescriptionTemplates.$inferSelect;\nexport type InsertPrescriptionTemplate = z.infer<typeof insertPrescriptionTemplateSchema>;\nexport type DoctorTemplateAssignment = typeof doctorTemplateAssignments.$inferSelect;\nexport type InsertDoctorTemplateAssignment = z.infer<typeof insertDoctorTemplateAssignmentSchema>;\n\n// Types for notifications\nexport type PushSubscription = typeof pushSubscriptions.$inferSelect;\nexport type InsertPushSubscription = z.infer<typeof insertPushSubscriptionSchema>;\nexport type NotificationSettings = typeof notificationSettings.$inferSelect;\nexport type InsertNotificationSettings = z.infer<typeof insertNotificationSettingsSchema>;\n","size_bytes":13650},"client/public/sw.js":{"content":"// Service Worker for Push Notifications\nconst CACHE_NAME = 'homeo-health-v1';\nconst urlsToCache = [\n  '/',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/manifest.json'\n];\n\n// Install Service Worker\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => cache.addAll(urlsToCache))\n  );\n});\n\n// Fetch Event\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      }\n    )\n  );\n});\n\n// Push Event - Handle incoming push notifications\nself.addEventListener('push', (event) => {\n  console.log('Push notification received:', event);\n  \n  let data = {};\n  if (event.data) {\n    data = event.data.json();\n  }\n\n  const options = {\n    title: data.title || 'My Homeo Health',\n    body: data.body || 'You have a new notification',\n    icon: '/icon-192x192.png',\n    badge: '/icon-72x72.png',\n    data: data.data || {},\n    actions: [\n      {\n        action: 'view',\n        title: 'View Details',\n        icon: '/icon-32x32.png'\n      },\n      {\n        action: 'dismiss',\n        title: 'Dismiss',\n        icon: '/icon-32x32.png'\n      }\n    ],\n    requireInteraction: true,\n    vibrate: [200, 100, 200]\n  };\n\n  event.waitUntil(\n    self.registration.showNotification(options.title, options)\n  );\n});\n\n// Notification Click Event\nself.addEventListener('notificationclick', (event) => {\n  console.log('Notification clicked:', event);\n  \n  event.notification.close();\n\n  if (event.action === 'view') {\n    // Open the app and navigate to appointments\n    event.waitUntil(\n      clients.openWindow('/appointments')\n    );\n  } else if (event.action === 'dismiss') {\n    // Just close the notification\n    return;\n  } else {\n    // Default action - open the app\n    event.waitUntil(\n      clients.openWindow('/')\n    );\n  }\n});\n\n// Background Sync for offline functionality\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'appointment-reminder') {\n    event.waitUntil(\n      // Handle background sync for appointment reminders\n      syncAppointmentReminders()\n    );\n  }\n});\n\nasync function syncAppointmentReminders() {\n  try {\n    // This would sync with the server when back online\n    console.log('Syncing appointment reminders...');\n  } catch (error) {\n    console.error('Failed to sync appointment reminders:', error);\n  }\n}","size_bytes":2473},"client/src/App-backup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\n// import { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { authApi, type AuthUser } from \"@/lib/auth\";\nimport { Plus } from \"lucide-react\";\n\n// Components\nimport MobileHeader from \"@/components/mobile/MobileHeader\";\nimport NavigationDrawer from \"@/components/mobile/NavigationDrawer\";\nimport BottomNavigation from \"@/components/mobile/BottomNavigation\";\nimport QuickActionsModal from \"@/components/mobile/QuickActionsModal\";\nimport LoadingOverlay from \"@/components/mobile/LoadingOverlay\";\nimport { DesktopHeader } from \"@/components/layout/DesktopHeader\";\n\n// Pages\nimport LoginPage from \"@/pages/LoginPage\";\nimport DashboardPage from \"@/pages/DashboardPage\";\nimport { DashboardPageDesktop } from \"@/pages/DashboardPageDesktop\";\nimport CalendarPage from \"@/pages/CalendarPage\";\nimport PatientsPage from \"@/pages/PatientsPage\";\nimport PatientDetailPage from \"@/pages/PatientDetailPage\";\nimport AppointmentsPage from \"@/pages/AppointmentsPage\";\nimport PrescriptionsPage from \"@/pages/PrescriptionsPage\";\nimport MedicinesPage from \"@/pages/MedicinesPage\";\nimport AdminPage from \"@/pages/AdminPage\";\nimport { NotificationsPage } from \"@/pages/NotificationsPage\";\nimport NotFound from \"@/pages/not-found\";\n\n// Hooks\nimport { usePWA, useNetworkStatus, useHapticFeedback } from \"@/hooks/use-pwa\";\nimport { usePullToRefresh } from \"@/hooks/use-swipe\";\nimport { useScreenSize } from \"@/hooks/use-screen-size\";\n\nfunction AppContent() {\n  const [location, setLocation] = useLocation();\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [showQuickActions, setShowQuickActions] = useState(false);\n  const [currentPage, setCurrentPage] = useState(\"dashboard\");\n  \n  const { isInstallable, installApp } = usePWA();\n  const isOnline = useNetworkStatus();\n  const { lightTap } = useHapticFeedback();\n  const { isMobileOrTablet, isDesktop } = useScreenSize();\n\n  // Authentication state\n  const { data: user, isLoading: isLoadingAuth, error: authError } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => authApi.getCurrentUser(),\n    retry: false,\n    staleTime: 0, // Always check auth state\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n    gcTime: 0, // Don't cache auth state (updated property name for v5)\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => authApi.logout(),\n    onSuccess: () => {\n      // Clear all cached data\n      queryClient.clear();\n      // Force re-authentication check\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      // Navigate to login page\n      setLocation(\"/login\");\n    },\n    onError: (error) => {\n      // Even if logout request fails, clear local state\n      queryClient.clear();\n      setLocation(\"/login\");\n    },\n  });\n\n  // Pull to refresh\n  const refreshData = () => {\n    queryClient.invalidateQueries();\n  };\n\n  const pullToRefreshHandlers = usePullToRefresh(refreshData);\n\n  // Update current page based on location\n  useEffect(() => {\n    const path = location.substring(1) || \"dashboard\";\n    setCurrentPage(path.split('/')[0]);\n  }, [location]);\n\n  // Handle navigation\n  const handleNavigate = (page: string) => {\n    lightTap();\n    setLocation(`/${page}`);\n    setCurrentPage(page);\n  };\n\n  const handleLogout = () => {\n    lightTap();\n    logoutMutation.mutate();\n  };\n\n  const handleQuickAction = (action: string) => {\n    lightTap();\n    switch (action) {\n      case 'add-patient':\n        handleNavigate('patients');\n        break;\n      case 'book-appointment':\n        handleNavigate('calendar');\n        break;\n      case 'create-prescription':\n        handleNavigate('prescriptions');\n        break;\n      case 'add-medicine':\n        handleNavigate('medicines');\n        break;\n    }\n  };\n\n  // Debug authentication state\n  // console.log(\"Auth state:\", { user, isLoadingAuth, authError, location });\n\n  // Show loading while checking authentication\n  if (isLoadingAuth) {\n    return <LoadingOverlay isVisible={true} message=\"Loading...\" />;\n  }\n\n  // Show login page if not authenticated\n  if (!user) {\n    return <LoginPage />;\n  }\n\n  // Protected routes based on user role\n  const isAdmin = user.role === 'admin';\n  const isDoctor = user.role === 'doctor';\n\n  // Desktop Layout\n  if (isDesktop) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Desktop Header */}\n        <DesktopHeader\n          user={user}\n          currentPage={currentPage}\n          onNavigate={handleNavigate}\n          onLogout={handleLogout}\n        />\n\n        {/* Main Content */}\n        <main className=\"min-h-screen\">\n          <Switch>\n            <Route path=\"/dashboard\">\n              <DashboardPageDesktop user={user} onNavigate={handleNavigate} />\n            </Route>\n            \n            {isDoctor && (\n              <Route path=\"/calendar\">\n                <CalendarPage user={user} />\n              </Route>\n            )}\n            \n            {(isAdmin || isDoctor) && (\n              <>\n                <Route path=\"/patients\">\n                  <PatientsPage user={user} onNavigate={handleNavigate} />\n                </Route>\n                <Route path=\"/patients/:id\">\n                  <PatientDetailPage />\n                </Route>\n                <Route path=\"/appointments\">\n                  <AppointmentsPage user={user} onNavigate={handleNavigate} />\n                </Route>\n                <Route path=\"/prescriptions\">\n                  <PrescriptionsPage user={user} onNavigate={handleNavigate} />\n                </Route>\n                <Route path=\"/medicines\">\n                  <MedicinesPage user={user} onNavigate={handleNavigate} />\n                </Route>\n              </>\n            )}\n            \n            {isAdmin && (\n              <Route path=\"/admin\">\n                <AdminPage user={user} onNavigate={handleNavigate} />\n              </Route>\n            )}\n            \n            <Route path=\"/notifications\">\n              <NotificationsPage />\n            </Route>\n            \n            {/* Default route */}\n            <Route path=\"/\">\n              <DashboardPageDesktop user={user} onNavigate={handleNavigate} />\n            </Route>\n            \n            {/* 404 */}\n            <Route>\n              <NotFound />\n            </Route>\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n\n  // Mobile Layout\n  return (\n    <div className=\"min-h-screen bg-neutral-50\"\n         onTouchStart={pullToRefreshHandlers.onTouchStart as any}\n         onTouchMove={pullToRefreshHandlers.onTouchMove as any}\n         onTouchEnd={pullToRefreshHandlers.onTouchEnd as any}>\n      {/* PWA Install Banner */}\n      {isInstallable && (\n        <div className=\"pwa-install-banner text-white p-3 text-center\">\n          <div className=\"flex items-center justify-between max-w-md mx-auto\">\n            <span className=\"text-sm\">Install My Homeo Health for better experience</span>\n            <button\n              onClick={installApp}\n              className=\"bg-white bg-opacity-20 px-3 py-1 rounded-full text-xs font-medium\"\n            >\n              Install\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Offline Indicator */}\n      {!isOnline && (\n        <div className=\"bg-orange-500 text-white p-2 text-center text-sm\">\n          You're offline. Some features may not be available.\n        </div>\n      )}\n\n      {/* Mobile Header */}\n      <MobileHeader\n        user={user}\n        onMenuClick={() => setIsDrawerOpen(true)}\n        notificationCount={0}\n      />\n\n      {/* Navigation Drawer */}\n      <NavigationDrawer\n        isOpen={isDrawerOpen}\n        onClose={() => setIsDrawerOpen(false)}\n        user={user}\n        currentPage={currentPage}\n        onNavigate={handleNavigate}\n        onLogout={handleLogout}\n      />\n\n      {/* Main Content */}\n      <main className=\"pb-20\">\n        <Switch>\n          <Route path=\"/dashboard\">\n            <DashboardPage user={user} onNavigate={handleNavigate} />\n          </Route>\n          \n          {isDoctor && (\n            <Route path=\"/calendar\">\n              <CalendarPage user={user} />\n            </Route>\n          )}\n          \n          {(isAdmin || isDoctor) && (\n            <>\n              <Route path=\"/patients\">\n                <PatientsPage user={user} onNavigate={handleNavigate} />\n              </Route>\n              <Route path=\"/patients/:id\">\n                <PatientDetailPage />\n              </Route>\n              <Route path=\"/appointments\">\n                <AppointmentsPage user={user} onNavigate={handleNavigate} />\n              </Route>\n              <Route path=\"/prescriptions\">\n                <PrescriptionsPage user={user} onNavigate={handleNavigate} />\n              </Route>\n              <Route path=\"/medicines\">\n                <MedicinesPage user={user} onNavigate={handleNavigate} />\n              </Route>\n            </>\n          )}\n          \n          {isAdmin && (\n            <Route path=\"/admin\">\n              <AdminPage user={user} onNavigate={handleNavigate} />\n            </Route>\n          )}\n          \n          <Route path=\"/notifications\">\n            <NotificationsPage />\n          </Route>\n          \n          {/* Default route */}\n          <Route path=\"/\">\n            <DashboardPage user={user} onNavigate={handleNavigate} />\n          </Route>\n          \n          {/* 404 */}\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </main>\n\n      {/* Bottom Navigation */}\n      <BottomNavigation\n        currentPage={currentPage}\n        onNavigate={handleNavigate}\n        userRole={user.role}\n      />\n\n      {/* Floating Action Button */}\n      {(isAdmin || isDoctor) && (\n        <button\n          className=\"mobile-fab bg-primary text-white fab\"\n          onClick={() => setShowQuickActions(true)}\n        >\n          <Plus className=\"h-6 w-6\" />\n        </button>\n      )}\n\n      {/* Quick Actions Modal */}\n      <QuickActionsModal\n        isOpen={showQuickActions}\n        onClose={() => setShowQuickActions(false)}\n        onAction={handleQuickAction}\n        userRole={user.role}\n      />\n\n      {/* Loading Overlay for mutations */}\n      <LoadingOverlay \n        isVisible={logoutMutation.isPending} \n        message=\"Signing out...\" \n      />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppContent />\n      <Toaster />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":10776},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\n// import { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { authApi, type AuthUser } from \"@/lib/auth\";\nimport { Plus } from \"lucide-react\";\n\n// Components\nimport MobileHeader from \"@/components/mobile/MobileHeader\";\nimport NavigationDrawer from \"@/components/mobile/NavigationDrawer\";\nimport BottomNavigation from \"@/components/mobile/BottomNavigation\";\nimport QuickActionsModal from \"@/components/mobile/QuickActionsModal\";\nimport LoadingOverlay from \"@/components/mobile/LoadingOverlay\";\nimport { DesktopHeader } from \"@/components/layout/DesktopHeader\";\n\n// Pages\nimport LoginPage from \"@/pages/LoginPage\";\nimport DashboardPage from \"@/pages/DashboardPage\";\nimport { DashboardPageDesktop } from \"@/pages/DashboardPageDesktop\";\nimport CalendarPage from \"@/pages/CalendarPage\";\nimport PatientsPage from \"@/pages/PatientsPage\";\nimport PatientDetailPage from \"@/pages/PatientDetailPage\";\nimport AppointmentsPage from \"@/pages/AppointmentsPage\";\nimport PrescriptionsPage from \"@/pages/PrescriptionsPage\";\nimport MedicinesPage from \"@/pages/MedicinesPage\";\nimport AdminPage from \"@/pages/AdminPage\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport AdminSettingsPage from \"@/pages/AdminSettingsPage\";\nimport DoctorSettingsPage from \"@/pages/DoctorSettingsPage\";\nimport { NotificationsPage } from \"@/pages/NotificationsPage\";\nimport NotFound from \"@/pages/not-found\";\n\n// Hooks\nimport { usePWA, useNetworkStatus, useHapticFeedback } from \"@/hooks/use-pwa\";\nimport { usePullToRefresh } from \"@/hooks/use-swipe\";\nimport { useScreenSize } from \"@/hooks/use-screen-size\";\n\nfunction AppContent() {\n  const [location, setLocation] = useLocation();\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [showQuickActions, setShowQuickActions] = useState(false);\n  const [currentPage, setCurrentPage] = useState(\"dashboard\");\n  \n  const { isInstallable, installApp } = usePWA();\n  const isOnline = useNetworkStatus();\n  const { lightTap } = useHapticFeedback();\n  const { isMobileOrTablet, isDesktop } = useScreenSize();\n\n  // Authentication state\n  const { data: user, isLoading: isLoadingAuth, error: authError } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => authApi.getCurrentUser(),\n    retry: false,\n    staleTime: 0, // Always check auth state\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n    gcTime: 0, // Don't cache auth state (updated property name for v5)\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => authApi.logout(),\n    onSuccess: () => {\n      // Clear all cached data\n      queryClient.clear();\n      // Force re-authentication check\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      // Navigate to login page\n      setLocation(\"/login\");\n    },\n    onError: (error) => {\n      // Even if logout request fails, clear local state\n      queryClient.clear();\n      setLocation(\"/login\");\n    },\n  });\n\n  // Pull to refresh\n  const refreshData = () => {\n    queryClient.invalidateQueries();\n  };\n\n  const pullToRefreshHandlers = usePullToRefresh(refreshData);\n\n  // Update current page based on location\n  useEffect(() => {\n    const path = location.substring(1) || \"dashboard\";\n    setCurrentPage(path.split('/')[0]);\n  }, [location]);\n\n  // Handle navigation\n  const handleNavigate = (page: string) => {\n    lightTap();\n    setLocation(`/${page}`);\n    setCurrentPage(page);\n  };\n\n  const handleLogout = () => {\n    lightTap();\n    logoutMutation.mutate();\n  };\n\n  const handleQuickAction = (action: string) => {\n    lightTap();\n    switch (action) {\n      case 'add-patient':\n        handleNavigate('patients');\n        break;\n      case 'book-appointment':\n        handleNavigate('calendar');\n        break;\n      case 'create-prescription':\n        handleNavigate('prescriptions');\n        break;\n      case 'add-medicine':\n        handleNavigate('medicines');\n        break;\n    }\n  };\n\n  // Debug authentication state\n  // console.log(\"Auth state:\", { user, isLoadingAuth, authError, location });\n\n  // Show loading while checking authentication\n  if (isLoadingAuth) {\n    return <LoadingOverlay isVisible={true} message=\"Loading...\" />;\n  }\n\n  // Show login page if not authenticated\n  if (!user) {\n    return <LoginPage />;\n  }\n\n  // Protected routes based on user role\n  const isAdmin = user.role === 'admin';\n  const isDoctor = user.role === 'doctor';\n\n  // Desktop Layout\n  if (isDesktop) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Desktop Header */}\n        <DesktopHeader\n          user={user}\n          currentPage={currentPage}\n          onNavigate={handleNavigate}\n          onLogout={handleLogout}\n        />\n\n        {/* Main Content */}\n        <main className=\"min-h-screen\">\n          <Switch>\n            <Route path=\"/dashboard\">\n              {isAdmin ? (\n                <AdminDashboard />\n              ) : (\n                <DashboardPageDesktop user={user} onNavigate={handleNavigate} />\n              )}\n            </Route>\n            \n            {isDoctor && (\n              <Route path=\"/calendar\">\n                <CalendarPage user={user} />\n              </Route>\n            )}\n            \n            {(isAdmin || isDoctor) && (\n              <>\n                <Route path=\"/patients\">\n                  <PatientsPage user={user} onNavigate={handleNavigate} />\n                </Route>\n                <Route path=\"/patients/:id\">\n                  <PatientDetailPage />\n                </Route>\n                <Route path=\"/appointments\">\n                  <AppointmentsPage user={user} onNavigate={handleNavigate} />\n                </Route>\n                <Route path=\"/prescriptions\">\n                  <PrescriptionsPage user={user} onNavigate={handleNavigate} />\n                </Route>\n                <Route path=\"/medicines\">\n                  <MedicinesPage user={user} onNavigate={handleNavigate} />\n                </Route>\n              </>\n            )}\n            \n            {isDoctor && (\n              <Route path=\"/doctor/settings\">\n                <DoctorSettingsPage user={user} onNavigate={handleNavigate} />\n              </Route>\n            )}\n            \n            {isAdmin && (\n              <>\n                <Route path=\"/admin\">\n                  <AdminDashboard />\n                </Route>\n                <Route path=\"/admin/settings\">\n                  <AdminSettingsPage user={user} onNavigate={handleNavigate} />\n                </Route>\n              </>\n            )}\n            \n            <Route path=\"/notifications\">\n              <NotificationsPage />\n            </Route>\n            \n            {/* Default route */}\n            <Route path=\"/\">\n              {isAdmin ? (\n                <AdminDashboard />\n              ) : (\n                <DashboardPageDesktop user={user} onNavigate={handleNavigate} />\n              )}\n            </Route>\n            \n            {/* 404 */}\n            <Route>\n              <NotFound />\n            </Route>\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n\n  // Mobile Layout\n  return (\n    <div className=\"min-h-screen bg-neutral-50\"\n         onTouchStart={pullToRefreshHandlers.onTouchStart as any}\n         onTouchMove={pullToRefreshHandlers.onTouchMove as any}\n         onTouchEnd={pullToRefreshHandlers.onTouchEnd as any}>\n      {/* PWA Install Banner */}\n      {isInstallable && (\n        <div className=\"pwa-install-banner text-white p-3 text-center\">\n          <div className=\"flex items-center justify-between max-w-md mx-auto\">\n            <span className=\"text-sm\">Install My Homeo Health for better experience</span>\n            <button\n              onClick={installApp}\n              className=\"bg-white bg-opacity-20 px-3 py-1 rounded-full text-xs font-medium\"\n            >\n              Install\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Offline Indicator */}\n      {!isOnline && (\n        <div className=\"bg-orange-500 text-white p-2 text-center text-sm\">\n          You're offline. Some features may not be available.\n        </div>\n      )}\n\n      {/* Mobile Header */}\n      <MobileHeader\n        user={user}\n        onMenuClick={() => setIsDrawerOpen(true)}\n        onLogout={handleLogout}\n        onNavigate={handleNavigate}\n        notificationCount={0}\n      />\n\n      {/* Navigation Drawer */}\n      <NavigationDrawer\n        isOpen={isDrawerOpen}\n        onClose={() => setIsDrawerOpen(false)}\n        user={user}\n        currentPage={currentPage}\n        onNavigate={handleNavigate}\n        onLogout={handleLogout}\n      />\n\n      {/* Main Content */}\n      <main className=\"pb-20\">\n        <Switch>\n          <Route path=\"/dashboard\">\n            {isAdmin ? (\n              <AdminDashboard />\n            ) : (\n              <DashboardPage user={user} onNavigate={handleNavigate} />\n            )}\n          </Route>\n          \n          {isDoctor && (\n            <Route path=\"/calendar\">\n              <CalendarPage user={user} />\n            </Route>\n          )}\n          \n          {(isAdmin || isDoctor) && (\n            <>\n              <Route path=\"/patients\">\n                <PatientsPage user={user} onNavigate={handleNavigate} />\n              </Route>\n              <Route path=\"/patients/:id\">\n                <PatientDetailPage />\n              </Route>\n              <Route path=\"/appointments\">\n                <AppointmentsPage user={user} onNavigate={handleNavigate} />\n              </Route>\n              <Route path=\"/prescriptions\">\n                <PrescriptionsPage user={user} onNavigate={handleNavigate} />\n              </Route>\n              <Route path=\"/medicines\">\n                <MedicinesPage user={user} onNavigate={handleNavigate} />\n              </Route>\n            </>\n          )}\n          \n          {isDoctor && (\n            <Route path=\"/doctor/settings\">\n              <DoctorSettingsPage user={user} onNavigate={handleNavigate} />\n            </Route>\n          )}\n          \n          {isAdmin && (\n            <>\n              <Route path=\"/admin\">\n                <AdminDashboard />\n              </Route>\n              <Route path=\"/admin/settings\">\n                <AdminSettingsPage user={user} onNavigate={handleNavigate} />\n              </Route>\n            </>\n          )}\n          \n          <Route path=\"/notifications\">\n            <NotificationsPage />\n          </Route>\n          \n          {/* Default route */}\n          <Route path=\"/\">\n            {isAdmin ? (\n              <AdminDashboard />\n            ) : (\n              <DashboardPage user={user} onNavigate={handleNavigate} />\n            )}\n          </Route>\n          \n          {/* 404 */}\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </main>\n\n      {/* Bottom Navigation */}\n      <BottomNavigation\n        currentPage={currentPage}\n        onNavigate={handleNavigate}\n        userRole={user.role}\n      />\n\n      {/* Floating Action Button */}\n      {(isAdmin || isDoctor) && (\n        <button\n          className=\"mobile-fab bg-primary text-white fab\"\n          onClick={() => setShowQuickActions(true)}\n        >\n          <Plus className=\"h-6 w-6\" />\n        </button>\n      )}\n\n      {/* Quick Actions Modal */}\n      <QuickActionsModal\n        isOpen={showQuickActions}\n        onClose={() => setShowQuickActions(false)}\n        onAction={handleQuickAction}\n        userRole={user.role}\n      />\n\n      {/* Loading Overlay for mutations */}\n      <LoadingOverlay \n        isVisible={logoutMutation.isPending} \n        message=\"Signing out...\" \n      />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <LanguageProvider>\n      <QueryClientProvider client={queryClient}>\n        <AppContent />\n        <Toaster />\n      </QueryClientProvider>\n    </LanguageProvider>\n  );\n}\n\nexport default App;\n","size_bytes":12224},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 10%, 3.9%);\n  --muted: hsl(210, 40%, 98%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 3.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 3.9%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --primary: hsl(158, 64%, 52%);\n  --primary-foreground: hsl(355, 7%, 97%);\n  --secondary: hsl(217, 91%, 60%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --accent: hsl(262, 83%, 58%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(60, 9%, 98%);\n  --ring: hsl(240, 10%, 3.9%);\n  --radius: 0.5rem;\n  \n  /* Custom mobile colors */\n  --mobile-primary: hsl(158, 64%, 52%);\n  --mobile-secondary: hsl(217, 91%, 60%);\n  --mobile-accent: hsl(262, 83%, 58%);\n  --mobile-neutral-50: hsl(210, 40%, 98%);\n  --mobile-neutral-100: hsl(210, 40%, 96%);\n  --mobile-neutral-200: hsl(214, 32%, 91%);\n  --mobile-neutral-300: hsl(213, 27%, 84%);\n  --mobile-neutral-400: hsl(215, 20%, 65%);\n  --mobile-neutral-500: hsl(215, 16%, 47%);\n  --mobile-neutral-600: hsl(215, 19%, 35%);\n  --mobile-neutral-700: hsl(215, 25%, 27%);\n  --mobile-neutral-800: hsl(217, 33%, 17%);\n  --mobile-neutral-900: hsl(222, 84%, 5%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(158, 64%, 52%);\n  --primary-foreground: hsl(355, 7%, 97%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n    margin: 0;\n    padding: 0;\n  }\n\n  html {\n    margin: 0;\n    padding: 0;\n  }\n\n  #root {\n    min-height: 100vh;\n    width: 100%;\n  }\n}\n\n@layer components {\n  .gradient-bg {\n    background: linear-gradient(135deg, #3B82F6 0%, #14B8A6 100%);\n  }\n  \n  .medical-background {\n    background-image: url('@assets/background_1753639585794.jpg');\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n  }\n  \n  .mobile-header {\n    @apply bg-white/95 backdrop-blur-sm border-b border-gray-200 sticky top-0 z-50;\n  }\n  \n  .touch-target {\n    @apply min-h-[44px] min-w-[44px] flex items-center justify-center;\n  }\n  \n  .transition-smooth {\n    @apply transition-all duration-200 ease-in-out;\n  }\n}\n\n@layer components {\n  /* Touch-friendly interactions */\n  .touch-target {\n    min-height: 44px;\n    min-width: 44px;\n  }\n  \n  /* Smooth transitions */\n  .transition-smooth {\n    transition: all 0.2s ease-in-out;\n  }\n  \n  /* Mobile drawer animation */\n  .drawer-enter {\n    transform: translateX(-100%);\n  }\n  \n  .drawer-enter-active {\n    transform: translateX(0);\n    transition: transform 0.3s ease-out;\n  }\n  \n  /* Calendar swipe area */\n  .calendar-swipe {\n    touch-action: pan-x;\n  }\n  \n  /* Custom scrollbar for mobile */\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 4px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: hsl(var(--mobile-neutral-100));\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: hsl(var(--mobile-neutral-300));\n    border-radius: 2px;\n  }\n  \n  /* Floating action button */\n  .fab {\n    box-shadow: 0 4px 12px hsla(var(--mobile-primary), 0.4);\n  }\n  \n  /* Card hover effects */\n  .card-hover {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n  \n  .card-hover:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px hsla(0, 0%, 0%, 0.1);\n  }\n  \n  /* Form focus states */\n  .form-input:focus {\n    border-color: hsl(var(--mobile-primary));\n    box-shadow: 0 0 0 3px hsla(var(--mobile-primary), 0.1);\n  }\n\n  /* Mobile navigation */\n  .mobile-nav-active {\n    color: hsl(var(--mobile-primary));\n  }\n\n  /* PWA specific styles */\n  .pwa-install-banner {\n    background: linear-gradient(135deg, hsl(var(--mobile-primary)), hsl(var(--mobile-secondary)));\n  }\n\n  /* Loading spinner */\n  .loading-spinner {\n    border-color: hsl(var(--mobile-neutral-200));\n    border-top-color: hsl(var(--mobile-primary));\n  }\n\n  /* Gesture feedback */\n  .gesture-feedback {\n    background: hsla(var(--mobile-primary), 0.1);\n    border: 1px solid hsla(var(--mobile-primary), 0.3);\n  }\n}\n\n@layer utilities {\n  /* Mobile-specific utilities */\n  .mobile-container {\n    @apply max-w-md mx-auto;\n  }\n\n  .mobile-padding {\n    @apply px-4 py-2;\n  }\n\n  .mobile-text {\n    @apply text-sm leading-relaxed;\n  }\n\n  .mobile-header {\n    @apply sticky top-0 z-50 bg-white shadow-sm border-b;\n  }\n\n  .mobile-nav {\n    @apply fixed bottom-0 left-0 right-0 bg-white border-t z-30;\n  }\n\n  .mobile-drawer {\n    @apply fixed left-0 top-0 w-80 h-full bg-white shadow-xl z-50 transform transition-transform duration-300 ease-out;\n  }\n\n  .mobile-fab {\n    @apply fixed bottom-20 right-4 w-14 h-14 rounded-full shadow-lg z-20 flex items-center justify-center transition-smooth;\n  }\n}\n\n/* Animation for pull-to-refresh */\n@keyframes pull-refresh {\n  0% {\n    transform: translateY(-100px);\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n.pull-refresh-active {\n  animation: pull-refresh 0.3s ease-out;\n}\n\n/* Haptic feedback simulation */\n@keyframes haptic-pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.haptic-feedback {\n  animation: haptic-pulse 0.1s ease-out;\n}\n\n/* Ensure background images work on all devices */\n.login-background {\n  min-height: 100vh;\n  min-height: 100dvh;\n  background-attachment: scroll !important;\n}\n\n@media (max-width: 768px) {\n  .login-background {\n    background-attachment: scroll;\n  }\n}\n","size_bytes":6314},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport { StrictMode } from \"react\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","size_bytes":230},"client/src/components/AdminTemplateManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, FileText, Upload, Trash2, Edit, Users, Settings, Eye, Sparkles, Bot } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { PrescriptionTemplate, DoctorTemplateAssignment, User } from \"@shared/schema\";\n\ninterface TemplateWithAssignments extends PrescriptionTemplate {\n  assignedDoctors?: string[];\n}\n\nexport default function AdminTemplateManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false);\n  const [isPreviewDialogOpen, setIsPreviewDialogOpen] = useState(false);\n  const [isAIGeneratorOpen, setIsAIGeneratorOpen] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState<PrescriptionTemplate | null>(null);\n  const [templateForm, setTemplateForm] = useState({\n    name: \"\",\n    type: \"html\" as \"html\" | \"upload\",\n    content: \"\",\n    fileUrl: \"\",\n    fileName: \"\",\n    fileType: \"\",\n    fileSize: 0\n  });\n\n  const [aiGeneratorForm, setAiGeneratorForm] = useState({\n    templateName: \"\",\n    clinicName: \"\",\n    doctorName: \"\",\n    degree: \"\",\n    headerNotes: \"\",\n    footerNotes: \"\",\n    description: \"\",\n    language: \"bengali\" as \"bengali\" | \"english\",\n    isGenerating: false,\n    generatedContent: \"\",\n    showPreview: false\n  });\n\n  // Sample prescription data for preview\n  const samplePrescriptionData = {\n    patientName: \"রাজু আহমেদ\",\n    patientAge: \"32\",\n    patientGender: \"পুরুষ\",\n    patientPhone: \"01712345678\",\n    patientAddress: \"১২৩ শাহবাগ, ঢাকা\",\n    doctorName: \"ডা. রনজিৎ কুমার দাশ\",\n    clinicName: \"My Homeo Health\",\n    clinicAddress: \"হোমিওপ্যাথিক চিকিৎসা কেন্দ্র, ঢাকা\",\n    date: format(new Date(), 'dd/MM/yyyy'),\n    prescriptionId: \"MHH-2025-001\",\n    symptoms: \"জ্বর, মাথা ব্যথা, শরীর ব্যথা\",\n    medicines: [\n      {\n        name: \"Arnica Montana\",\n        power: \"30C\",\n        dosage: \"৫ ফোঁটা\",\n        frequency: \"দিনে ৩ বার\",\n        duration: \"৭ দিন\",\n        instructions: \"খাওয়ার ৩০ মিনিট আগে\"\n      },\n      {\n        name: \"Belladonna\",\n        power: \"200C\", \n        dosage: \"৪ ফোঁটা\",\n        frequency: \"দিনে ২ বার\",\n        duration: \"৫ দিন\",\n        instructions: \"খাওয়ার পর\"\n      }\n    ],\n    notes: \"প্রচুর পানি পান করুন। ঠান্ডা খাবার এড়িয়ে চলুন।\"\n  };\n\n  // Fetch templates\n  const { data: templates = [], isLoading: templatesLoading } = useQuery({\n    queryKey: [\"/api/admin/templates\"],\n  });\n\n  // Fetch template assignments\n  const { data: assignments = [], isLoading: assignmentsLoading } = useQuery({\n    queryKey: [\"/api/admin/template-assignments\"],\n  });\n\n  // Fetch doctors\n  const { data: doctors = [], isLoading: doctorsLoading } = useQuery({\n    queryKey: [\"/api/admin/doctors\"],\n  });\n\n  // Create template mutation\n  const createTemplateMutation = useMutation({\n    mutationFn: async (templateData: any) => {\n      const response = await fetch(\"/api/admin/templates\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(templateData),\n      });\n      if (!response.ok) throw new Error(\"Failed to create template\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/templates\"] });\n      setIsCreateDialogOpen(false);\n      resetForm();\n      toast({ title: \"Template created successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create template\", variant: \"destructive\" });\n    },\n  });\n\n  // Update template mutation\n  const updateTemplateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/admin/templates/${id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to update template\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/templates\"] });\n      setIsEditDialogOpen(false);\n      resetForm();\n      toast({ title: \"Template updated successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update template\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete template mutation\n  const deleteTemplateMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/admin/templates/${id}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to delete template\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/templates\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/template-assignments\"] });\n      toast({ title: \"Template deleted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete template\", variant: \"destructive\" });\n    },\n  });\n\n  // Assign template mutation\n  const assignTemplateMutation = useMutation({\n    mutationFn: async (assignmentData: any) => {\n      const response = await fetch(\"/api/admin/template-assignments\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(assignmentData),\n      });\n      if (!response.ok) throw new Error(\"Failed to assign template\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/template-assignments\"] });\n      setIsAssignDialogOpen(false);\n      toast({ title: \"Template assigned successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to assign template\", variant: \"destructive\" });\n    },\n  });\n\n  // Remove assignment mutation\n  const removeAssignmentMutation = useMutation({\n    mutationFn: async ({ doctorId, templateId }: { doctorId: string; templateId: string }) => {\n      const response = await fetch(`/api/admin/template-assignments/${doctorId}/${templateId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to remove assignment\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/template-assignments\"] });\n      toast({ title: \"Template assignment removed!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to remove assignment\", variant: \"destructive\" });\n    },\n  });\n\n  const resetForm = () => {\n    setTemplateForm({\n      name: \"\",\n      type: \"html\",\n      content: \"\",\n      fileUrl: \"\",\n      fileName: \"\",\n      fileType: \"\",\n      fileSize: 0\n    });\n    setSelectedTemplate(null);\n  };\n\n  const handleCreateTemplate = () => {\n    if (!templateForm.name.trim()) {\n      toast({ title: \"Template name is required\", variant: \"destructive\" });\n      return;\n    }\n\n    if (templateForm.type === \"html\" && !templateForm.content.trim()) {\n      toast({ title: \"Template content is required\", variant: \"destructive\" });\n      return;\n    }\n\n    createTemplateMutation.mutate(templateForm);\n  };\n\n  const handleEditTemplate = () => {\n    if (!selectedTemplate) return;\n\n    updateTemplateMutation.mutate({\n      id: selectedTemplate.id,\n      data: templateForm\n    });\n  };\n\n  const handleDeleteTemplate = (template: PrescriptionTemplate) => {\n    if (window.confirm(`Are you sure you want to delete \"${template.name}\"? This will remove all doctor assignments.`)) {\n      deleteTemplateMutation.mutate(template.id);\n    }\n  };\n\n  const openEditDialog = (template: PrescriptionTemplate) => {\n    setSelectedTemplate(template);\n    setTemplateForm({\n      name: template.name,\n      type: template.type as \"html\" | \"upload\",\n      content: template.content || \"\",\n      fileUrl: template.fileUrl || \"\",\n      fileName: template.fileName || \"\",\n      fileType: template.fileType || \"\",\n      fileSize: template.fileSize || 0\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setTemplateForm(prev => ({\n          ...prev,\n          fileName: file.name,\n          fileType: file.type,\n          fileSize: file.size,\n          fileUrl: result // In production, this would be uploaded to cloud storage\n        }));\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const getAssignedDoctorsForTemplate = (templateId: string) => {\n    return (assignments as DoctorTemplateAssignment[])\n      .filter((assignment: DoctorTemplateAssignment) => assignment.templateId === templateId)\n      .map((assignment: DoctorTemplateAssignment) => {\n        const doctor = (doctors as User[]).find((d: User) => d.id === assignment.doctorId);\n        return doctor?.name || \"Unknown Doctor\";\n      });\n  };\n\n  const getUnassignedDoctors = (templateId: string) => {\n    const assignedDoctorIds = (assignments as DoctorTemplateAssignment[])\n      .filter((assignment: DoctorTemplateAssignment) => assignment.templateId === templateId)\n      .map((assignment: DoctorTemplateAssignment) => assignment.doctorId);\n    \n    return (doctors as User[]).filter((doctor: User) => !assignedDoctorIds.includes(doctor.id));\n  };\n\n  const handlePreviewTemplate = (template: PrescriptionTemplate) => {\n    setSelectedTemplate(template);\n    setIsPreviewDialogOpen(true);\n  };\n\n  const generatePreviewHTML = (template: PrescriptionTemplate) => {\n    if (template.type === \"html\" && template.content) {\n      let html = template.content;\n      \n      // Replace template variables with sample data\n      html = html.replace(/\\{\\{patientName\\}\\}/g, samplePrescriptionData.patientName);\n      html = html.replace(/\\{\\{patientAge\\}\\}/g, samplePrescriptionData.patientAge);\n      html = html.replace(/\\{\\{patientGender\\}\\}/g, samplePrescriptionData.patientGender);\n      html = html.replace(/\\{\\{patientPhone\\}\\}/g, samplePrescriptionData.patientPhone);\n      html = html.replace(/\\{\\{patientAddress\\}\\}/g, samplePrescriptionData.patientAddress);\n      html = html.replace(/\\{\\{doctorName\\}\\}/g, samplePrescriptionData.doctorName);\n      html = html.replace(/\\{\\{clinicName\\}\\}/g, samplePrescriptionData.clinicName);\n      html = html.replace(/\\{\\{clinicAddress\\}\\}/g, samplePrescriptionData.clinicAddress);\n      html = html.replace(/\\{\\{date\\}\\}/g, samplePrescriptionData.date);\n      html = html.replace(/\\{\\{prescriptionId\\}\\}/g, samplePrescriptionData.prescriptionId);\n      html = html.replace(/\\{\\{symptoms\\}\\}/g, samplePrescriptionData.symptoms);\n      html = html.replace(/\\{\\{notes\\}\\}/g, samplePrescriptionData.notes);\n      \n      // Generate medicines HTML\n      const medicinesHTML = samplePrescriptionData.medicines.map((med, index) => `\n        <div style=\"margin-bottom: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px;\">\n          <div style=\"font-weight: bold; margin-bottom: 5px;\">\n            ${index + 1}. ${med.name}${med.power ? ` (${med.power})` : ''}\n          </div>\n          <div style=\"font-size: 11px;\">\n            <span style=\"margin-right: 15px;\"><strong>ডোজ:</strong> ${med.dosage}</span>\n            <span style=\"margin-right: 15px;\"><strong>সেবনবিধি:</strong> ${med.frequency}</span>\n            <span style=\"margin-right: 15px;\"><strong>সময়কাল:</strong> ${med.duration}</span>\n          </div>\n          ${med.instructions ? `<div style=\"font-size: 10px; color: #666; margin-top: 3px;\"><strong>নির্দেশনা:</strong> ${med.instructions}</div>` : ''}\n        </div>\n      `).join('');\n      \n      html = html.replace(/\\{\\{medicines\\}\\}/g, medicinesHTML);\n      \n      return html;\n    } else if (template.type === \"upload\") {\n      return `\n        <div style=\"text-align: center; padding: 40px; color: #666;\">\n          <div style=\"font-size: 24px; margin-bottom: 10px;\">📄</div>\n          <h3>File Template Preview</h3>\n          <p style=\"margin-bottom: 10px;\"><strong>File:</strong> ${template.fileName}</p>\n          <p style=\"color: #888; font-size: 14px;\">File templates cannot be previewed directly. The actual file will be used when printing prescriptions.</p>\n        </div>\n      `;\n    }\n    \n    return '<div style=\"text-align: center; padding: 40px; color: #999;\">No preview available</div>';\n  };\n\n  // AI Template Generation\n  const generateTemplateWithAI = async () => {\n    setAiGeneratorForm(prev => ({ ...prev, isGenerating: true }));\n    \n    try {\n      const response = await fetch('/api/admin/generate-template', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          clinicName: aiGeneratorForm.clinicName,\n          doctorName: aiGeneratorForm.doctorName,\n          degree: aiGeneratorForm.degree,\n          headerNotes: aiGeneratorForm.headerNotes,\n          footerNotes: aiGeneratorForm.footerNotes,\n          description: aiGeneratorForm.description,\n          language: aiGeneratorForm.language\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to generate template');\n      }\n\n      const result = await response.json();\n      \n      setAiGeneratorForm(prev => ({\n        ...prev,\n        generatedContent: result.templateContent,\n        showPreview: true,\n        isGenerating: false\n      }));\n\n      toast({\n        title: \"Template Generated Successfully!\",\n        description: `Professional ${aiGeneratorForm.language === 'bengali' ? 'Bengali' : 'English'} prescription template created.`\n      });\n\n    } catch (error) {\n      console.error('Template generation error:', error);\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate template. Please try again.\",\n        variant: \"destructive\"\n      });\n      setAiGeneratorForm(prev => ({ ...prev, isGenerating: false }));\n    }\n  };\n\n  const saveGeneratedTemplate = () => {\n    if (!aiGeneratorForm.generatedContent || !aiGeneratorForm.templateName) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide a template name and generate content first.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const templateData = {\n      name: aiGeneratorForm.templateName,\n      type: \"html\",\n      content: aiGeneratorForm.generatedContent,\n      fileUrl: \"\",\n      fileName: \"\",\n      fileType: \"\",\n      fileSize: 0\n    };\n\n    createTemplateMutation.mutate(templateData);\n    setIsAIGeneratorOpen(false);\n    resetAIGeneratorForm();\n  };\n\n  const resetAIGeneratorForm = () => {\n    setAiGeneratorForm({\n      templateName: \"\",\n      clinicName: \"\",\n      doctorName: \"\",\n      degree: \"\",\n      headerNotes: \"\",\n      footerNotes: \"\",\n      description: \"\",\n      language: \"bengali\",\n      isGenerating: false,\n      generatedContent: \"\",\n      showPreview: false\n    });\n  };\n\n  if (templatesLoading || assignmentsLoading || doctorsLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Template Management</h2>\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={() => setIsAIGeneratorOpen(true)} \n            variant=\"outline\"\n            className=\"flex items-center gap-2\"\n          >\n            <Sparkles className=\"h-4 w-4\" />\n            AI Generator\n          </Button>\n          <Button onClick={() => setIsCreateDialogOpen(true)} className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Create Template\n          </Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"templates\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"templates\">Templates</TabsTrigger>\n          <TabsTrigger value=\"assignments\">Assignments</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"templates\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {(templates as PrescriptionTemplate[]).map((template: PrescriptionTemplate) => {\n              const assignedDoctors = getAssignedDoctorsForTemplate(template.id);\n              \n              return (\n                <Card key={template.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        {template.type === \"html\" ? (\n                          <FileText className=\"h-5 w-5 text-blue-500\" />\n                        ) : (\n                          <Upload className=\"h-5 w-5 text-green-500\" />\n                        )}\n                        <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                      </div>\n                      <Badge variant={template.isActive ? \"default\" : \"secondary\"}>\n                        {template.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      Type: {template.type === \"html\" ? \"Custom HTML\" : \"File Upload\"}\n                    </div>\n                    \n                    {template.fileName && (\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        File: {template.fileName}\n                      </div>\n                    )}\n\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                      <Users className=\"h-4 w-4\" />\n                      {assignedDoctors.length} doctor(s) assigned\n                    </div>\n\n                    {assignedDoctors.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1\">\n                        {assignedDoctors.slice(0, 2).map((doctorName: string, index: number) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                            {doctorName}\n                          </Badge>\n                        ))}\n                        {assignedDoctors.length > 2 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{assignedDoctors.length - 2} more\n                          </Badge>\n                        )}\n                      </div>\n                    )}\n\n                    <div className=\"space-y-2 pt-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handlePreviewTemplate(template)}\n                        className=\"w-full\"\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        Preview Prescription\n                      </Button>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => openEditDialog(template)}\n                          className=\"flex-1\"\n                        >\n                          <Edit className=\"h-4 w-4 mr-1\" />\n                          Edit\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedTemplate(template);\n                            setIsAssignDialogOpen(true);\n                          }}\n                          className=\"flex-1\"\n                        >\n                          <Settings className=\"h-4 w-4 mr-1\" />\n                          Assign\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteTemplate(template)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"assignments\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {(doctors as User[]).map((doctor: User) => {\n              const doctorAssignments = (assignments as DoctorTemplateAssignment[]).filter(\n                (assignment: DoctorTemplateAssignment) => assignment.doctorId === doctor.id\n              );\n              \n              return (\n                <Card key={doctor.id}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Users className=\"h-5 w-5\" />\n                      {doctor.name}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {doctorAssignments.length} template(s) assigned\n                    </div>\n                    \n                    {doctorAssignments.length > 0 ? (\n                      <div className=\"space-y-2\">\n                        {doctorAssignments.map((assignment: DoctorTemplateAssignment) => {\n                          const template = (templates as PrescriptionTemplate[]).find((t: PrescriptionTemplate) => t.id === assignment.templateId);\n                          \n                          return (\n                            <div key={assignment.id} className=\"flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"text-sm\">{template?.name}</span>\n                                {assignment.isDefault && (\n                                  <Badge variant=\"default\" className=\"text-xs\">Default</Badge>\n                                )}\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => removeAssignmentMutation.mutate({\n                                  doctorId: doctor.id,\n                                  templateId: assignment.templateId\n                                })}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    ) : (\n                      <div className=\"text-sm text-gray-500 italic\">No templates assigned</div>\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Create Template Dialog */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Create New Template</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"templateName\">Template Name</Label>\n              <Input\n                id=\"templateName\"\n                value={templateForm.name}\n                onChange={(e) => setTemplateForm(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"Enter template name\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"templateType\">Template Type</Label>\n              <Select\n                value={templateForm.type}\n                onValueChange={(value: \"html\" | \"upload\") => \n                  setTemplateForm(prev => ({ ...prev, type: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"html\">Custom HTML Template</SelectItem>\n                  <SelectItem value=\"upload\">File Upload (PDF/DOC)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {templateForm.type === \"html\" ? (\n              <div>\n                <Label htmlFor=\"templateContent\">HTML Content</Label>\n                <Textarea\n                  id=\"templateContent\"\n                  value={templateForm.content}\n                  onChange={(e) => setTemplateForm(prev => ({ ...prev, content: e.target.value }))}\n                  placeholder=\"Enter HTML template content...\"\n                  rows={8}\n                  className=\"font-mono text-sm\"\n                />\n              </div>\n            ) : (\n              <div>\n                <Label htmlFor=\"templateFile\">Upload File</Label>\n                <Input\n                  id=\"templateFile\"\n                  type=\"file\"\n                  accept=\".pdf,.doc,.docx\"\n                  onChange={handleFileUpload}\n                />\n                {templateForm.fileName && (\n                  <div className=\"text-sm text-gray-600 mt-2\">\n                    Selected: {templateForm.fileName} ({(templateForm.fileSize / 1024 / 1024).toFixed(2)} MB)\n                  </div>\n                )}\n              </div>\n            )}\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button onClick={() => setIsCreateDialogOpen(false)} variant=\"outline\">\n                Cancel\n              </Button>\n              <Button \n                onClick={handleCreateTemplate}\n                disabled={createTemplateMutation.isPending}\n              >\n                {createTemplateMutation.isPending ? \"Creating...\" : \"Create Template\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Template Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Template</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"editTemplateName\">Template Name</Label>\n              <Input\n                id=\"editTemplateName\"\n                value={templateForm.name}\n                onChange={(e) => setTemplateForm(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"Enter template name\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"editTemplateType\">Template Type</Label>\n              <Select\n                value={templateForm.type}\n                onValueChange={(value: \"html\" | \"upload\") => \n                  setTemplateForm(prev => ({ ...prev, type: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"html\">Custom HTML Template</SelectItem>\n                  <SelectItem value=\"upload\">File Upload (PDF/DOC)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {templateForm.type === \"html\" ? (\n              <div>\n                <Label htmlFor=\"editTemplateContent\">HTML Content</Label>\n                <Textarea\n                  id=\"editTemplateContent\"\n                  value={templateForm.content}\n                  onChange={(e) => setTemplateForm(prev => ({ ...prev, content: e.target.value }))}\n                  placeholder=\"Enter HTML template content...\"\n                  rows={8}\n                  className=\"font-mono text-sm\"\n                />\n              </div>\n            ) : (\n              <div>\n                <Label htmlFor=\"editTemplateFile\">Upload New File</Label>\n                <Input\n                  id=\"editTemplateFile\"\n                  type=\"file\"\n                  accept=\".pdf,.doc,.docx\"\n                  onChange={handleFileUpload}\n                />\n                {templateForm.fileName && (\n                  <div className=\"text-sm text-gray-600 mt-2\">\n                    Current: {templateForm.fileName} ({(templateForm.fileSize / 1024 / 1024).toFixed(2)} MB)\n                  </div>\n                )}\n              </div>\n            )}\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button onClick={() => setIsEditDialogOpen(false)} variant=\"outline\">\n                Cancel\n              </Button>\n              <Button \n                onClick={handleEditTemplate}\n                disabled={updateTemplateMutation.isPending}\n              >\n                {updateTemplateMutation.isPending ? \"Updating...\" : \"Update Template\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Assign Template Dialog */}\n      <Dialog open={isAssignDialogOpen} onOpenChange={setIsAssignDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Assign Template to Doctors</DialogTitle>\n          </DialogHeader>\n          \n          {selectedTemplate && (\n            <div className=\"space-y-4\">\n              <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded\">\n                <div className=\"font-medium\">{selectedTemplate.name}</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {selectedTemplate.type === \"html\" ? \"Custom HTML Template\" : \"File Upload Template\"}\n                </div>\n              </div>\n\n              <div>\n                <Label>Available Doctors</Label>\n                <div className=\"space-y-2 mt-2\">\n                  {getUnassignedDoctors(selectedTemplate.id).map((doctor: User) => (\n                    <div key={doctor.id} className=\"flex items-center justify-between p-2 border rounded\">\n                      <span>{doctor.name}</span>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => assignTemplateMutation.mutate({\n                          doctorId: doctor.id,\n                          templateId: selectedTemplate.id,\n                          isDefault: false\n                        })}\n                        disabled={assignTemplateMutation.isPending}\n                      >\n                        Assign\n                      </Button>\n                    </div>\n                  ))}\n                  {getUnassignedDoctors(selectedTemplate.id).length === 0 && (\n                    <div className=\"text-sm text-gray-500 italic p-2\">\n                      All doctors have been assigned this template\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <Button onClick={() => setIsAssignDialogOpen(false)} variant=\"outline\" className=\"w-full\">\n                Close\n              </Button>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Preview Template Dialog */}\n      <Dialog open={isPreviewDialogOpen} onOpenChange={setIsPreviewDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Eye className=\"h-5 w-5\" />\n              Prescription Preview - {selectedTemplate?.name}\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedTemplate && (\n            <div className=\"space-y-4\">\n              <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\n                <div className=\"flex items-center gap-2 text-blue-800 dark:text-blue-200\">\n                  <FileText className=\"h-4 w-4\" />\n                  <span className=\"font-medium\">Template: {selectedTemplate.name}</span>\n                </div>\n                <div className=\"text-sm text-blue-600 dark:text-blue-300 mt-1\">\n                  Type: {selectedTemplate.type === \"html\" ? \"Custom HTML Template\" : \"File Upload Template\"}\n                </div>\n              </div>\n\n              <div className=\"border rounded-lg bg-white dark:bg-gray-900 overflow-hidden\">\n                <div className=\"bg-gray-50 dark:bg-gray-800 px-4 py-2 border-b\">\n                  <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">Preview with Sample Data</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">This shows how the prescription will look when printed</p>\n                </div>\n                <div className=\"p-6 max-h-[500px] overflow-y-auto\">\n                  <div \n                    className=\"prescription-preview\"\n                    dangerouslySetInnerHTML={{\n                      __html: generatePreviewHTML(selectedTemplate)\n                    }}\n                    style={{\n                      fontFamily: 'Arial, sans-serif',\n                      lineHeight: '1.4',\n                      color: '#333'\n                    }}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsPreviewDialogOpen(false)}\n                >\n                  Close Preview\n                </Button>\n                <Button\n                  onClick={() => {\n                    // Print the preview\n                    const printWindow = window.open('', '_blank');\n                    if (printWindow && selectedTemplate) {\n                      const previewHTML = generatePreviewHTML(selectedTemplate);\n                      printWindow.document.write(`\n                        <html>\n                          <head>\n                            <title>Prescription Preview - ${selectedTemplate.name}</title>\n                            <style>\n                              body { \n                                font-family: Arial, sans-serif; \n                                margin: 20px; \n                                line-height: 1.4; \n                                color: #333; \n                              }\n                              @media print {\n                                body { margin: 0; }\n                              }\n                            </style>\n                          </head>\n                          <body>\n                            ${previewHTML}\n                          </body>\n                        </html>\n                      `);\n                      printWindow.document.close();\n                      printWindow.print();\n                    }\n                  }}\n                >\n                  Print Preview\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* AI Template Generator Dialog */}\n      <Dialog open={isAIGeneratorOpen} onOpenChange={setIsAIGeneratorOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Bot className=\"h-5 w-5\" />\n              AI Prescription Template Generator\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            {!aiGeneratorForm.showPreview ? (\n              // Generator Form\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"templateName\">Template Name *</Label>\n                    <Input\n                      id=\"templateName\"\n                      value={aiGeneratorForm.templateName}\n                      onChange={(e) => setAiGeneratorForm(prev => ({ ...prev, templateName: e.target.value }))}\n                      placeholder=\"e.g., Modern Bengali Template\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"clinicName\">Clinic Name *</Label>\n                    <Input\n                      id=\"clinicName\"\n                      value={aiGeneratorForm.clinicName}\n                      onChange={(e) => setAiGeneratorForm(prev => ({ ...prev, clinicName: e.target.value }))}\n                      placeholder=\"e.g., My Homeo Health Clinic\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"doctorName\">Doctor Name *</Label>\n                    <Input\n                      id=\"doctorName\"\n                      value={aiGeneratorForm.doctorName}\n                      onChange={(e) => setAiGeneratorForm(prev => ({ ...prev, doctorName: e.target.value }))}\n                      placeholder=\"e.g., Dr. Ranajit Kumar\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"degree\">Degree/Qualification</Label>\n                    <Input\n                      id=\"degree\"\n                      value={aiGeneratorForm.degree}\n                      onChange={(e) => setAiGeneratorForm(prev => ({ ...prev, degree: e.target.value }))}\n                      placeholder=\"e.g., BHMS, MD (Hom)\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"language\">Language *</Label>\n                    <select\n                      id=\"language\"\n                      value={aiGeneratorForm.language}\n                      onChange={(e) => setAiGeneratorForm(prev => ({ ...prev, language: e.target.value as 'bengali' | 'english' }))}\n                      className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    >\n                      <option value=\"bengali\">Bengali (বাংলা)</option>\n                      <option value=\"english\">English</option>\n                    </select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"headerNotes\">Header Notes</Label>\n                    <textarea\n                      id=\"headerNotes\"\n                      value={aiGeneratorForm.headerNotes}\n                      onChange={(e) => setAiGeneratorForm(prev => ({ ...prev, headerNotes: e.target.value }))}\n                      placeholder=\"Additional information for header (e.g., clinic address, phone)\"\n                      className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      rows={3}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"footerNotes\">Footer Notes</Label>\n                    <textarea\n                      id=\"footerNotes\"\n                      value={aiGeneratorForm.footerNotes}\n                      onChange={(e) => setAiGeneratorForm(prev => ({ ...prev, footerNotes: e.target.value }))}\n                      placeholder=\"Additional information for footer (e.g., consultation hours, disclaimer)\"\n                      className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      rows={3}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"description\">Template Description</Label>\n                    <textarea\n                      id=\"description\"\n                      value={aiGeneratorForm.description}\n                      onChange={(e) => setAiGeneratorForm(prev => ({ ...prev, description: e.target.value }))}\n                      placeholder=\"Describe your specific needs for this template (e.g., modern design, specific colors, layout preferences, special sections needed)\"\n                      className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      rows={4}\n                    />\n                  </div>\n                </div>\n              </div>\n            ) : (\n              // Preview Section\n              <div className=\"space-y-4\">\n                <div className=\"p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg\">\n                  <div className=\"flex items-center gap-2 text-green-800 dark:text-green-200\">\n                    <Sparkles className=\"h-4 w-4\" />\n                    <span className=\"font-medium\">Template Generated Successfully!</span>\n                  </div>\n                  <div className=\"text-sm text-green-600 dark:text-green-300 mt-1\">\n                    Language: {aiGeneratorForm.language === 'bengali' ? 'Bengali (বাংলা)' : 'English'}\n                  </div>\n                </div>\n\n                <div className=\"border rounded-lg bg-white dark:bg-gray-900 overflow-hidden\">\n                  <div className=\"bg-gray-50 dark:bg-gray-800 px-4 py-2 border-b\">\n                    <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">Preview with Sample Data</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">This shows how your generated template will look</p>\n                  </div>\n                  <div className=\"p-6 max-h-[400px] overflow-y-auto\">\n                    <div \n                      className=\"prescription-preview\"\n                      dangerouslySetInnerHTML={{\n                        __html: aiGeneratorForm.generatedContent.replace(/\\{\\{([^}]+)\\}\\}/g, (match, key) => {\n                          const sampleData: Record<string, string> = {\n                            clinicName: aiGeneratorForm.clinicName,\n                            doctorName: aiGeneratorForm.doctorName,\n                            patientName: 'রহিমা খাতুন',\n                            patientAge: '৩৫',\n                            patientGender: 'মহিলা',\n                            patientPhone: '০১৭১২৩৪৫৬৭৮',\n                            patientAddress: 'ঢাকা, বাংলাদেশ',\n                            date: new Date().toLocaleDateString('bn-BD'),\n                            prescriptionId: 'RX-2025-001',\n                            symptoms: 'মাথাব্যথা, জ্বর, শরীর ব্যথা',\n                            medicines: `<div style=\"margin-bottom: 10px;\">১. আর্নিকা মন্টানা ৩০ - ৩ ফোঁটা - দিনে ৩ বার - ৭ দিন</div>\n                              <div style=\"margin-bottom: 10px;\">২. বেলাডোনা ২০০ - ২ ফোঁটা - দিনে ২ বার - ৫ দিন</div>`,\n                            notes: 'প্রচুর পানি পান করুন এবং বিশ্রাম নিন।'\n                          };\n                          return sampleData[key] || match;\n                        })\n                      }}\n                      style={{\n                        fontFamily: 'Arial, sans-serif',\n                        lineHeight: '1.4',\n                        color: '#333'\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n              {!aiGeneratorForm.showPreview ? (\n                <>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsAIGeneratorOpen(false);\n                      resetAIGeneratorForm();\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={generateTemplateWithAI}\n                    disabled={aiGeneratorForm.isGenerating || !aiGeneratorForm.clinicName || !aiGeneratorForm.doctorName}\n                    className=\"flex items-center gap-2\"\n                  >\n                    {aiGeneratorForm.isGenerating ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                        Generating...\n                      </>\n                    ) : (\n                      <>\n                        <Sparkles className=\"h-4 w-4\" />\n                        Generate Template\n                      </>\n                    )}\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setAiGeneratorForm(prev => ({ ...prev, showPreview: false }))}\n                  >\n                    Back to Edit\n                  </Button>\n                  <Button\n                    onClick={saveGeneratedTemplate}\n                    disabled={createTemplateMutation.isPending}\n                    className=\"flex items-center gap-2\"\n                  >\n                    {createTemplateMutation.isPending ? \"Saving...\" : \"Save Template\"}\n                  </Button>\n                </>\n              )}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":47654},"client/src/components/ProfileModal.tsx":{"content":"import React, { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { User, LogOut, Settings, Key, Globe, MessageCircle, Users } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface ProfileModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onLogout: () => void;\n  user?: any; // User data passed from parent component\n}\n\nexport default function ProfileModal({ isOpen, onClose, onLogout, user: propUser }: ProfileModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { language, setLanguage, t } = useLanguage();\n  const [activeTab, setActiveTab] = useState(\"profile\");\n  const [selectedLanguage, setSelectedLanguage] = useState<'en' | 'bn'>(language);\n\n  // Use user data from props or fetch if not available\n  const { data: currentUser, isLoading: isUserLoading, error } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: async () => {\n      const response = await fetch('/api/auth/me', {\n        method: 'GET',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Failed to fetch user data:', response.status, errorText);\n        throw new Error(`Failed to fetch user data: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('User data fetched successfully:', data);\n      return data;\n    },\n    enabled: isOpen && !propUser, // Only fetch if no user prop is provided and modal is open\n    retry: 2,\n    staleTime: 0,\n  });\n\n  const user = propUser || currentUser?.user;\n\n  const [profileData, setProfileData] = useState({\n    name: user?.name || '',\n    email: user?.email || '',\n    phone: user?.phone || '',\n    clinicName: user?.clinicName || '',\n    clinicLocation: user?.clinicLocation || '',\n    degree: user?.degree || '',\n    specialist: user?.specialist || '',\n  });\n\n  const [whatsappData, setWhatsappData] = useState({\n    whatsappPhone: user?.whatsappPhone || '',\n    whatsappEnabled: user?.whatsappEnabled || false,\n  });\n\n  const [settingsData, setSettingsData] = useState({\n    globalLowStockThreshold: user?.globalLowStockThreshold || 10,\n  });\n\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('PATCH', `/api/users/${user?.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      setActiveTab(\"profile\"); // Go back to view mode\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\", \n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // WhatsApp settings mutation\n  const updateWhatsAppMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('PATCH', `/api/users/${user?.id}/whatsapp`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      toast({\n        title: \"Success\",\n        description: \"WhatsApp settings updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\", \n        description: error.message || \"Failed to update WhatsApp settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('PATCH', `/api/users/${user?.id}/settings`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      toast({\n        title: \"Success\",\n        description: \"Settings updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\", \n        description: error.message || \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update password mutation\n  const updatePasswordMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('PATCH', `/api/users/${user?.id}/password`, data),\n    onSuccess: () => {\n      setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' });\n      toast({\n        title: \"Success\",\n        description: \"Password updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProfileUpdate = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateProfileMutation.mutate(profileData);\n  };\n\n  const handlePasswordUpdate = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"New passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (passwordData.newPassword.length < 6) {\n      toast({\n        title: \"Error\", \n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updatePasswordMutation.mutate({\n      currentPassword: passwordData.currentPassword,\n      newPassword: passwordData.newPassword,\n    });\n  };\n\n  const handleWhatsAppUpdate = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateWhatsAppMutation.mutate(whatsappData);\n  };\n\n  const handleSettingsUpdate = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateSettingsMutation.mutate(settingsData);\n  };\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest('POST', '/api/auth/logout');\n      onLogout();\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to logout\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Update form data when user data loads\n  React.useEffect(() => {\n    if (user) {\n      setProfileData({\n        name: user.name || '',\n        email: user.email || '',\n        phone: user.phone || '',\n        clinicName: user.clinicName || '',\n        clinicLocation: user.clinicLocation || '',\n        degree: user.degree || '',\n        specialist: user.specialist || '',\n      });\n      setWhatsappData({\n        whatsappPhone: user.whatsappPhone || '',\n        whatsappEnabled: user.whatsappEnabled || false,\n      });\n      setSettingsData({\n        globalLowStockThreshold: user.globalLowStockThreshold || 10,\n      });\n    }\n  }, [user]);\n\n  if (isUserLoading && !propUser) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-hidden\">\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            <span className=\"ml-2\">Loading profile...</span>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (error || !user) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-hidden\">\n          <div className=\"flex items-center justify-center p-8 text-center\">\n            <div>\n              <p className=\"text-red-500 mb-2\">\n                {error ? `Error: ${error.message}` : 'Unable to load user profile'}\n              </p>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Please try logging in again or contact support if the issue persists.\n              </p>\n              <div className=\"flex gap-2 justify-center\">\n                <Button onClick={onLogout} variant=\"outline\">\n                  Login Again\n                </Button>\n                <Button onClick={onClose}>Close</Button>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            {t('profile.title')}\n          </DialogTitle>\n          <DialogDescription>\n            {t('profile.subtitle')}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className={`grid w-full ${user?.role === 'doctor' ? 'grid-cols-7' : 'grid-cols-6'}`}>\n            <TabsTrigger value=\"profile\" className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4\" />\n              Profile\n            </TabsTrigger>\n            <TabsTrigger value=\"edit\" className=\"flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              Edit\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              Settings\n            </TabsTrigger>\n            <TabsTrigger value=\"password\" className=\"flex items-center gap-2\">\n              <Key className=\"h-4 w-4\" />\n              Password\n            </TabsTrigger>\n            {user?.role === 'doctor' && (\n              <TabsTrigger value=\"whatsapp\" className=\"flex items-center gap-2\">\n                <MessageCircle className=\"h-4 w-4\" />\n                WhatsApp\n              </TabsTrigger>\n            )}\n            <TabsTrigger value=\"language\" className=\"flex items-center gap-2\">\n              <Globe className=\"h-4 w-4\" />\n              Language\n            </TabsTrigger>\n            <TabsTrigger value=\"account\" className=\"flex items-center gap-2\">\n              <LogOut className=\"h-4 w-4\" />\n              Account\n            </TabsTrigger>\n          </TabsList>\n\n          <div className=\"max-h-[60vh] overflow-y-auto\">\n            <TabsContent value=\"profile\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>{t('profile.information')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    {/* View Mode - Display user info with edit button */}\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-lg font-medium\">{t('profile.user.details')}</h3>\n                      <Button\n                        onClick={() => setActiveTab(\"edit\")}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex items-center gap-2\"\n                      >\n                        <Settings className=\"h-4 w-4\" />\n                        {t('profile.edit.profile')}\n                      </Button>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-sm font-medium text-muted-foreground\">{t('profile.fullname')}</Label>\n                          <p className=\"text-sm\">{user.name || t('profile.not.provided')}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-sm font-medium text-muted-foreground\">{t('profile.username')}</Label>\n                          <p className=\"text-sm\">{user.username}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-sm font-medium text-muted-foreground\">{t('profile.email')}</Label>\n                          <p className=\"text-sm\">{user.email || t('profile.not.provided')}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-sm font-medium text-muted-foreground\">{t('profile.phone')}</Label>\n                          <p className=\"text-sm\">{user.phone || t('profile.not.provided')}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-sm font-medium text-muted-foreground\">{t('profile.role')}</Label>\n                          <p className=\"text-sm capitalize\">{user.role}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-sm font-medium text-muted-foreground\">{t('profile.clinic.name')}</Label>\n                          <p className=\"text-sm\">{user.clinicName || t('profile.not.provided')}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-sm font-medium text-muted-foreground\">{t('profile.clinic.location')}</Label>\n                          <p className=\"text-sm\">{user.clinicLocation || t('profile.not.provided')}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-sm font-medium text-muted-foreground\">{t('profile.degree')}</Label>\n                          <p className=\"text-sm\">{user.degree || t('profile.not.provided')}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-sm font-medium text-muted-foreground\">{t('profile.specialization')}</Label>\n                          <p className=\"text-sm\">{user.specialist || t('profile.not.provided')}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"edit\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Edit Profile Information</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleProfileUpdate} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\">Full Name</Label>\n                        <Input\n                          id=\"name\"\n                          value={profileData.name}\n                          onChange={(e) => setProfileData(prev => ({ ...prev, name: e.target.value }))}\n                          placeholder=\"Dr. John Doe\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"username\">Username (Read-only)</Label>\n                        <Input\n                          id=\"username\"\n                          value={user.username}\n                          disabled\n                          className=\"bg-muted\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={profileData.email}\n                          onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}\n                          placeholder=\"doctor@example.com\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\">Phone</Label>\n                        <Input\n                          id=\"phone\"\n                          value={profileData.phone}\n                          onChange={(e) => setProfileData(prev => ({ ...prev, phone: e.target.value }))}\n                          placeholder=\"+1234567890\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"clinicName\">Clinic Name</Label>\n                        <Input\n                          id=\"clinicName\"\n                          value={profileData.clinicName}\n                          onChange={(e) => setProfileData(prev => ({ ...prev, clinicName: e.target.value }))}\n                          placeholder=\"Your Clinic Name\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"clinicLocation\">Clinic Location</Label>\n                        <Input\n                          id=\"clinicLocation\"\n                          value={profileData.clinicLocation}\n                          onChange={(e) => setProfileData(prev => ({ ...prev, clinicLocation: e.target.value }))}\n                          placeholder=\"City, State\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"degree\">Degree</Label>\n                        <Input\n                          id=\"degree\"\n                          value={profileData.degree}\n                          onChange={(e) => setProfileData(prev => ({ ...prev, degree: e.target.value }))}\n                          placeholder=\"BHMS, MD\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"specialist\">Specialization</Label>\n                        <Input\n                          id=\"specialist\"\n                          value={profileData.specialist}\n                          onChange={(e) => setProfileData(prev => ({ ...prev, specialist: e.target.value }))}\n                          placeholder=\"General Homeopathy\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button \n                        type=\"submit\" \n                        className=\"flex-1\"\n                        disabled={updateProfileMutation.isPending}\n                      >\n                        {updateProfileMutation.isPending ? 'Updating...' : 'Update Profile'}\n                      </Button>\n                      <Button \n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setActiveTab(\"profile\")}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"password\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>{t('password.change')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handlePasswordUpdate} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"currentPassword\">{t('password.current')}</Label>\n                      <Input\n                        id=\"currentPassword\"\n                        type=\"password\"\n                        value={passwordData.currentPassword}\n                        onChange={(e) => setPasswordData(prev => ({ ...prev, currentPassword: e.target.value }))}\n                        placeholder={t('password.current.placeholder')}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"newPassword\">{t('password.new')}</Label>\n                      <Input\n                        id=\"newPassword\"\n                        type=\"password\"\n                        value={passwordData.newPassword}\n                        onChange={(e) => setPasswordData(prev => ({ ...prev, newPassword: e.target.value }))}\n                        placeholder={t('password.new.placeholder')}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"confirmPassword\">{t('password.confirm')}</Label>\n                      <Input\n                        id=\"confirmPassword\"\n                        type=\"password\"\n                        value={passwordData.confirmPassword}\n                        onChange={(e) => setPasswordData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                        placeholder={t('password.confirm.placeholder')}\n                        required\n                      />\n                    </div>\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\"\n                      disabled={updatePasswordMutation.isPending}\n                    >\n                      {updatePasswordMutation.isPending ? t('profile.updating') : t('password.update')}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {user?.role === 'doctor' && (\n              <TabsContent value=\"whatsapp\" className=\"space-y-4\">\n                <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <MessageCircle className=\"h-5 w-5\" />\n                    WhatsApp Appointment Booking\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleWhatsAppUpdate} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"whatsappPhone\">WhatsApp Phone Number</Label>\n                      <Input\n                        id=\"whatsappPhone\"\n                        type=\"tel\"\n                        value={whatsappData.whatsappPhone}\n                        onChange={(e) => setWhatsappData(prev => ({ ...prev, whatsappPhone: e.target.value }))}\n                        placeholder=\"+8801XXXXXXXXX\"\n                      />\n                      <p className=\"text-sm text-muted-foreground\">\n                        Enter your WhatsApp number with country code (e.g., +8801712345678)\n                      </p>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"whatsappEnabled\"\n                        checked={whatsappData.whatsappEnabled}\n                        onChange={(e) => setWhatsappData(prev => ({ ...prev, whatsappEnabled: e.target.checked }))}\n                        className=\"h-4 w-4\"\n                      />\n                      <Label htmlFor=\"whatsappEnabled\">Enable WhatsApp Appointment Booking</Label>\n                    </div>\n                    \n                    {whatsappData.whatsappEnabled && (\n                      <div className=\"bg-blue-50 p-4 rounded-lg\">\n                        <h4 className=\"font-medium text-blue-900 mb-2\">How WhatsApp Booking Works:</h4>\n                        <ul className=\"text-sm text-blue-800 space-y-1\">\n                          <li>• Patients can text your WhatsApp number to book appointments</li>\n                          <li>• They need to provide: Name, Age, Gender, and Location</li>\n                          <li>• System automatically finds available slots based on your schedule</li>\n                          <li>• Patient receives appointment ID, date, and time confirmation</li>\n                          <li>• New appointments appear in your dashboard</li>\n                        </ul>\n                        {whatsappData.whatsappPhone && (\n                          <p className=\"mt-3 text-sm font-medium text-blue-900\">\n                            Your booking link: <code className=\"bg-white px-2 py-1 rounded\">\n                              https://wa.me/{whatsappData.whatsappPhone.replace(/[^\\d]/g, '')}?text=I%20want%20to%20book%20an%20appointment\n                            </code>\n                          </p>\n                        )}\n                      </div>\n                    )}\n                    \n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\"\n                      disabled={updateWhatsAppMutation.isPending}\n                    >\n                      {updateWhatsAppMutation.isPending ? 'Updating...' : 'Save WhatsApp Settings'}\n                    </Button>\n                  </form>\n                </CardContent>\n                </Card>\n              </TabsContent>\n            )}\n\n            <TabsContent value=\"settings\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Settings className=\"h-5 w-5\" />\n                    Medicine Settings\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSettingsUpdate} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"globalLowStockThreshold\">Global Low Stock Threshold</Label>\n                      <Input\n                        id=\"globalLowStockThreshold\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={settingsData.globalLowStockThreshold}\n                        onChange={(e) => setSettingsData(prev => ({ ...prev, globalLowStockThreshold: parseInt(e.target.value) || 10 }))}\n                        placeholder=\"10\"\n                      />\n                      <p className=\"text-sm text-muted-foreground\">\n                        Set the default low stock alert threshold for all medicines. This will be applied to all medicines unless individually customized.\n                      </p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        type=\"submit\"\n                        disabled={updateSettingsMutation.isPending}\n                        className=\"flex-1\"\n                      >\n                        {updateSettingsMutation.isPending ? \"Updating...\" : \"Update Settings\"}\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"language\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>{t('language.settings')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"language-select\">{t('language.select')}</Label>\n                      <p className=\"text-sm text-muted-foreground\">{t('language.description')}</p>\n                      <Select \n                        value={selectedLanguage} \n                        onValueChange={(value: 'en' | 'bn') => setSelectedLanguage(value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder={t('language.select')} />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"en\">{t('language.english')}</SelectItem>\n                          <SelectItem value=\"bn\">{t('language.bengali')}</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <Button \n                      onClick={() => {\n                        setLanguage(selectedLanguage);\n                        toast({\n                          title: t('common.success'),\n                          description: `Language changed to ${selectedLanguage === 'en' ? 'English' : 'Bengali'}`,\n                        });\n                      }}\n                      className=\"w-full\"\n                    >\n                      {t('language.save')}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"account\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>{t('account.actions')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"p-4 border rounded-lg\">\n                    <h3 className=\"font-medium mb-2\">{t('account.information')}</h3>\n                    <div className=\"text-sm space-y-1 text-muted-foreground\">\n                      <p><strong>{t('account.name')}:</strong> {user.name}</p>\n                      <p><strong>{t('account.username')}:</strong> {user.username}</p>\n                      <p><strong>{t('account.role')}:</strong> {user.role}</p>\n                      <p><strong>{t('account.email')}:</strong> {user.email || t('profile.not.provided')}</p>\n                    </div>\n                  </div>\n                  \n                  {/* Admin Management - Only show for admin users */}\n                  {user?.role === 'admin' && (\n                    <>\n                      <Button \n                        onClick={() => {\n                          onClose();\n                          // Navigate to admin dashboard admins tab\n                          // Use location API or proper navigation\n                          if (window.location.pathname !== '/dashboard') {\n                            window.location.href = '/dashboard';\n                          }\n                          // Set admin tab as active after navigation\n                          setTimeout(() => {\n                            const adminTab = document.querySelector('[data-value=\"admins\"]') as HTMLElement;\n                            if (adminTab) {\n                              adminTab.click();\n                            }\n                          }, 200);\n                        }}\n                        variant=\"outline\" \n                        className=\"w-full flex items-center gap-2\"\n                      >\n                        <Users className=\"h-4 w-4\" />\n                        Manage Admin Users\n                      </Button>\n                      <Separator />\n                    </>\n                  )}\n\n                  <Button \n                    onClick={handleLogout}\n                    variant=\"destructive\" \n                    className=\"w-full flex items-center gap-2\"\n                  >\n                    <LogOut className=\"h-4 w-4\" />\n                    {t('nav.logout')}\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </div>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":32073},"client/src/components/WhatsAppModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { MessageCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface WhatsAppModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  user?: any;\n}\n\nexport default function WhatsAppModal({ isOpen, onClose, user }: WhatsAppModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [whatsappData, setWhatsappData] = useState({\n    whatsappPhone: user?.whatsappPhone || '',\n    whatsappEnabled: user?.whatsappEnabled || false,\n  });\n\n  // Update WhatsApp settings mutation\n  const updateWhatsAppMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('PATCH', `/api/users/${user?.id}/whatsapp`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      toast({\n        title: 'Success',\n        description: 'WhatsApp settings updated successfully',\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update WhatsApp settings',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Update state when user data changes\n  useEffect(() => {\n    if (user) {\n      setWhatsappData({\n        whatsappPhone: user.whatsappPhone || '',\n        whatsappEnabled: user.whatsappEnabled || false,\n      });\n    }\n  }, [user]);\n\n  const handleWhatsAppUpdate = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateWhatsAppMutation.mutate(whatsappData);\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-lg max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <MessageCircle className=\"h-5 w-5\" />\n            WhatsApp Appointment Booking\n          </DialogTitle>\n          <DialogDescription>\n            Configure WhatsApp booking settings for your patients\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"max-h-[60vh] overflow-y-auto\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <form onSubmit={handleWhatsAppUpdate} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"whatsappPhone\">WhatsApp Phone Number</Label>\n                  <Input\n                    id=\"whatsappPhone\"\n                    type=\"tel\"\n                    value={whatsappData.whatsappPhone}\n                    onChange={(e) => setWhatsappData(prev => ({ ...prev, whatsappPhone: e.target.value }))}\n                    placeholder=\"+8801XXXXXXXXX\"\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Enter your WhatsApp number with country code (e.g., +8801712345678)\n                  </p>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"whatsappEnabled\"\n                    checked={whatsappData.whatsappEnabled}\n                    onChange={(e) => setWhatsappData(prev => ({ ...prev, whatsappEnabled: e.target.checked }))}\n                    className=\"h-4 w-4\"\n                  />\n                  <Label htmlFor=\"whatsappEnabled\">Enable WhatsApp Appointment Booking</Label>\n                </div>\n                \n                {whatsappData.whatsappEnabled && (\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-blue-900 mb-2\">How WhatsApp Booking Works:</h4>\n                    <ul className=\"text-sm text-blue-800 space-y-1\">\n                      <li>• Patients can text your WhatsApp number to book appointments</li>\n                      <li>• They need to provide: Name, Age, Gender, and Location</li>\n                      <li>• System automatically finds available slots based on your schedule</li>\n                      <li>• Patient receives appointment ID, date, and time confirmation</li>\n                      <li>• New appointments appear in your dashboard</li>\n                    </ul>\n                    {whatsappData.whatsappPhone && (\n                      <p className=\"mt-3 text-sm font-medium text-blue-900\">\n                        Your booking link: <code className=\"bg-white px-2 py-1 rounded\">\n                          https://wa.me/{whatsappData.whatsappPhone.replace(/[^\\d]/g, '')}?text=I%20want%20to%20book%20an%20appointment\n                        </code>\n                      </p>\n                    )}\n                  </div>\n                )}\n                \n                <div className=\"flex gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={onClose} className=\"flex-1\">\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1\"\n                    disabled={updateWhatsAppMutation.isPending}\n                  >\n                    {updateWhatsAppMutation.isPending ? 'Updating...' : 'Save Settings'}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5800},"client/src/contexts/LanguageContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\ninterface LanguageContextType {\n  language: 'en' | 'bn';\n  setLanguage: (lang: 'en' | 'bn') => void;\n  t: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\n// Translation dictionaries\nconst translations: Record<'en' | 'bn', Record<string, string>> = {\n  en: {\n    // Header and Navigation\n    'app.title': 'My Homeo Health',\n    'nav.dashboard': 'Dashboard',\n    'nav.patients': 'Patients',\n    'nav.medicines': 'Medicines',\n    'nav.appointments': 'Appointments',\n    'nav.prescriptions': 'Prescriptions',\n    'nav.profile': 'Profile',\n    'nav.logout': 'Logout',\n    'nav.calendar': 'Calendar',\n    'nav.notifications': 'Notifications',\n    'nav.admin': 'Admin Panel',\n    'nav.menu': 'Menu',\n    \n    // Profile Modal\n    'profile.title': 'Profile Settings',\n    'profile.subtitle': 'Manage your profile information and account settings',\n    'profile.tab.profile': 'Profile',\n    'profile.tab.edit': 'Edit',\n    'profile.tab.password': 'Password',\n    'profile.tab.language': 'Language',\n    'profile.tab.account': 'Account',\n    'profile.information': 'Profile Information',\n    'profile.user.details': 'User Details',\n    'profile.edit.profile': 'Edit Profile',\n    'profile.edit.information': 'Edit Profile Information',\n    'profile.fullname': 'Full Name',\n    'profile.username': 'Username',\n    'profile.email': 'Email',\n    'profile.phone': 'Phone',\n    'profile.role': 'Role',\n    'profile.clinic.name': 'Clinic Name',\n    'profile.clinic.location': 'Clinic Location',\n    'profile.degree': 'Degree',\n    'profile.specialization': 'Specialization',\n    'profile.not.provided': 'Not provided',\n    'profile.username.readonly': 'Username (Read-only)',\n    'profile.update': 'Update Profile',\n    'profile.updating': 'Updating...',\n    'profile.cancel': 'Cancel',\n    \n    // Password Tab\n    'password.change': 'Change Password',\n    'password.current': 'Current Password',\n    'password.new': 'New Password',\n    'password.confirm': 'Confirm New Password',\n    'password.current.placeholder': 'Enter current password',\n    'password.new.placeholder': 'Enter new password (min 6 chars)',\n    'password.confirm.placeholder': 'Confirm new password',\n    'password.update': 'Update Password',\n    \n    // Language Tab\n    'language.settings': 'Language Settings',\n    'language.select': 'Select Language',\n    'language.description': 'Choose your preferred language for the interface',\n    'language.english': 'English',\n    'language.bengali': 'Bengali',\n    'language.save': 'Save Language',\n    'language.saving': 'Saving...',\n    \n    // Account Tab\n    'account.actions': 'Account Actions',\n    'account.information': 'Account Information',\n    'account.name': 'Name',\n    'account.username': 'Username',\n    'account.role': 'Role',\n    'account.email': 'Email',\n    \n    // Dashboard\n    'dashboard.title': 'Dashboard',\n    'dashboard.admin': 'Admin Dashboard',\n    'dashboard.doctor': 'Doctor Dashboard',\n    'dashboard.overview': 'Today\\'s Overview',\n    'dashboard.stats.appointments': 'Today\\'s Appointments',\n    'dashboard.stats.patients': 'Total Patients',\n    'dashboard.stats.prescriptions': 'Prescriptions Today',\n    'dashboard.stats.pending': 'Pending',\n    \n    // Patients\n    'patients.title': 'Patients',\n    'patients.add': 'Add Patient',\n    'patients.edit': 'Edit Patient',\n    'patients.delete': 'Delete Patient',\n    'patients.view.details': 'View Details',\n    'patients.name': 'Patient Name',\n    'patients.age': 'Age',\n    'patients.gender': 'Gender',\n    'patients.phone': 'Phone',\n    'patients.location': 'Location',\n    'patients.address': 'Address',\n    'patients.male': 'Male',\n    'patients.female': 'Female',\n    'patients.other': 'Other',\n    'patients.created': 'Created',\n    'patients.total': 'Total Patients',\n    \n    // Medicines\n    'medicines.title': 'Medicines',\n    'medicines.add': 'Add Medicine',\n    'medicines.edit': 'Edit Medicine',\n    'medicines.delete': 'Delete Medicine',\n    'medicines.name': 'Medicine Name',\n    'medicines.power': 'Power',\n    'medicines.type': 'Type',\n    'medicines.manufacturer': 'Manufacturer',\n    'medicines.description': 'Description',\n    'medicines.dosage': 'Dosage',\n    'medicines.frequency': 'Frequency',\n    'medicines.duration': 'Duration',\n    'medicines.instructions': 'Instructions',\n    'medicines.stock': 'Stock',\n    'medicines.total': 'Total Medicines',\n    \n    // Appointments\n    'appointments.title': 'Appointments',\n    'appointments.book': 'Book Appointment',\n    'appointments.edit': 'Edit Appointment',\n    'appointments.cancel': 'Cancel Appointment',\n    'appointments.date': 'Date',\n    'appointments.time': 'Time',\n    'appointments.patient': 'Patient',\n    'appointments.doctor': 'Doctor',\n    'appointments.status': 'Status',\n    'appointments.notes': 'Notes',\n    'appointments.scheduled': 'Scheduled',\n    'appointments.completed': 'Completed',\n    'appointments.cancelled': 'Cancelled',\n    'appointments.today': 'Today\\'s Appointments',\n    'appointments.total': 'Total Appointments',\n    \n    // Prescriptions\n    'prescriptions.title': 'Prescriptions',\n    'prescriptions.add': 'Add Prescription',\n    'prescriptions.edit': 'Edit Prescription',\n    'prescriptions.view': 'View Prescription',\n    'prescriptions.print': 'Print Prescription',\n    'prescriptions.patient': 'Patient',\n    'prescriptions.doctor': 'Doctor',\n    'prescriptions.date': 'Date',\n    'prescriptions.medicines': 'Medicines',\n    'prescriptions.symptoms': 'Symptoms',\n    'prescriptions.diagnosis': 'Diagnosis',\n    'prescriptions.advice': 'Advice',\n    'prescriptions.followup': 'Follow-up',\n    'prescriptions.total': 'Total Prescriptions',\n    \n    // Forms\n    'form.required': 'Required field',\n    'form.invalid.email': 'Invalid email format',\n    'form.invalid.phone': 'Invalid phone number',\n    'form.password.mismatch': 'Passwords do not match',\n    'form.submit': 'Submit',\n    'form.reset': 'Reset',\n    'form.clear': 'Clear',\n    \n    // Common Actions\n    'action.add': 'Add',\n    'action.edit': 'Edit',\n    'action.delete': 'Delete',\n    'action.save': 'Save',\n    'action.cancel': 'Cancel',\n    'action.close': 'Close',\n    'action.view': 'View',\n    'action.back': 'Back',\n    'action.next': 'Next',\n    'action.previous': 'Previous',\n    'action.search': 'Search',\n    'action.filter': 'Filter',\n    'action.refresh': 'Refresh',\n    'action.print': 'Print',\n    'action.download': 'Download',\n    \n    // Additional specific translations for pages\n    'patients.search.placeholder': 'Search by name, ID, phone, or location...',\n    'prescriptions.search.placeholder': 'Search by patient name, ID, or prescription ID...',\n    'appointments.search.placeholder': 'Search by patient name or appointment ID...',\n    'no.data.found': 'No data found',\n    'try.different.search': 'Try adjusting your search terms',\n    'add.first.item': 'Add your first item to get started',\n    'filter.by.status': 'Filter by Status',\n    'mark.completed': 'Mark Completed',\n    'mark.cancelled': 'Mark Cancelled',\n    'view.prescriptions': 'View Prescriptions',\n    'prescription.id': 'Prescription ID',\n    'appointment.id': 'Appointment ID',\n    'patient.id': 'Patient ID',\n    'created.date': 'Created Date',\n    'date.time': 'Date & Time',\n    'upcoming': 'Upcoming',\n    'recent.patients': 'Recent Patients',\n    'registered': 'Registered',\n    'view.profile': 'View Profile',\n    'low.stock.medicines': 'Low Stock Medicines',\n    'update.stock': 'Update Stock',\n    'symptoms.breakdown': 'Symptoms Breakdown',\n    'patient.types': 'Patient Types',\n    'medicine.usage.volume': 'Medicine Usage Volume',\n    'new.patients.30.days': 'New Patients (30 days)',\n    'existing.patients': 'Existing Patients',\n\n    // Medicine Powers/Potencies (Homeopathic)\n    'medicine.power.3x': '3X',\n    'medicine.power.6x': '6X',\n    'medicine.power.12x': '12X',\n    'medicine.power.30': '30C',\n    'medicine.power.200': '200C',\n    'medicine.power.1m': '1M',\n    'medicine.power.10m': '10M',\n    'medicine.power.mother': 'Mother Tincture',\n    \n    // Common Symptoms\n    'symptom.fever': 'Fever',\n    'symptom.headache': 'Headache',\n    'symptom.cough': 'Cough',\n    'symptom.cold': 'Cold',\n    'symptom.nausea': 'Nausea',\n    'symptom.vomiting': 'Vomiting',\n    'symptom.diarrhea': 'Diarrhea',\n    'symptom.constipation': 'Constipation',\n    'symptom.stomach.pain': 'Stomach Pain',\n    'symptom.back.pain': 'Back Pain',\n    'symptom.joint.pain': 'Joint Pain',\n    'symptom.anxiety': 'Anxiety',\n    'symptom.depression': 'Depression',\n    'symptom.insomnia': 'Insomnia',\n    'symptom.fatigue': 'Fatigue',\n    \n    // Time Frequencies\n    'frequency.once.daily': 'Once daily',\n    'frequency.twice.daily': 'Twice daily',\n    'frequency.thrice.daily': 'Three times daily',\n    'frequency.four.times': 'Four times daily',\n    'frequency.every.4.hours': 'Every 4 hours',\n    'frequency.every.6.hours': 'Every 6 hours',\n    'frequency.every.8.hours': 'Every 8 hours',\n    'frequency.as.needed': 'As needed',\n    'frequency.before.meals': 'Before meals',\n    'frequency.after.meals': 'After meals',\n    \n    // Status\n    'status.active': 'Active',\n    'status.inactive': 'Inactive',\n    'status.pending': 'Pending',\n    'status.confirmed': 'Confirmed',\n    'status.completed': 'Completed',\n    'status.cancelled': 'Cancelled',\n    \n    // Messages\n    'message.loading': 'Loading...',\n    'message.saving': 'Saving...',\n    'message.success': 'Success',\n    'message.error': 'Error',\n    'message.no.data': 'No data available',\n    'message.no.results': 'No results found',\n    \n    // Admin Dashboard\n    'admin.dashboard': 'Admin Dashboard',\n    'admin.operations': 'Manage your clinic operations',\n    'admin.stats.doctors': 'Total Doctors',\n    'admin.stats.patients': 'Total Patients',\n    'admin.stats.medicines': 'Total Medicines',\n    'admin.stats.appointments': 'Total Appointments',\n    'admin.doctors.management': 'Doctors Management',\n    'admin.medicines.management': 'Medicines Management',\n    'admin.patients.overview': 'Patients Overview',\n    \n    // Buttons and Actions\n    'button.add': 'Add',\n    'button.edit': 'Edit', \n    'button.update': 'Update',\n    'button.delete': 'Delete',\n    'button.save': 'Save',\n    'button.cancel': 'Cancel',\n    'button.close': 'Close',\n    'button.submit': 'Submit',\n    'button.reset': 'Reset',\n    'button.clear': 'Clear',\n    'button.back': 'Back',\n    'button.next': 'Next',\n    'button.previous': 'Previous',\n    'button.continue': 'Continue',\n    'button.confirm': 'Confirm',\n    'button.upload': 'Upload',\n    'button.download': 'Download',\n    'button.export': 'Export',\n    'button.import': 'Import',\n    'button.print': 'Print',\n    'button.preview': 'Preview',\n    'button.view.details': 'View Details',\n    'button.discuss.ai': 'Discuss with AI',\n    'button.upload.list': 'Upload List',\n    'button.set.availability': 'Set Availability',\n    'button.whatsapp.booking': 'WhatsApp Booking',\n    \n    // Medicine specific\n    'medicine.code': 'Medicine Code',\n    'medicine.company': 'Company/Manufacturer',\n    'medicine.current.stock': 'Current Stock',\n    'medicine.low.stock.threshold': 'Low Stock Alert',\n    'medicine.low.stock': 'Low Stock',\n    'medicine.symptoms': 'Symptoms/Indications',\n    'medicine.used.for': 'Used for',\n    'medicine.no.medicines': 'No medicines yet',\n    'medicine.no.found': 'No medicines found',\n    'medicine.add.first': 'Add your first medicine to get started',\n    'medicine.try.different': 'Try adjusting your search terms',\n    'medicine.stock.info': 'Stock',\n    'medicine.alert.at': 'Alert at',\n    'medicine.update.stock': 'Update Stock',\n    'medicine.adding': 'Adding...',\n    'medicine.updating': 'Updating...',\n    'medicine.auto.generated': 'Auto-generated from medicine name or enter custom code',\n    'medicine.code.exists': 'This medicine code already exists. Please use a unique code.',\n    'medicine.dosage.instructions': 'Dosage Instructions',\n    'medicine.brief.description': 'Brief description of the medicine',\n    'medicine.what.symptoms': 'What symptoms or conditions this medicine is used for...',\n    \n    // Search and Filter\n    'search.placeholder': 'Search by name, code, company, or symptoms...',\n    'filter.low.stock': 'Show Low Stock Only',\n    'filter.all': 'Show All',\n    \n    // Upload functionality\n    'upload.title': 'Upload Medicine List',\n    'upload.formats': 'Supported formats: CSV, Excel (.xlsx, .xls), PDF',\n    'upload.drag.drop': 'Drag and drop your file here, or click to browse',\n    'upload.max.size': 'Maximum file size: 10MB',\n    'upload.select.file': 'Select File',\n    'upload.no.file': 'No file selected',\n    'upload.uploading': 'Uploading...',\n    'upload.medicines': 'Upload Medicines',\n    'upload.sample.format': 'Sample Format Guide',\n    'upload.csv.should': 'Your CSV/Excel file should contain columns',\n    'upload.pdf.format': 'For PDF files, ensure the text contains medicine information in a structured format',\n    'upload.results': 'Upload Results',\n    'upload.successful': 'Upload Successful',\n    'upload.failed': 'Upload Failed',\n    'upload.completed': 'Upload completed',\n    'upload.medicines.imported': 'medicines imported',\n    'upload.failed.count': 'failed',\n    \n    // Export functionality  \n    'export.low.stock.csv': 'Export to Excel',\n    'export.low.stock.pdf': 'Export to PDF', \n    'export.successful': 'Export Successful',\n    'export.no.data': 'No Data',\n    'export.no.low.stock': 'No low stock medicines to export',\n    'export.csv.description': 'Low stock medicines exported to CSV',\n    'export.pdf.description': 'Low stock medicines report opened for printing',\n    \n    // Dashboard specific\n    'dashboard.low.stock.medicines': 'Low Stock Medicines',\n    'dashboard.medicines.need.attention': 'medicines need attention',\n    'dashboard.view.all': 'View All',\n    'dashboard.no.low.stock': 'No medicines are running low on stock',\n    \n    // AI Discussion\n    'ai.discuss.title': 'Discuss with AI',\n    'ai.query.placeholder': 'Ask about medicine usage or get medicine recommendations for diseases',\n    'ai.query.example': 'e.g., \"What is Arnica Montana used for?\" or \"Medicines for fever and headache\"',\n    'ai.loading': 'Getting AI Response...',\n    'ai.ask': 'Ask AI',\n    'ai.response': 'AI Response:',\n    'ai.clear.ask.again': 'Clear & Ask Again',\n    'ai.service.unavailable': 'AI service temporarily unavailable',\n    'ai.try.again.later': 'Sorry, AI service is not available right now. Please try again later.',\n    \n    // Common\n    'common.loading': 'Loading...',\n    'common.error': 'Error',\n    'common.success': 'Success',\n    'common.close': 'Close',\n    'common.save': 'Save',\n    'common.edit': 'Edit',\n    'common.delete': 'Delete',\n    'common.add': 'Add',\n    'common.update': 'Update',\n    'common.cancel': 'Cancel',\n    'common.search': 'Search',\n    'common.filter': 'Filter',\n  },\n  bn: {\n    // Header and Navigation\n    'app.title': 'মাই হোমিও হেলথ',\n    'nav.dashboard': 'ড্যাশবোর্ড',\n    'nav.patients': 'রোগীরা',\n    'nav.medicines': 'ওষুধ',\n    'nav.appointments': 'অ্যাপয়েন্টমেন্ট',\n    'nav.prescriptions': 'প্রেসক্রিপশন',\n    'nav.profile': 'প্রোফাইল',\n    'nav.logout': 'লগআউট',\n    'nav.calendar': 'ক্যালেন্ডার',\n    'nav.notifications': 'বিজ্ঞপ্তি',\n    'nav.admin': 'অ্যাডমিন প্যানেল',\n    'nav.menu': 'মেনু',\n    \n    // Profile Modal\n    'profile.title': 'প্রোফাইল সেটিংস',\n    'profile.subtitle': 'আপনার প্রোফাইল তথ্য এবং অ্যাকাউন্ট সেটিংস পরিচালনা করুন',\n    'profile.tab.profile': 'প্রোফাইল',\n    'profile.tab.edit': 'সম্পাদনা',\n    'profile.tab.password': 'পাসওয়ার্ড',\n    'profile.tab.language': 'ভাষা',\n    'profile.tab.account': 'অ্যাকাউন্ট',\n    'profile.information': 'প্রোফাইল তথ্য',\n    'profile.user.details': 'ব্যবহারকারীর বিবরণ',\n    'profile.edit.profile': 'প্রোফাইল সম্পাদনা',\n    'profile.edit.information': 'প্রোফাইল তথ্য সম্পাদনা',\n    'profile.fullname': 'পূর্ণ নাম',\n    'profile.username': 'ব্যবহারকারীর নাম',\n    'profile.email': 'ইমেইল',\n    'profile.phone': 'ফোন',\n    'profile.role': 'ভূমিকা',\n    'profile.clinic.name': 'ক্লিনিকের নাম',\n    'profile.clinic.location': 'ক্লিনিকের অবস্থান',\n    'profile.degree': 'ডিগ্রি',\n    'profile.specialization': 'বিশেষত্ব',\n    'profile.not.provided': 'প্রদান করা হয়নি',\n    'profile.username.readonly': 'ব্যবহারকারীর নাম (শুধুমাত্র পঠনযোগ্য)',\n    'profile.update': 'প্রোফাইল আপডেট',\n    'profile.updating': 'আপডেট করা হচ্ছে...',\n    'profile.cancel': 'বাতিল',\n    \n    // Password Tab\n    'password.change': 'পাসওয়ার্ড পরিবর্তন',\n    'password.current': 'বর্তমান পাসওয়ার্ড',\n    'password.new': 'নতুন পাসওয়ার্ড',\n    'password.confirm': 'নতুন পাসওয়ার্ড নিশ্চিত করুন',\n    'password.current.placeholder': 'বর্তমান পাসওয়ার্ড লিখুন',\n    'password.new.placeholder': 'নতুন পাসওয়ার্ড লিখুন (কমপক্ষে ৬ অক্ষর)',\n    'password.confirm.placeholder': 'নতুন পাসওয়ার্ড নিশ্চিত করুন',\n    'password.update': 'পাসওয়ার্ড আপডেট',\n    \n    // Language Tab\n    'language.settings': 'ভাষা সেটিংস',\n    'language.select': 'ভাষা নির্বাচন',\n    'language.description': 'ইন্টারফেসের জন্য আপনার পছন্দের ভাষা বেছে নিন',\n    'language.english': 'ইংরেজি',\n    'language.bengali': 'বাংলা',\n    'language.save': 'ভাষা সংরক্ষণ',\n    'language.saving': 'সংরক্ষণ করা হচ্ছে...',\n    \n    // Account Tab\n    'account.actions': 'অ্যাকাউন্টের কার্যক্রম',\n    'account.information': 'অ্যাকাউন্টের তথ্য',\n    'account.name': 'নাম',\n    'account.username': 'ব্যবহারকারীর নাম',\n    'account.role': 'ভূমিকা',\n    'account.email': 'ইমেইল',\n    \n    // Dashboard\n    'dashboard.title': 'ড্যাশবোর্ড',\n    'dashboard.admin': 'অ্যাডমিন ড্যাশবোর্ড',\n    'dashboard.doctor': 'ডাক্তার ড্যাশবোর্ড',\n    'dashboard.overview': 'আজকের সংক্ষিপ্ত বিবরণ',\n    'dashboard.stats.appointments': 'আজকের অ্যাপয়েন্টমেন্ট',\n    'dashboard.stats.patients': 'মোট রোগী',\n    'dashboard.stats.prescriptions': 'আজকের প্রেসক্রিপশন',\n    'dashboard.stats.pending': 'অপেক্ষমাণ',\n    \n    // Patients\n    'patients.title': 'রোগীরা',\n    'patients.add': 'রোগী যোগ করুন',\n    'patients.edit': 'রোগীর তথ্য সম্পাদনা',\n    'patients.delete': 'রোগী মুছে ফেলুন',\n    'patients.view.details': 'বিস্তারিত দেখুন',\n    'patients.name': 'রোগীর নাম',\n    'patients.age': 'বয়স',\n    'patients.gender': 'লিঙ্গ',\n    'patients.phone': 'ফোন',\n    'patients.location': 'অবস্থান',\n    'patients.address': 'ঠিকানা',\n    'patients.male': 'পুরুষ',\n    'patients.female': 'মহিলা',\n    'patients.other': 'অন্যান্য',\n    'patients.created': 'তৈরি হয়েছে',\n    'patients.total': 'মোট রোগী',\n    \n    // Medicines\n    'medicines.title': 'ওষুধ',\n    'medicines.add': 'ওষুধ যোগ করুন',\n    'medicines.edit': 'ওষুধ সম্পাদনা',\n    'medicines.delete': 'ওষুধ মুছে ফেলুন',\n    'medicines.name': 'ওষুধের নাম',\n    'medicines.power': 'শক্তি',\n    'medicines.type': 'ধরন',\n    'medicines.manufacturer': 'প্রস্তুতকারক',\n    'medicines.description': 'বিবরণ',\n    'medicines.dosage': 'ডোজ',\n    'medicines.frequency': 'কত ঘণ্টা পর পর',\n    'medicines.duration': 'কতদিন',\n    'medicines.instructions': 'নির্দেশনা',\n    'medicines.stock': 'স্টক',\n    'medicines.total': 'মোট ওষুধ',\n    \n    // Appointments\n    'appointments.title': 'অ্যাপয়েন্টমেন্ট',\n    'appointments.book': 'অ্যাপয়েন্টমেন্ট বুক করুন',\n    'appointments.edit': 'অ্যাপয়েন্টমেন্ট সম্পাদনা',\n    'appointments.cancel': 'অ্যাপয়েন্টমেন্ট বাতিল',\n    'appointments.date': 'তারিখ',\n    'appointments.time': 'সময়',\n    'appointments.patient': 'রোগী',\n    'appointments.doctor': 'ডাক্তার',\n    'appointments.status': 'অবস্থা',\n    'appointments.notes': 'নোট',\n    'appointments.scheduled': 'নির্ধারিত',\n    'appointments.completed': 'সম্পন্ন',\n    'appointments.cancelled': 'বাতিল',\n    'appointments.today': 'আজকের অ্যাপয়েন্টমেন্ট',\n    'appointments.total': 'মোট অ্যাপয়েন্টমেন্ট',\n    \n    // Prescriptions\n    'prescriptions.title': 'প্রেসক্রিপশন',\n    'prescriptions.add': 'প্রেসক্রিপশন যোগ করুন',\n    'prescriptions.edit': 'প্রেসক্রিপশন সম্পাদনা',\n    'prescriptions.view': 'প্রেসক্রিপশন দেখুন',\n    'prescriptions.print': 'প্রেসক্রিপশন প্রিন্ট',\n    'prescriptions.patient': 'রোগী',\n    'prescriptions.doctor': 'ডাক্তার',\n    'prescriptions.date': 'তারিখ',\n    'prescriptions.medicines': 'ওষুধসমূহ',\n    'prescriptions.symptoms': 'লক্ষণসমূহ',\n    'prescriptions.diagnosis': 'রোগ নির্ণয়',\n    'prescriptions.advice': 'পরামর্শ',\n    'prescriptions.followup': 'ফলো-আপ',\n    'prescriptions.total': 'মোট প্রেসক্রিপশন',\n    \n    // Forms\n    'form.required': 'আবশ্যক ক্ষেত্র',\n    'form.invalid.email': 'ভুল ইমেইল ফরম্যাট',\n    'form.invalid.phone': 'ভুল ফোন নম্বর',\n    'form.password.mismatch': 'পাসওয়ার্ড মিলছে না',\n    'form.submit': 'জমা দিন',\n    'form.reset': 'রিসেট',\n    'form.clear': 'মুছে ফেলুন',\n    \n    // Common Actions\n    'action.add': 'যোগ করুন',\n    'action.edit': 'সম্পাদনা',\n    'action.delete': 'মুছে ফেলুন',\n    'action.save': 'সংরক্ষণ',\n    'action.cancel': 'বাতিল',\n    'action.close': 'বন্ধ',\n    'action.view': 'দেখুন',\n    'action.back': 'পিছনে',\n    'action.next': 'পরবর্তী',\n    'action.previous': 'পূর্ববর্তী',\n    'action.search': 'খুঁজুন',\n    'action.filter': 'ফিল্টার',\n    'action.refresh': 'রিফ্রেশ',\n    'action.print': 'প্রিন্ট',\n    'action.download': 'ডাউনলোড',\n    \n    // Additional specific translations for pages  \n    'patients.search.placeholder': 'নাম, আইডি, ফোন, বা অবস্থান দিয়ে খুঁজুন...',\n    'prescriptions.search.placeholder': 'রোগীর নাম, আইডি, বা প্রেসক্রিপশন আইডি দিয়ে খুঁজুন...',\n    'appointments.search.placeholder': 'রোগীর নাম বা অ্যাপয়েন্টমেন্ট আইডি দিয়ে খুঁজুন...',\n    'no.data.found': 'কোনো তথ্য পাওয়া যায়নি',\n    'try.different.search': 'অন্য শব্দ দিয়ে খুঁজে দেখুন',\n    'add.first.item': 'শুরু করতে প্রথম আইটেম যোগ করুন',\n    'filter.by.status': 'স্ট্যাটাস অনুযায়ী ফিল্টার',\n    'mark.completed': 'সম্পূর্ণ চিহ্নিত করুন',\n    'mark.cancelled': 'বাতিল চিহ্নিত করুন',\n    'view.prescriptions': 'প্রেসক্রিপশন দেখুন',\n    'prescription.id': 'প্রেসক্রিপশন আইডি',\n    'appointment.id': 'অ্যাপয়েন্টমেন্ট আইডি',\n    'patient.id': 'রোগীর আইডি',\n    'created.date': 'তৈরির তারিখ',\n    'date.time': 'তারিখ ও সময়',\n    'upcoming': 'আসন্ন',\n    'recent.patients': 'সাম্প্রতিক রোগীরা',\n    'registered': 'নিবন্ধিত',\n    'view.profile': 'প্রোফাইল দেখুন',\n    'low.stock.medicines': 'কম স্টকের ওষুধ',\n    'update.stock': 'স্টক আপডেট',\n    'symptoms.breakdown': 'লক্ষণের বিশ্লেষণ',\n    'patient.types': 'রোগীর ধরন',\n    'medicine.usage.volume': 'ওষুধ ব্যবহারের পরিমাণ',\n    'new.patients.30.days': 'নতুন রোগী (৩০ দিন)',\n    'existing.patients': 'বিদ্যমান রোগীরা',\n    \n    // Medicine Powers/Potencies (Homeopathic)\n    'medicine.power.3x': '৩এক্স',\n    'medicine.power.6x': '৬এক্স',\n    'medicine.power.12x': '১২এক্স',\n    'medicine.power.30': '৩০সি',\n    'medicine.power.200': '২০০সি',\n    'medicine.power.1m': '১এম',\n    'medicine.power.10m': '১০এম',\n    'medicine.power.mother': 'মাদার টিংচার',\n    \n    // Common Symptoms\n    'symptom.fever': 'জ্বর',\n    'symptom.headache': 'মাথাব্যথা',\n    'symptom.cough': 'কাশি',\n    'symptom.cold': 'সর্দি',\n    'symptom.nausea': 'বমি বমি ভাব',\n    'symptom.vomiting': 'বমি',\n    'symptom.diarrhea': 'ডায়রিয়া',\n    'symptom.constipation': 'কোষ্ঠকাঠিন্য',\n    'symptom.stomach.pain': 'পেট ব্যথা',\n    'symptom.back.pain': 'পিঠের ব্যথা',\n    'symptom.joint.pain': 'জয়েন্টের ব্যথা',\n    'symptom.anxiety': 'উদ্বেগ',\n    'symptom.depression': 'বিষাদ',\n    'symptom.insomnia': 'অনিদ্রা',\n    'symptom.fatigue': 'অবসাদ',\n    \n    // Time Frequencies\n    'frequency.once.daily': 'দিনে একবার',\n    'frequency.twice.daily': 'দিনে দুইবার',\n    'frequency.thrice.daily': 'দিনে তিনবার',\n    'frequency.four.times': 'দিনে চারবার',\n    'frequency.every.4.hours': 'প্রতি ৪ ঘণ্টায়',\n    'frequency.every.6.hours': 'প্রতি ৬ ঘণ্টায়',\n    'frequency.every.8.hours': 'প্রতি ৮ ঘণ্টায়',\n    'frequency.as.needed': 'প্রয়োজন অনুযায়ী',\n    'frequency.before.meals': 'খাবারের আগে',\n    'frequency.after.meals': 'খাবারের পরে',\n    \n    // Status\n    'status.active': 'সক্রিয়',\n    'status.inactive': 'নিষ্ক্রিয়',\n    'status.pending': 'অপেক্ষমাণ',\n    'status.confirmed': 'নিশ্চিত',\n    'status.completed': 'সম্পন্ন',\n    'status.cancelled': 'বাতিল',\n    \n    // Messages\n    'message.loading': 'লোড হচ্ছে...',\n    'message.saving': 'সংরক্ষণ করা হচ্ছে...',\n    'message.success': 'সফল',\n    'message.error': 'ত্রুটি',\n    'message.no.data': 'কোন তথ্য নেই',\n    'message.no.results': 'কোন ফলাফল পাওয়া যায়নি',\n    \n    // Admin Dashboard\n    'admin.dashboard': 'অ্যাডমিন ড্যাশবোর্ড',\n    'admin.operations': 'আপনার ক্লিনিক পরিচালনা করুন',\n    'admin.stats.doctors': 'মোট ডাক্তার',\n    'admin.stats.patients': 'মোট রোগী',\n    'admin.stats.medicines': 'মোট ওষুধ',\n    'admin.stats.appointments': 'মোট অ্যাপয়েন্টমেন্ট',\n    'admin.doctors.management': 'ডাক্তার পরিচালনা',\n    'admin.medicines.management': 'ওষুধ পরিচালনা',\n    'admin.patients.overview': 'রোগীদের সংক্ষিপ্ত বিবরণ',\n    \n    // Buttons and Actions\n    'button.add': 'যোগ করুন',\n    'button.edit': 'সম্পাদনা', \n    'button.update': 'আপডেট',\n    'button.delete': 'মুছে ফেলুন',\n    'button.save': 'সংরক্ষণ',\n    'button.cancel': 'বাতিল',\n    'button.close': 'বন্ধ',\n    'button.submit': 'জমা দিন',\n    'button.reset': 'রিসেট',\n    'button.clear': 'মুছে ফেলুন',\n    'button.back': 'পিছনে',\n    'button.next': 'পরবর্তী',\n    'button.previous': 'পূর্ববর্তী',\n    'button.continue': 'চালিয়ে যান',\n    'button.confirm': 'নিশ্চিত করুন',\n    'button.upload': 'আপলোড',\n    'button.download': 'ডাউনলোড',\n    'button.export': 'এক্সপোর্ট',\n    'button.import': 'ইমপোর্ট',\n    'button.print': 'প্রিন্ট',\n    'button.preview': 'প্রিভিউ',\n    'button.view.details': 'বিস্তারিত দেখুন',\n    'button.discuss.ai': 'AI এর সাথে আলোচনা',\n    'button.upload.list': 'তালিকা আপলোড',\n    'button.set.availability': 'সময়সূচী নির্ধারণ',\n    'button.whatsapp.booking': 'হোয়াটসঅ্যাপ বুকিং',\n    \n    // Medicine specific\n    'medicine.code': 'ওষুধের কোড',\n    'medicine.company': 'কোম্পানি/প্রস্তুতকারক',\n    'medicine.current.stock': 'বর্তমান স্টক',\n    'medicine.low.stock.threshold': 'কম স্টক সতর্কতা',\n    'medicine.low.stock': 'কম স্টক',\n    'medicine.symptoms': 'লক্ষণ/ইন্ডিকেশন',\n    'medicine.used.for': 'ব্যবহৃত হয়',\n    'medicine.no.medicines': 'এখনো কোনো ওষুধ নেই',\n    'medicine.no.found': 'কোনো ওষুধ পাওয়া যায়নি',\n    'medicine.add.first': 'শুরু করতে আপনার প্রথম ওষুধ যোগ করুন',\n    'medicine.try.different': 'আপনার অনুসন্ধানের শর্তাবলী সমন্বয় করার চেষ্টা করুন',\n    'medicine.stock.info': 'স্টক',\n    'medicine.alert.at': 'সতর্কতা',\n    'medicine.update.stock': 'স্টক আপডেট',\n    'medicine.adding': 'যোগ করা হচ্ছে...',\n    'medicine.updating': 'আপডেট হচ্ছে...',\n    'medicine.auto.generated': 'ওষুধের নাম থেকে স্বয়ংক্রিয় তৈরি বা কাস্টম কোড লিখুন',\n    'medicine.code.exists': 'এই ওষুধের কোড ইতিমধ্যে আছে। দয়া করে একটি অনন্য কোড ব্যবহার করুন।',\n    'medicine.dosage.instructions': 'ডোজের নির্দেশাবলী',\n    'medicine.brief.description': 'ওষুধের সংক্ষিপ্ত বিবরণ',\n    'medicine.what.symptoms': 'এই ওষুধটি কোন লক্ষণ বা অবস্থার জন্য ব্যবহৃত হয়...',\n    \n    // Search and Filter\n    'search.placeholder': 'নাম, কোড, কোম্পানি বা লক্ষণ দিয়ে খুঁজুন...',\n    'filter.low.stock': 'শুধুমাত্র কম স্টক দেখান',\n    'filter.all': 'সব দেখান',\n    \n    // Upload functionality\n    'upload.title': 'ওষুধের তালিকা আপলোড',\n    'upload.formats': 'সমর্থিত ফরম্যাট: CSV, Excel (.xlsx, .xls), PDF',\n    'upload.drag.drop': 'আপনার ফাইলটি এখানে টেনে এনে ছাড়ুন বা ব্রাউজ করতে ক্লিক করুন',\n    'upload.max.size': 'সর্বোচ্চ ফাইল সাইজ: ১০এমবি',\n    'upload.select.file': 'ফাইল নির্বাচন',\n    'upload.no.file': 'কোনো ফাইল নির্বাচিত হয়নি',\n    'upload.uploading': 'আপলোড হচ্ছে...',\n    'upload.medicines': 'ওষুধ আপলোড',\n    'upload.sample.format': 'নমুনা ফরম্যাট গাইড',\n    'upload.csv.should': 'আপনার CSV/Excel ফাইলে কলাম থাকা উচিত',\n    'upload.pdf.format': 'PDF ফাইলের জন্য, নিশ্চিত করুন যে টেক্সটে কাঠামোবদ্ধ ফরম্যাটে ওষুধের তথ্য রয়েছে',\n    'upload.results': 'আপলোডের ফলাফল',\n    'upload.successful': 'আপলোড সফল',\n    'upload.failed': 'আপলোড ব্যর্থ',\n    'upload.completed': 'আপলোড সম্পন্ন',\n    'upload.medicines.imported': 'ওষুধ ইমপোর্ট হয়েছে',\n    'upload.failed.count': 'ব্যর্থ',\n    \n    // Export functionality  \n    'export.low.stock.csv': 'এক্সেলে এক্সপোর্ট',\n    'export.low.stock.pdf': 'PDF এ এক্সপোর্ট', \n    'export.successful': 'এক্সপোর্ট সফল',\n    'export.no.data': 'কোনো ডেটা নেই',\n    'export.no.low.stock': 'এক্সপোর্ট করার জন্য কোনো কম স্টক ওষুধ নেই',\n    'export.csv.description': 'কম স্টক ওষুধ CSV তে এক্সপোর্ট হয়েছে',\n    'export.pdf.description': 'কম স্টক ওষুধের রিপোর্ট প্রিন্টের জন্য খোলা হয়েছে',\n    \n    // Dashboard specific\n    'dashboard.low.stock.medicines': 'কম স্টক ওষুধ',\n    'dashboard.medicines.need.attention': 'ওষুধের মনোযোগ প্রয়োজন',\n    'dashboard.view.all': 'সব দেখুন',\n    'dashboard.no.low.stock': 'কোনো ওষুধের স্টক কম নেই',\n    \n    // AI Discussion\n    'ai.discuss.title': 'AI এর সাথে আলোচনা',\n    'ai.query.placeholder': 'ওষুধের ব্যবহার সম্পর্কে জিজ্ঞাসা করুন বা রোগের জন্য ওষুধের সুপারিশ পান',\n    'ai.query.example': 'যেমন: \"আর্নিকা মন্টানা কি কাজে ব্যবহৃত হয়?\" বা \"জ্বর ও মাথাব্যথার জন্য ওষুধ\"',\n    'ai.loading': 'AI উত্তর পাওয়া হচ্ছে...',\n    'ai.ask': 'AI কে জিজ্ঞাসা করুন',\n    'ai.response': 'AI এর উত্তর:',\n    'ai.clear.ask.again': 'মুছে আবার জিজ্ঞাসা করুন',\n    'ai.service.unavailable': 'AI সেবা সাময়িকভাবে অনুপলব্ধ',\n    'ai.try.again.later': 'দুঃখিত, AI সেবা এখন উপলব্ধ নেই। দয়া করে পরে আবার চেষ্টা করুন।',\n    \n    // Common\n    'common.loading': 'লোড হচ্ছে...',\n    'common.error': 'ত্রুটি',\n    'common.success': 'সফল',\n    'common.close': 'বন্ধ',\n    'common.save': 'সংরক্ষণ',\n    'common.edit': 'সম্পাদনা',\n    'common.delete': 'মুছে ফেলুন',\n    'common.add': 'যোগ করুন',\n    'common.update': 'আপডেট',\n    'common.cancel': 'বাতিল',\n    'common.search': 'অনুসন্ধান',\n    'common.filter': 'ফিল্টার',\n    \n    // AI Discussion\n    'medicines.discuss.ai': 'AI এর সাথে আলোচনা',\n    'medicines.discuss.title': 'AI এর সাথে আলোচনা',\n    'medicines.discuss.query': 'ওষুধের ব্যবহার সম্পর্কে জিজ্ঞাসা করুন বা রোগের জন্য ওষুধের সুপারিশ পান',\n    'medicines.discuss.placeholder': 'যেমন: \"আর্নিকা মন্টানা কীসের জন্য ব্যবহৃত হয়?\" বা \"জ্বর এবং মাথাব্যথার জন্য ওষুধ\"',\n    'medicines.discuss.loading': 'AI উত্তর পাওয়া হচ্ছে...',\n    'medicines.discuss.ask': 'AI কে জিজ্ঞাসা করুন',\n    'medicines.discuss.response': 'AI উত্তর:',\n    'medicines.discuss.clear': 'পরিষ্কার করে আবার জিজ্ঞাসা করুন',\n  }\n};\n\nexport const LanguageProvider = ({ children }: { children: React.ReactNode }) => {\n  const [language, setLanguageState] = useState<'en' | 'bn'>('en');\n\n  // Load language preference from localStorage on mount\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem('app-language') as 'en' | 'bn';\n    if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'bn')) {\n      setLanguageState(savedLanguage);\n    }\n  }, []);\n\n  // Save language preference to localStorage\n  const setLanguage = (lang: 'en' | 'bn') => {\n    setLanguageState(lang);\n    localStorage.setItem('app-language', lang);\n  };\n\n  // Translation function\n  const t = (key: string): string => {\n    return translations[language][key as keyof (typeof translations)['en']] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\n// Data translation mapping for medical content\nconst dataTranslations: Record<string, string> = {\n  // Patient names (common Bengali names as examples)\n  'John Doe': 'রহিম উদ্দিন',\n  'Jane Smith': 'ফাতেমা খাতুন',\n  'Mike Johnson': 'করিম আহমেদ',\n  'Sarah Wilson': 'রাবেয়া বেগম',\n  'David Brown': 'আব্দুল কাদের',\n  \n  // Medicine names (homeopathic medicines with Bengali equivalents)\n  'Arnica Montana': 'আর্নিকা মন্টানা',\n  'Belladonna': 'বেলাডোনা',\n  'Pulsatilla': 'পালসেটিলা',\n  'Nux Vomica': 'নাক্স ভমিকা',\n  'Sulphur': 'সালফার',\n  'Lycopodium': 'লাইকোপোডিয়াম',\n  'Bryonia': 'ব্রায়োনিয়া',\n  'Rhus Tox': 'রাস টক্স',\n  'Sepia': 'সিপিয়া',\n  'Calcarea Carb': 'ক্যালকেরিয়া কার্ব',\n  \n  // Common symptoms and conditions\n  'fever': 'জ্বর',\n  'headache': 'মাথাব্যথা',\n  'cough': 'কাশি',\n  'cold': 'সর্দি',\n  'stomach pain': 'পেট ব্যথা',\n  'back pain': 'পিঠের ব্যথা',\n  'joint pain': 'জয়েন্টের ব্যথা',\n  'nausea': 'বমি বমি ভাব',\n  'vomiting': 'বমি',\n  'diarrhea': 'ডায়রিয়া',\n  'constipation': 'কোষ্ঠকাঠিন্য',\n  'anxiety': 'উদ্বেগ',\n  'depression': 'বিষাদ',\n  'insomnia': 'অনিদ্রা',\n  'fatigue': 'অবসাদ',\n  \n  // Dosage and frequency\n  'once daily': 'দিনে একবার',\n  'twice daily': 'দিনে দুইবার',\n  'three times daily': 'দিনে তিনবার',\n  'four times daily': 'দিনে চারবার',\n  'every 4 hours': 'প্রতি ৪ ঘণ্টায়',\n  'every 6 hours': 'প্রতি ৬ ঘণ্টায়',\n  'every 8 hours': 'প্রতি ৮ ঘণ্টায়',\n  'as needed': 'প্রয়োজন অনুযায়ী',\n  'before meals': 'খাবারের আগে',\n  'after meals': 'খাবারের পরে',\n  \n  // Gender\n  'Male': 'পুরুষ',\n  'Female': 'মহিলা',\n  'Other': 'অন্যান্য',\n  'male': 'পুরুষ',\n  'female': 'মহিলা',\n  'other': 'অন্যান্য',\n  \n  // Status\n  'Active': 'সক্রিয়',\n  'Inactive': 'নিষ্ক্রিয়',\n  'Pending': 'অপেক্ষমাণ',\n  'Confirmed': 'নিশ্চিত',\n  'Completed': 'সম্পন্ন',\n  'Cancelled': 'বাতিল',\n  'Scheduled': 'নির্ধারিত',\n  'active': 'সক্রিয়',\n  'inactive': 'নিষ্ক্রিয়',\n  'pending': 'অপেক্ষমাণ',\n  'confirmed': 'নিশ্চিত',\n  'completed': 'সম্পন্ন',\n  'cancelled': 'বাতিল',\n  'scheduled': 'নির্ধারিত',\n  \n  // Common locations (example Bengali locations)\n  'New York': 'ঢাকা',\n  'Los Angeles': 'চট্টগ্রাম',\n  'Chicago': 'সিলেট',\n  'Houston': 'রাজশাহী',\n  'Phoenix': 'খুলনা',\n  'Philadelphia': 'বরিশাল',\n  'San Antonio': 'রংপুর',\n  'San Diego': 'কুমিল্লা',\n  'Dallas': 'নারায়ণগঞ্জ',\n  'San Jose': 'গাজীপুর',\n  \n  // Medicine powers\n  '30C': '৩০সি',\n  '200C': '২০০সি',\n  '1M': '১এম',\n  '10M': '১০এম',\n  '3X': '৩এক্স',\n  '6X': '৬এক্স',\n  '12X': '১২এক্স',\n  'Mother Tincture': 'মাদার টিংচার',\n};\n\n// Function to translate data content\nconst translateData = (text: string, language: string): string => {\n  if (language === 'bn' && text && typeof text === 'string') {\n    // Check for exact matches first\n    if (dataTranslations[text]) {\n      return dataTranslations[text];\n    }\n    \n    // Check for partial matches (case insensitive)\n    const lowerText = text.toLowerCase();\n    for (const [english, bengali] of Object.entries(dataTranslations)) {\n      if (lowerText.includes(english.toLowerCase())) {\n        return text.replace(new RegExp(english, 'gi'), bengali);\n      }\n    }\n  }\n  \n  return text;\n};\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  \n  return {\n    ...context,\n    translateData: (text: string) => translateData(text, context.language)\n  };\n};","size_bytes":44787},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-notifications.tsx":{"content":"import { useState, useEffect } from 'react';\n\nexport interface NotificationPermission {\n  granted: boolean;\n  denied: boolean;\n  default: boolean;\n}\n\nexport interface PushSubscription {\n  endpoint: string;\n  keys: {\n    p256dh: string;\n    auth: string;\n  };\n}\n\nexport const useNotifications = () => {\n  const [permission, setPermission] = useState<NotificationPermission>({\n    granted: false,\n    denied: false,\n    default: true\n  });\n  const [subscription, setSubscription] = useState<PushSubscription | null>(null);\n  const [isSupported, setIsSupported] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    // Check if notifications are supported\n    const supported = 'Notification' in window && 'serviceWorker' in navigator && 'PushManager' in window;\n    setIsSupported(supported);\n\n    if (supported) {\n      // Get current permission status\n      const currentPermission = Notification.permission;\n      setPermission({\n        granted: currentPermission === 'granted',\n        denied: currentPermission === 'denied',\n        default: currentPermission === 'default'\n      });\n\n      // Get existing subscription\n      getExistingSubscription();\n    }\n  }, []);\n\n  const getExistingSubscription = async () => {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const existingSub = await registration.pushManager.getSubscription();\n      \n      if (existingSub) {\n        const subData = {\n          endpoint: existingSub.endpoint,\n          keys: {\n            p256dh: arrayBufferToBase64(existingSub.getKey('p256dh')),\n            auth: arrayBufferToBase64(existingSub.getKey('auth'))\n          }\n        };\n        setSubscription(subData);\n      }\n    } catch (error) {\n      console.error('Error getting existing subscription:', error);\n    }\n  };\n\n  const requestPermission = async (): Promise<boolean> => {\n    if (!isSupported) {\n      console.warn('Push notifications are not supported');\n      return false;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const result = await Notification.requestPermission();\n      \n      const newPermission = {\n        granted: result === 'granted',\n        denied: result === 'denied',\n        default: result === 'default'\n      };\n      \n      setPermission(newPermission);\n      setIsLoading(false);\n      \n      return result === 'granted';\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const subscribeToPush = async (): Promise<PushSubscription | null> => {\n    if (!permission.granted) {\n      const granted = await requestPermission();\n      if (!granted) return null;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // Register service worker\n      const registration = await navigator.serviceWorker.register('/sw.js');\n      await registration.update();\n      \n      // Wait for service worker to be ready\n      const readyRegistration = await navigator.serviceWorker.ready;\n      \n      // Subscribe to push notifications\n      const pushSubscription = await readyRegistration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(getVapidPublicKey())\n      });\n\n      const subData = {\n        endpoint: pushSubscription.endpoint,\n        keys: {\n          p256dh: arrayBufferToBase64(pushSubscription.getKey('p256dh')),\n          auth: arrayBufferToBase64(pushSubscription.getKey('auth'))\n        }\n      };\n\n      setSubscription(subData);\n      setIsLoading(false);\n\n      // Send subscription to server\n      await saveSubscriptionToServer(subData);\n      \n      return subData;\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n      setIsLoading(false);\n      return null;\n    }\n  };\n\n  const unsubscribeFromPush = async (): Promise<boolean> => {\n    if (!subscription) return true;\n\n    setIsLoading(true);\n\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const pushSubscription = await registration.pushManager.getSubscription();\n      \n      if (pushSubscription) {\n        await pushSubscription.unsubscribe();\n        await removeSubscriptionFromServer(subscription);\n      }\n      \n      setSubscription(null);\n      setIsLoading(false);\n      return true;\n    } catch (error) {\n      console.error('Error unsubscribing from push notifications:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const showTestNotification = async (title: string, body: string) => {\n    if (!permission.granted) return false;\n\n    try {\n      const notification = new Notification(title, {\n        body,\n        icon: '/icon-192x192.png',\n        badge: '/icon-72x72.png'\n      });\n      \n      // Use vibration API separately if available\n      if ('vibrate' in navigator) {\n        navigator.vibrate([200, 100, 200]);\n      }\n      return true;\n    } catch (error) {\n      console.error('Error showing test notification:', error);\n      return false;\n    }\n  };\n\n  return {\n    permission,\n    subscription,\n    isSupported,\n    isLoading,\n    requestPermission,\n    subscribeToPush,\n    unsubscribeFromPush,\n    showTestNotification\n  };\n};\n\n// Helper functions\nfunction arrayBufferToBase64(buffer: ArrayBuffer | null): string {\n  if (!buffer) return '';\n  const bytes = new Uint8Array(buffer);\n  let binary = '';\n  for (let i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n\nfunction urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nfunction getVapidPublicKey(): string {\n  // This should be your VAPID public key\n  // For demo purposes, using a placeholder - in production this should come from environment variables\n  return 'BFxrUzuS5YzP0R8K8qwYlqFrp-Q4jFkKbV7lQrKzOZqQYJUvKY8YqAeK2xZ7oK3p1QoP4Y2kZ8Y7J1QKzOZqQY';\n}\n\nasync function saveSubscriptionToServer(subscription: PushSubscription): Promise<void> {\n  try {\n    await fetch('/api/notifications/subscribe', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(subscription),\n    });\n  } catch (error) {\n    console.error('Error saving subscription to server:', error);\n  }\n}\n\nasync function removeSubscriptionFromServer(subscription: PushSubscription): Promise<void> {\n  try {\n    await fetch('/api/notifications/unsubscribe', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ endpoint: subscription.endpoint }),\n    });\n  } catch (error) {\n    console.error('Error removing subscription from server:', error);\n  }\n}","size_bytes":7050},"client/src/hooks/use-pwa.tsx":{"content":"import { useState, useEffect } from 'react';\n\ninterface PWAInstallPrompt {\n  prompt: () => void;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;\n}\n\nexport const usePWA = () => {\n  const [deferredPrompt, setDeferredPrompt] = useState<PWAInstallPrompt | null>(null);\n  const [isInstallable, setIsInstallable] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n\n  useEffect(() => {\n    // Check if app is already installed\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n    const isInWebAppiOS = (window.navigator as any).standalone === true;\n    setIsInstalled(isStandalone || isInWebAppiOS);\n\n    // Listen for beforeinstallprompt event\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      setDeferredPrompt(e as any);\n      setIsInstallable(true);\n    };\n\n    // Listen for app installed event\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setIsInstallable(false);\n      setDeferredPrompt(null);\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const installApp = async () => {\n    if (!deferredPrompt) return false;\n\n    deferredPrompt.prompt();\n    const choiceResult = await deferredPrompt.userChoice;\n    \n    if (choiceResult.outcome === 'accepted') {\n      setDeferredPrompt(null);\n      setIsInstallable(false);\n      return true;\n    }\n    \n    return false;\n  };\n\n  return {\n    isInstallable,\n    isInstalled,\n    installApp,\n  };\n};\n\nexport const useNetworkStatus = () => {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return isOnline;\n};\n\nexport const useHapticFeedback = () => {\n  const triggerHaptic = (pattern: number | number[] = 50) => {\n    if ('vibrate' in navigator) {\n      navigator.vibrate(pattern);\n    }\n  };\n\n  const lightTap = () => triggerHaptic(50);\n  const mediumTap = () => triggerHaptic(100);\n  const heavyTap = () => triggerHaptic(200);\n  const doubleTap = () => triggerHaptic([50, 50, 50]);\n\n  return {\n    triggerHaptic,\n    lightTap,\n    mediumTap,\n    heavyTap,\n    doubleTap,\n  };\n};\n","size_bytes":2760},"client/src/hooks/use-screen-size.tsx":{"content":"import { useState, useEffect } from 'react';\n\nexport type ScreenSize = 'mobile' | 'tablet' | 'desktop';\n\nexport const useScreenSize = () => {\n  const [screenSize, setScreenSize] = useState<ScreenSize>('mobile');\n\n  useEffect(() => {\n    const checkScreenSize = () => {\n      const width = window.innerWidth;\n      if (width < 768) {\n        setScreenSize('mobile');\n      } else if (width < 1024) {\n        setScreenSize('tablet');\n      } else {\n        setScreenSize('desktop');\n      }\n    };\n\n    checkScreenSize();\n    window.addEventListener('resize', checkScreenSize);\n    \n    return () => window.removeEventListener('resize', checkScreenSize);\n  }, []);\n\n  return {\n    screenSize,\n    isMobile: screenSize === 'mobile',\n    isTablet: screenSize === 'tablet',\n    isDesktop: screenSize === 'desktop',\n    isMobileOrTablet: screenSize === 'mobile' || screenSize === 'tablet'\n  };\n};","size_bytes":890},"client/src/hooks/use-swipe.ts":{"content":"import { useCallback, useEffect, useState } from 'react';\n\nexport function useCalendarSwipe(onSwipeLeft: () => void, onSwipeRight: () => void) {\n  let startX = 0;\n  let startY = 0;\n  let isMoving = false;\n\n  const handleTouchStart = useCallback((event: React.TouchEvent<HTMLDivElement>) => {\n    startX = event.touches[0].clientX;\n    startY = event.touches[0].clientY;\n    isMoving = false;\n  }, []);\n\n  const handleTouchMove = useCallback((event: React.TouchEvent<HTMLDivElement>) => {\n    if (!isMoving) {\n      const currentX = event.touches[0].clientX;\n      const currentY = event.touches[0].clientY;\n      const diffX = startX - currentX;\n      const diffY = startY - currentY;\n\n      // Only handle horizontal swipes (ignore vertical scrolling)\n      if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 10) {\n        isMoving = true;\n      }\n    }\n  }, []);\n\n  const handleTouchEnd = useCallback(() => {\n    if (isMoving) {\n      // Handle swipe logic here if needed\n      isMoving = false;\n    }\n  }, []);\n\n  return {\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd,\n  };\n}\n\nexport function usePullToRefresh(onRefresh: () => void) {\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [pullDistance, setPullDistance] = useState(0);\n  const [isPulling, setIsPulling] = useState(false);\n\n  let startY = 0;\n  let currentY = 0;\n\n  const handleTouchStart = useCallback((event: React.TouchEvent) => {\n    if (window.scrollY === 0) {\n      startY = event.touches[0].clientY;\n      setIsPulling(true);\n    }\n  }, []);\n\n  const handleTouchMove = useCallback((event: React.TouchEvent) => {\n    if (!isPulling) return;\n\n    currentY = event.touches[0].clientY;\n    const distance = Math.max(0, currentY - startY);\n    \n    if (distance > 0 && window.scrollY === 0) {\n      event.preventDefault();\n      setPullDistance(Math.min(distance * 0.5, 80));\n    }\n  }, [isPulling]);\n\n  const handleTouchEnd = useCallback(() => {\n    if (isPulling && pullDistance > 50) {\n      setIsRefreshing(true);\n      onRefresh();\n      setTimeout(() => {\n        setIsRefreshing(false);\n      }, 1000);\n    }\n    \n    setIsPulling(false);\n    setPullDistance(0);\n  }, [isPulling, pullDistance, onRefresh]);\n\n  return {\n    isRefreshing,\n    pullDistance,\n    isPulling,\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd,\n  };\n}","size_bytes":2432},"client/src/hooks/use-swipe.tsx":{"content":"import { useRef, useCallback } from 'react';\n\ninterface SwipeHandlers {\n  onSwipeLeft?: () => void;\n  onSwipeRight?: () => void;\n  onSwipeUp?: () => void;\n  onSwipeDown?: () => void;\n}\n\ninterface SwipeConfig {\n  minDistance?: number;\n  preventDefaultTouchmoveEvent?: boolean;\n}\n\nexport const useSwipeable = (\n  handlers: SwipeHandlers,\n  config: SwipeConfig = {}\n) => {\n  const { minDistance = 50, preventDefaultTouchmoveEvent = false } = config;\n  \n  const touchRef = useRef<{\n    startX: number;\n    startY: number;\n    deltaX: number;\n    deltaY: number;\n  }>({\n    startX: 0,\n    startY: 0,\n    deltaX: 0,\n    deltaY: 0,\n  });\n\n  const onTouchStart = useCallback((event: TouchEvent) => {\n    const touch = event.touches[0];\n    touchRef.current.startX = touch.clientX;\n    touchRef.current.startY = touch.clientY;\n    touchRef.current.deltaX = 0;\n    touchRef.current.deltaY = 0;\n  }, []);\n\n  const onTouchMove = useCallback((event: TouchEvent) => {\n    if (preventDefaultTouchmoveEvent) {\n      event.preventDefault();\n    }\n    \n    const touch = event.touches[0];\n    touchRef.current.deltaX = touch.clientX - touchRef.current.startX;\n    touchRef.current.deltaY = touch.clientY - touchRef.current.startY;\n  }, [preventDefaultTouchmoveEvent]);\n\n  const onTouchEnd = useCallback(() => {\n    const { deltaX, deltaY } = touchRef.current;\n    const absX = Math.abs(deltaX);\n    const absY = Math.abs(deltaY);\n\n    if (absX > minDistance || absY > minDistance) {\n      if (absX > absY) {\n        // Horizontal swipe\n        if (deltaX > 0) {\n          handlers.onSwipeRight?.();\n        } else {\n          handlers.onSwipeLeft?.();\n        }\n      } else {\n        // Vertical swipe\n        if (deltaY > 0) {\n          handlers.onSwipeDown?.();\n        } else {\n          handlers.onSwipeUp?.();\n        }\n      }\n    }\n  }, [handlers, minDistance]);\n\n  const swipeHandlers = {\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n  };\n\n  return swipeHandlers;\n};\n\nexport const useCalendarSwipe = (\n  onPrevious: () => void,\n  onNext: () => void\n) => {\n  return useSwipeable({\n    onSwipeLeft: onNext,\n    onSwipeRight: onPrevious,\n  }, {\n    minDistance: 50,\n    preventDefaultTouchmoveEvent: false,\n  });\n};\n\nexport const usePullToRefresh = (onRefresh: () => void) => {\n  const pullRef = useRef<{\n    startY: number;\n    currentY: number;\n    isPulling: boolean;\n  }>({\n    startY: 0,\n    currentY: 0,\n    isPulling: false,\n  });\n\n  const onTouchStart = useCallback((event: TouchEvent) => {\n    if (window.scrollY === 0) {\n      pullRef.current.startY = event.touches[0].clientY;\n      pullRef.current.isPulling = false;\n    }\n  }, []);\n\n  const onTouchMove = useCallback((event: TouchEvent) => {\n    if (window.scrollY === 0) {\n      pullRef.current.currentY = event.touches[0].clientY;\n      const diff = pullRef.current.currentY - pullRef.current.startY;\n      \n      if (diff > 100 && !pullRef.current.isPulling) {\n        pullRef.current.isPulling = true;\n        // Add visual feedback here\n      }\n    }\n  }, []);\n\n  const onTouchEnd = useCallback(() => {\n    if (pullRef.current.isPulling) {\n      pullRef.current.isPulling = false;\n      onRefresh();\n    }\n  }, [onRefresh]);\n\n  return {\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n  };\n};\n","size_bytes":3258},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport interface AuthUser extends Omit<User, 'password'> {}\n\nexport interface LoginResponse {\n  user: AuthUser;\n}\n\nexport const authApi = {\n  login: async (username: string, password: string): Promise<AuthUser> => {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n      username,\n      password,\n    });\n    const data: LoginResponse = await response.json();\n    return data.user;\n  },\n\n  logout: async (): Promise<void> => {\n    await apiRequest(\"POST\", \"/api/auth/logout\");\n  },\n\n  getCurrentUser: async (): Promise<AuthUser | null> => {\n    try {\n      const response = await apiRequest(\"GET\", \"/api/auth/me\");\n      const data: LoginResponse = await response.json();\n      return data.user;\n    } catch (error) {\n      return null;\n    }\n  },\n};\n\nexport const isAuthenticated = (): boolean => {\n  // This will be managed by the session on the server side\n  // The frontend will rely on API calls to determine auth status\n  return true; // Placeholder - actual auth state managed by React Query\n};\n\nexport const hasRole = (user: AuthUser | null, roles: string[]): boolean => {\n  if (!user || !user.role) return false;\n  return roles.includes(user.role);\n};\n\nexport const isDoctor = (user: AuthUser | null): boolean => {\n  return hasRole(user, ['doctor']);\n};\n\nexport const isAdmin = (user: AuthUser | null): boolean => {\n  return hasRole(user, ['admin']);\n};\n\nexport const isPatient = (user: AuthUser | null): boolean => {\n  return hasRole(user, ['patient']);\n};\n","size_bytes":1574},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, Stethoscope, Pill, Calendar, Edit, Trash2, Plus, Bot, FileImage } from \"lucide-react\";\nimport AdminTemplateManagement from \"@/components/AdminTemplateManagement\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst doctorFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  email: z.string().email().optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  clinicName: z.string().optional(),\n  clinicLocation: z.string().optional(),\n  degree: z.string().optional(),\n  specialist: z.string().optional(),\n});\n\ntype DoctorFormData = z.infer<typeof doctorFormSchema>;\n\nconst adminFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  email: z.string().email().optional().or(z.literal(\"\")),\n});\n\ntype AdminFormData = z.infer<typeof adminFormSchema>;\n\nconst medicineFormSchema = z.object({\n  name: z.string().min(1, \"Medicine name is required\"),\n  code: z.string().min(1, \"Medicine code is required\"),\n  description: z.string().optional(),\n  power: z.string().optional(),\n  dosage: z.string().optional(),\n  symptoms: z.string().optional(),\n});\n\ntype MedicineFormData = z.infer<typeof medicineFormSchema>;\n\nexport default function AdminDashboard() {\n  const isMobile = useIsMobile();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showAddDoctorModal, setShowAddDoctorModal] = useState(false);\n  const [showAddMedicineModal, setShowAddMedicineModal] = useState(false);\n\n  const [editingDoctor, setEditingDoctor] = useState<any>(null);\n  const [editingMedicine, setEditingMedicine] = useState<any>(null);\n  const [editingAdmin, setEditingAdmin] = useState<any>(null);\n\n  // Fetch dashboard statistics\n  const { data: stats } = useQuery({\n    queryKey: ['/api/admin/stats'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/stats', {\n        method: 'GET',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Stats API response:', data);\n      return data;\n    },\n    staleTime: 0,\n    gcTime: 0,\n  });\n\n  // Fetch all doctors\n  const { data: doctorsData, isLoading: isLoadingDoctors, error: doctorsError, refetch: refetchDoctors } = useQuery({\n    queryKey: ['/api/admin/doctors'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/doctors', {\n        method: 'GET',\n        credentials: 'include', // Important: include cookies for session\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    },\n    staleTime: 0, // Always fetch fresh data\n    gcTime: 0, // Don't cache\n  });\n  \n  // Ensure doctors is always an array\n  const doctors = Array.isArray(doctorsData) ? doctorsData : [];\n  \n  // Debug logging (can be removed in production)\n  // console.log('Doctors data:', { doctorsData, doctors, isLoadingDoctors, doctorsError });\n  \n  // Force refetch on mount\n  useEffect(() => {\n    refetchDoctors();\n  }, [refetchDoctors]);\n\n  // Fetch all medicines\n  const { data: medicinesData, isLoading: isLoadingMedicines, error: medicinesError } = useQuery({\n    queryKey: ['/api/medicines'],\n  });\n  \n  // Ensure medicines is always an array\n  const medicines = Array.isArray(medicinesData) ? medicinesData : [];\n\n  // Fetch all patients\n  const { data: patientsData, isLoading: isLoadingPatients, error: patientsError } = useQuery({\n    queryKey: ['/api/admin/patients'],\n    queryFn: () => apiRequest('GET', '/api/admin/patients'),\n  });\n  \n  // Ensure patients is always an array\n  const patients = Array.isArray(patientsData) ? patientsData : [];\n\n  // Fetch all admin users\n  const { data: adminsData, isLoading: isLoadingAdmins, error: adminsError } = useQuery({\n    queryKey: ['/api/admin/admins'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/admins', {\n        method: 'GET',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    },\n    staleTime: 0,\n    gcTime: 0,\n  });\n  \n  // Ensure admins is always an array\n  const admins = Array.isArray(adminsData) ? adminsData : [];\n  \n  // Debug logging for admin data\n  console.log('Admin Data Debug:', { \n    adminsData, \n    admins, \n    adminsLength: admins?.length, \n    isArray: Array.isArray(admins),\n    isLoadingAdmins, \n    adminsError \n  });\n\n  const doctorForm = useForm<DoctorFormData>({\n    resolver: zodResolver(doctorFormSchema),\n    defaultValues: {\n      name: \"\",\n      username: \"\",\n      password: \"\",\n      email: \"\",\n      phone: \"\",\n      clinicName: \"\",\n      clinicLocation: \"\",\n      degree: \"\",\n      specialist: \"\",\n    },\n  });\n\n  const medicineForm = useForm<MedicineFormData>({\n    resolver: zodResolver(medicineFormSchema),\n    defaultValues: {\n      name: \"\",\n      code: \"\",\n      description: \"\",\n      power: \"\",\n      dosage: \"\",\n      symptoms: \"\",\n    },\n  });\n\n  const adminForm = useForm<AdminFormData>({\n    resolver: zodResolver(adminFormSchema),\n    defaultValues: {\n      name: \"\",\n      username: \"\",\n      password: \"\",\n      email: \"\",\n    },\n  });\n\n  // State for admin management\n  const [showAddAdminModal, setShowAddAdminModal] = useState(false);\n\n  // Admin mutations\n  const addAdminMutation = useMutation({\n    mutationFn: (data: AdminFormData) => apiRequest('POST', '/api/admin/admins', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/admins'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      setShowAddAdminModal(false);\n      adminForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Admin user created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to create admin user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAdminMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<AdminFormData> }) =>\n      apiRequest('PUT', `/api/admin/admins/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/admins'] });\n      setEditingAdmin(null);\n      setShowAddAdminModal(false);\n      adminForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Admin user updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to update admin user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAdminMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/admin/admins/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/admins'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      toast({\n        title: \"Success\",\n        description: \"Admin user deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete admin user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addDoctorMutation = useMutation({\n    mutationFn: (data: DoctorFormData) => apiRequest('POST', '/api/admin/doctors', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/doctors'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      setShowAddDoctorModal(false);\n      doctorForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Doctor added successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add doctor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateDoctorMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<DoctorFormData> }) => \n      apiRequest('PATCH', `/api/admin/doctors/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/doctors'] });\n      setEditingDoctor(null);\n      toast({\n        title: \"Success\",\n        description: \"Doctor updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update doctor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDoctorMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/admin/doctors/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/doctors'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      toast({\n        title: \"Success\",\n        description: \"Doctor deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete doctor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleAIFeatureMutation = useMutation({\n    mutationFn: ({ id, enabled }: { id: string; enabled: boolean }) => \n      apiRequest('PATCH', `/api/admin/doctors/${id}/ai-feature`, { aiFeatureEnabled: enabled }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/doctors'] });\n      toast({\n        title: \"Success\",\n        description: \"AI feature setting updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update AI feature setting\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleDeletePermissionMutation = useMutation({\n    mutationFn: ({ id, enabled }: { id: string; enabled: boolean }) => \n      apiRequest('PATCH', `/api/admin/doctors/${id}/delete-permission`, { canDeletePatients: enabled }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/doctors'] });\n      toast({\n        title: \"Success\",\n        description: \"Delete permission updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update delete permission\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addMedicineMutation = useMutation({\n    mutationFn: (data: MedicineFormData) => apiRequest('POST', '/api/medicines', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/medicines'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      setShowAddMedicineModal(false);\n      medicineForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Medicine added successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add medicine\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMedicineMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<MedicineFormData> }) => \n      apiRequest('PATCH', `/api/medicines/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/medicines'] });\n      setEditingMedicine(null);\n      toast({\n        title: \"Success\",\n        description: \"Medicine updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update medicine\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMedicineMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/medicines/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/medicines'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      toast({\n        title: \"Success\",\n        description: \"Medicine deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete medicine\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitDoctor = (data: DoctorFormData) => {\n    if (editingDoctor) {\n      updateDoctorMutation.mutate({ id: editingDoctor.id, data });\n    } else {\n      // Add role as doctor for new users\n      addDoctorMutation.mutate({ ...data, role: 'doctor' } as any);\n    }\n  };\n\n  const onSubmitAdmin = (data: AdminFormData) => {\n    if (editingAdmin) {\n      updateAdminMutation.mutate({ id: editingAdmin.id, data });\n    } else {\n      // Add role as admin for new users\n      addAdminMutation.mutate({ ...data, role: 'admin' } as any);\n    }\n  };\n\n  const onSubmitMedicine = (data: MedicineFormData) => {\n    if (editingMedicine) {\n      updateMedicineMutation.mutate({ id: editingMedicine.id, data });\n    } else {\n      addMedicineMutation.mutate(data);\n    }\n  };\n\n  // Admin form submission removed - now handled via profile menu\n\n  const handleEditDoctor = (doctor: any) => {\n    setEditingDoctor(doctor);\n    doctorForm.reset({\n      name: doctor.name,\n      username: doctor.username,\n      password: \"\",\n      email: doctor.email || \"\",\n      phone: doctor.phone || \"\",\n      clinicName: doctor.clinicName || \"\",\n      clinicLocation: doctor.clinicLocation || \"\",\n      degree: doctor.degree || \"\",\n      specialist: doctor.specialist || \"\",\n    });\n    setShowAddDoctorModal(true);\n  };\n\n  const handleEditMedicine = (medicine: any) => {\n    setEditingMedicine(medicine);\n    medicineForm.reset({\n      name: medicine.name,\n      code: medicine.code,\n      description: medicine.description || \"\",\n      power: medicine.power || \"\",\n      dosage: medicine.dosage || \"\",\n      symptoms: medicine.symptoms || \"\",\n    });\n    setShowAddMedicineModal(true);\n  };\n\n  const handleDeleteDoctor = (doctor: any) => {\n    if (window.confirm(`Are you sure you want to delete Dr. ${doctor.name}? This will also delete all their patients and prescriptions.`)) {\n      deleteDoctorMutation.mutate(doctor.id);\n    }\n  };\n\n  const handleDeleteMedicine = (medicine: any) => {\n    if (window.confirm(`Are you sure you want to delete ${medicine.name}?`)) {\n      deleteMedicineMutation.mutate(medicine.id);\n    }\n  };\n\n  const handleEditAdmin = (admin: any) => {\n    setEditingAdmin(admin);\n    adminForm.reset({\n      name: admin.name,\n      username: admin.username,\n      password: \"\", // Password field left blank for security\n      email: admin.email || \"\",\n    });\n    setShowAddAdminModal(true);\n  };\n\n  const handleDeleteAdmin = (admin: any) => {\n    if (window.confirm(`Are you sure you want to delete admin user ${admin.name}? This action cannot be undone.`)) {\n      deleteAdminMutation.mutate(admin.id);\n    }\n  };\n\n  // Loading state\n  const isLoading = isLoadingDoctors || isLoadingMedicines || isLoadingPatients || isLoadingAdmins;\n\n  // Error handling\n  if (doctorsError || medicinesError || patientsError) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold mb-2\">Error loading admin data</h2>\n          <p className=\"text-muted-foreground mb-4\">\n            {doctorsError?.message || medicinesError?.message || patientsError?.message || 'Unknown error occurred'}\n          </p>\n          <Button onClick={() => window.location.reload()}>\n            Reload Page\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className={`${isMobile ? 'p-4 pb-20' : 'p-6'} space-y-6`}>\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {[1, 2, 3, 4].map(i => (\n                <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className={`${isMobile ? 'p-4 pb-20' : 'p-6'} space-y-6`}>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n            <p className=\"text-muted-foreground\">Manage your clinic operations</p>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Doctors</CardTitle>\n              <Stethoscope className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(stats as any)?.doctorsCount || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">Active medical professionals</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Patients</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(stats as any)?.patientsCount || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">Registered patients</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Medicines</CardTitle>\n              <Pill className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(stats as any)?.medicinesCount || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">Available medicines</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Appointments</CardTitle>\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(stats as any)?.appointmentsCount || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">Scheduled appointments</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Appointments by Doctor */}\n        {(stats as any)?.appointmentsByDoctor && (stats as any).appointmentsByDoctor.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Appointments by Doctor</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {(stats as any).appointmentsByDoctor.map((item: any) => (\n                  <div key={item.doctorName} className=\"flex items-center justify-between\">\n                    <span className=\"font-medium\">{item.doctorName}</span>\n                    <Badge variant=\"outline\">{item.count} appointments</Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Management Tabs */}\n        <Tabs defaultValue=\"doctors\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"doctors\">Doctors</TabsTrigger>\n            <TabsTrigger value=\"medicines\">Medicines</TabsTrigger>\n            <TabsTrigger value=\"patients\">Patients</TabsTrigger>\n            <TabsTrigger value=\"admins\">Admins</TabsTrigger>\n            <TabsTrigger value=\"templates\">Templates</TabsTrigger>\n          </TabsList>\n\n          {/* Doctors Tab */}\n          <TabsContent value=\"doctors\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Doctors Management</h2>\n              <Dialog open={showAddDoctorModal} onOpenChange={setShowAddDoctorModal}>\n                <DialogTrigger asChild>\n                  <Button \n                    onClick={() => {\n                      setEditingDoctor(null);\n                      doctorForm.reset();\n                    }}\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Doctor\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className={`${isMobile ? 'w-[95vw] max-h-[85vh] overflow-y-auto' : 'max-w-2xl'}`}>\n                  <DialogHeader>\n                    <DialogTitle>{editingDoctor ? 'Edit Doctor' : 'Add New Doctor'}</DialogTitle>\n                    <DialogDescription>\n                      {editingDoctor ? 'Update doctor information' : 'Create a new doctor account'}\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className={`${isMobile ? 'max-h-[65vh] overflow-y-auto' : ''}`}>\n                    <Form {...doctorForm}>\n                      <form onSubmit={doctorForm.handleSubmit(onSubmitDoctor)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={doctorForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Full Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Dr. John Doe\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={doctorForm.control}\n                          name=\"username\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Username</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"johndoe\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={doctorForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"Enter password\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={doctorForm.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Email (Optional)</FormLabel>\n                              <FormControl>\n                                <Input type=\"email\" placeholder=\"doctor@example.com\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={doctorForm.control}\n                          name=\"phone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Phone (Optional)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"+1234567890\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={doctorForm.control}\n                          name=\"clinicName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Clinic Name (Optional)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Medical Center\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={doctorForm.control}\n                          name=\"clinicLocation\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Clinic Location (Optional)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"City, State\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={doctorForm.control}\n                          name=\"degree\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Degree (Optional)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"BHMS, MD\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={doctorForm.control}\n                          name=\"specialist\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Specialization (Optional)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Homeopathic Specialist\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"flex justify-end space-x-2 pt-4\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setShowAddDoctorModal(false)}\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={addDoctorMutation.isPending || updateDoctorMutation.isPending}\n                        >\n                          {editingDoctor ? 'Update Doctor' : 'Add Doctor'}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <div className=\"grid gap-4\">\n              {isLoadingDoctors ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Loading doctors data...\n                </div>\n              ) : doctors.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No doctors found. Add your first doctor using the button above.\n                </div>\n              ) : (\n                doctors.map((doctor: any) => (\n                  <Card key={doctor.id}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <h3 className=\"font-semibold\">{doctor.name}</h3>\n                          <p className=\"text-sm text-muted-foreground\">@{doctor.username}</p>\n                          {doctor.specialist && (\n                            <p className=\"text-sm text-muted-foreground\">{doctor.specialist}</p>\n                          )}\n                          {doctor.clinicName && (\n                            <p className=\"text-sm text-muted-foreground\">{doctor.clinicName}</p>\n                          )}\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"flex flex-col space-y-2\">\n                            <Badge variant={doctor.isActive ? \"default\" : \"secondary\"}>\n                              {doctor.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                            <div className=\"flex items-center space-x-2\">\n                              <Bot className=\"h-4 w-4 text-muted-foreground\" />\n                              <Switch\n                                checked={doctor.aiFeatureEnabled !== false}\n                                onCheckedChange={(enabled) => \n                                  toggleAIFeatureMutation.mutate({ id: doctor.id, enabled })\n                                }\n                                disabled={toggleAIFeatureMutation.isPending}\n                              />\n                              <span className=\"text-xs text-muted-foreground\">\n                                AI {doctor.aiFeatureEnabled !== false ? \"On\" : \"Off\"}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Trash2 className=\"h-4 w-4 text-muted-foreground\" />\n                              <Switch\n                                checked={doctor.canDeletePatients !== false}\n                                onCheckedChange={(enabled) => \n                                  toggleDeletePermissionMutation.mutate({ id: doctor.id, enabled })\n                                }\n                                disabled={toggleDeletePermissionMutation.isPending}\n                              />\n                              <span className=\"text-xs text-muted-foreground\">\n                                Delete {doctor.canDeletePatients !== false ? \"On\" : \"Off\"}\n                              </span>\n                            </div>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => handleEditDoctor(doctor)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => handleDeleteDoctor(doctor)}\n                            className=\"text-destructive hover:text-destructive\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Medicines Tab */}\n          <TabsContent value=\"medicines\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Medicines Management</h2>\n              <Dialog open={showAddMedicineModal} onOpenChange={setShowAddMedicineModal}>\n                <DialogTrigger asChild>\n                  <Button \n                    onClick={() => {\n                      setEditingMedicine(null);\n                      medicineForm.reset();\n                    }}\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Medicine\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className={`${isMobile ? 'w-[95vw] max-h-[85vh] overflow-y-auto' : 'max-w-2xl'}`}>\n                  <DialogHeader>\n                    <DialogTitle>{editingMedicine ? 'Edit Medicine' : 'Add New Medicine'}</DialogTitle>\n                    <DialogDescription>\n                      {editingMedicine ? 'Update medicine information' : 'Add a new medicine to the database'}\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className={`${isMobile ? 'max-h-[65vh] overflow-y-auto' : ''}`}>\n                    <Form {...medicineForm}>\n                      <form onSubmit={medicineForm.handleSubmit(onSubmitMedicine)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={medicineForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Medicine Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Arnica Montana\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={medicineForm.control}\n                          name=\"code\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Medicine Code</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"ARN\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={medicineForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Medicine description\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={medicineForm.control}\n                          name=\"power\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Power (Optional)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"30, 200, 1M\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={medicineForm.control}\n                          name=\"dosage\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Dosage (Optional)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"3 times daily\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={medicineForm.control}\n                        name=\"symptoms\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Symptoms (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Fever, headache, body pain\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex justify-end space-x-2 pt-4\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setShowAddMedicineModal(false)}\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={addMedicineMutation.isPending || updateMedicineMutation.isPending}\n                        >\n                          {editingMedicine ? 'Update Medicine' : 'Add Medicine'}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <div className=\"grid gap-4\">\n              {isLoadingMedicines ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Loading medicines data...\n                </div>\n              ) : !medicines || medicines.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No medicines found. Add your first medicine using the button above.\n                </div>\n              ) : (\n                medicines.map((medicine: any) => (\n                <Card key={medicine.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-1\">\n                        <h3 className=\"font-semibold\">{medicine.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">Code: {medicine.code}</p>\n                        {medicine.power && (\n                          <p className=\"text-sm text-muted-foreground\">Power: {medicine.power}</p>\n                        )}\n                        {medicine.symptoms && (\n                          <p className=\"text-sm text-muted-foreground\">For: {medicine.symptoms}</p>\n                        )}\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => handleEditMedicine(medicine)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => handleDeleteMedicine(medicine)}\n                          className=\"text-destructive hover:text-destructive\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Patients Tab */}\n          <TabsContent value=\"patients\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Patients Management</h2>\n            </div>\n\n            <div className=\"grid gap-4\">\n              {isLoadingPatients ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Loading patients data...\n                </div>\n              ) : !patients || patients.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No patients found.\n                </div>\n              ) : (\n                patients.map((patient: any) => (\n                <Card key={patient.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-1\">\n                        <h3 className=\"font-semibold\">{patient.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">ID: {patient.patientId}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {patient.age} years, {patient.gender}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">Phone: {patient.phone}</p>\n                        {patient.doctorName && (\n                          <p className=\"text-sm text-muted-foreground\">Doctor: {patient.doctorName}</p>\n                        )}\n                      </div>\n                      <Badge variant=\"outline\">\n                        {patient.prescriptionCount || 0} prescriptions\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Admin Users Tab */}\n          <TabsContent value=\"admins\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Admin Users Management</h2>\n              <Button \n                onClick={() => {\n                  setEditingAdmin(null);\n                  adminForm.reset();\n                  setShowAddAdminModal(true);\n                }}\n                className=\"flex items-center gap-2\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                Add Admin User\n              </Button>\n            </div>\n            \n            <div className=\"text-sm text-muted-foreground mb-4\">\n              Manage system administrators (Note: Main 'admin' user cannot be deleted)\n            </div>\n\n            <div className=\"grid gap-4\">\n              {isLoadingAdmins ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Loading admin users...\n                </div>\n              ) : !admins || admins.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No admin users found.\n                </div>\n              ) : (\n                admins.map((admin: any) => (\n                <Card key={admin.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-1\">\n                        <h3 className=\"font-semibold\">{admin.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">Username: {admin.username}</p>\n                        {admin.email && (\n                          <p className=\"text-sm text-muted-foreground\">Email: {admin.email}</p>\n                        )}\n                        <p className=\"text-sm text-muted-foreground\">\n                          Created: {new Date(admin.createdAt).toLocaleDateString()}\n                        </p>\n                        <Badge variant={admin.isActive ? \"default\" : \"secondary\"}>\n                          {admin.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => handleEditAdmin(admin)}\n                          title=\"Edit admin user\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        {admin.username !== 'admin' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => handleDeleteAdmin(admin)}\n                            className=\"text-destructive hover:text-destructive\"\n                            title=\"Delete admin user\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Templates Tab */}\n          <TabsContent value=\"templates\">\n            <AdminTemplateManagement />\n          </TabsContent>\n        </Tabs>\n\n        {/* Admin Management Modal */}\n        <Dialog open={showAddAdminModal} onOpenChange={setShowAddAdminModal}>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingAdmin ? 'Edit Admin User' : 'Add New Admin User'}\n              </DialogTitle>\n              <DialogDescription>\n                {editingAdmin \n                  ? 'Update admin user information. Leave password blank to keep current password.'\n                  : 'Create a new admin user with access to system management.'\n                }\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"py-4\">\n              <Form {...adminForm}>\n                <form onSubmit={adminForm.handleSubmit(onSubmitAdmin)} className=\"space-y-4\">\n                  <FormField\n                    control={adminForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"John Doe\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={adminForm.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Username</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"johndoe\" \n                            {...field} \n                            disabled={editingAdmin?.username === 'admin'}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                        {editingAdmin?.username === 'admin' && (\n                          <p className=\"text-xs text-muted-foreground\">\n                            Main admin username cannot be changed\n                          </p>\n                        )}\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={adminForm.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          Password {editingAdmin && '(leave blank to keep current)'}\n                        </FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"password\" \n                            placeholder={editingAdmin ? \"Leave blank to keep current\" : \"Enter password\"} \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={adminForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email (Optional)</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"john@example.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setShowAddAdminModal(false)}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={addAdminMutation.isPending || updateAdminMutation.isPending}\n                    >\n                      {editingAdmin ? 'Update Admin' : 'Add Admin'}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":52333},"client/src/pages/AdminPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { BarChart3, Users, UserPlus, Pill, Calendar, FileText, Eye, Edit, Trash2, Settings } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AdminPageProps {\n  user: any;\n  onNavigate: (page: string) => void;\n}\n\nexport default function AdminPage({ user, onNavigate }: AdminPageProps) {\n  const [showAddDoctorModal, setShowAddDoctorModal] = useState(false);\n  const [selectedDoctor, setSelectedDoctor] = useState<any>(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [newDoctor, setNewDoctor] = useState({\n    username: \"\",\n    password: \"\",\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    clinicName: \"\",\n    clinicNameBengali: \"\",\n    clinicLocation: \"\",\n    clinicLocationBengali: \"\",\n    degree: \"\",\n    degreeBengali: \"\",\n    specialist: \"\",\n    specialistBengali: \"\",\n    extraNotes: \"\",\n    extraNotesBengali: \"\",\n    role: \"doctor\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: stats, isLoading: isLoadingStats } = useQuery({\n    queryKey: [\"/api/stats/dashboard\"],\n  });\n\n  const { data: doctors = [], isLoading: isLoadingDoctors } = useQuery({\n    queryKey: [\"/api/users/doctors\"],\n  });\n\n  const { data: patients = [] } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: appointments = [] } = useQuery({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: prescriptions = [] } = useQuery({\n    queryKey: [\"/api/prescriptions\"],\n  });\n\n  const { data: medicines = [] } = useQuery({\n    queryKey: [\"/api/medicines\"],\n  });\n\n  const createDoctorMutation = useMutation({\n    mutationFn: async (doctorData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/users\", doctorData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/doctors\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats/dashboard\"] });\n      toast({\n        title: \"Success\",\n        description: isEditing ? \"Doctor updated successfully\" : \"Doctor added successfully\",\n      });\n      setShowAddDoctorModal(false);\n      setIsEditing(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: isEditing ? \"Failed to update doctor\" : \"Failed to add doctor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateDoctorMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/users/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/doctors\"] });\n      toast({\n        title: \"Success\",\n        description: \"Doctor updated successfully\",\n      });\n      setSelectedDoctor(null);\n      setIsEditing(false);\n      setShowAddDoctorModal(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update doctor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setNewDoctor({\n      username: \"\",\n      password: \"\",\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      clinicName: \"\",\n      clinicNameBengali: \"\",\n      clinicLocation: \"\",\n      clinicLocationBengali: \"\",\n      degree: \"\",\n      degreeBengali: \"\",\n      specialist: \"\",\n      specialistBengali: \"\",\n      extraNotes: \"\",\n      extraNotesBengali: \"\",\n      role: \"doctor\",\n    });\n  };\n\n  const handleAddDoctor = () => {\n    if (!newDoctor.username.trim() || !newDoctor.password.trim() || !newDoctor.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in username, password, and name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (isEditing && selectedDoctor) {\n      updateDoctorMutation.mutate({\n        id: selectedDoctor.id,\n        updates: newDoctor\n      });\n    } else {\n      createDoctorMutation.mutate(newDoctor);\n    }\n  };\n\n  const handleEditDoctor = (doctor: any) => {\n    setSelectedDoctor(doctor);\n    setNewDoctor({\n      username: doctor.username || \"\",\n      password: \"\", // Don't pre-fill password for security\n      name: doctor.name || \"\",\n      email: doctor.email || \"\",\n      phone: doctor.phone || \"\",\n      clinicName: doctor.clinicName || \"\",\n      clinicNameBengali: doctor.clinicNameBengali || \"\",\n      clinicLocation: doctor.clinicLocation || \"\",\n      clinicLocationBengali: doctor.clinicLocationBengali || \"\",\n      degree: doctor.degree || \"\",\n      degreeBengali: doctor.degreeBengali || \"\",\n      specialist: doctor.specialist || \"\",\n      specialistBengali: doctor.specialistBengali || \"\",\n      extraNotes: doctor.extraNotes || \"\",\n      extraNotesBengali: doctor.extraNotesBengali || \"\",\n      role: \"doctor\",\n    });\n    setIsEditing(true);\n    setShowAddDoctorModal(true);\n  };\n\n  const handleDeleteDoctor = (doctor: any) => {\n    // In a real implementation, you'd show a confirmation dialog\n    // and implement a soft delete or deactivation\n    updateDoctorMutation.mutate({\n      id: doctor.id,\n      updates: { isActive: false }\n    });\n  };\n\n  // Get doctor-specific statistics\n  const getDoctorStats = (doctorId: string) => {\n    const doctorPatients = patients.filter((p: any) => p.doctorId === doctorId);\n    const doctorAppointments = appointments.filter((a: any) => a.doctorId === doctorId);\n    const doctorPrescriptions = prescriptions.filter((p: any) => p.doctorId === doctorId);\n    \n    return {\n      patients: doctorPatients.length,\n      appointments: doctorAppointments.length,\n      prescriptions: doctorPrescriptions.length,\n    };\n  };\n\n  const dashboardStats = [\n    {\n      title: \"Total Doctors\",\n      value: stats?.totalDoctors || 0,\n      icon: Users,\n      color: \"bg-primary bg-opacity-10 text-primary\",\n    },\n    {\n      title: \"Total Patients\",\n      value: stats?.totalPatients || 0,\n      icon: Users,\n      color: \"bg-secondary bg-opacity-10 text-secondary\",\n    },\n    {\n      title: \"Total Appointments\",\n      value: appointments.length,\n      icon: Calendar,\n      color: \"bg-accent bg-opacity-10 text-accent\",\n    },\n    {\n      title: \"Total Medicines\",\n      value: stats?.totalMedicines || 0,\n      icon: Pill,\n      color: \"bg-orange-500 bg-opacity-10 text-orange-500\",\n    },\n  ];\n\n  if (isLoadingStats || isLoadingDoctors) {\n    return (\n      <div className=\"p-4 space-y-4 pb-20\">\n        <div className=\"animate-pulse space-y-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <div key={i} className=\"bg-white rounded-xl p-4 shadow-sm border h-24\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pb-20\">\n      {/* Header */}\n      <div className=\"p-4 border-b bg-white sticky top-16 z-10\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-xl font-semibold text-neutral-800\">Admin Panel</h1>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => onNavigate('/admin/settings')}\n            className=\"touch-target\"\n          >\n            <Settings className=\"h-4 w-4 mr-2\" />\n            Settings\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <Tabs defaultValue=\"dashboard\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"dashboard\">Dashboard</TabsTrigger>\n            <TabsTrigger value=\"doctors\">Doctors</TabsTrigger>\n            <TabsTrigger value=\"system\">System</TabsTrigger>\n          </TabsList>\n          \n          {/* Dashboard Tab */}\n          <TabsContent value=\"dashboard\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              {dashboardStats.map((stat, index) => {\n                const Icon = stat.icon;\n                \n                return (\n                  <Card key={index} className=\"shadow-sm border border-neutral-200\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${stat.color}`}>\n                          <Icon size={20} />\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold text-neutral-800\">{stat.value}</p>\n                          <p className=\"text-sm text-neutral-500\">{stat.title}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Recent Activity */}\n            <Card className=\"shadow-sm border border-neutral-200\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">System Overview</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-neutral-600\">Active Doctors</span>\n                  <span className=\"font-semibold\">{doctors.filter((d: any) => d.isActive).length}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-neutral-600\">Total Prescriptions</span>\n                  <span className=\"font-semibold\">{prescriptions.length}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-neutral-600\">Available Medicines</span>\n                  <span className=\"font-semibold\">{medicines.length}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          {/* Doctors Tab */}\n          <TabsContent value=\"doctors\" className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-semibold text-neutral-800\">Doctor Management</h2>\n              <Button\n                size=\"sm\"\n                className=\"touch-target\"\n                onClick={() => {\n                  setIsEditing(false);\n                  resetForm();\n                  setShowAddDoctorModal(true);\n                }}\n              >\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Add Doctor\n              </Button>\n            </div>\n\n            <div className=\"space-y-3\">\n              {doctors.length === 0 ? (\n                <Card className=\"shadow-sm border border-neutral-200\">\n                  <CardContent className=\"p-8 text-center\">\n                    <Users className=\"h-16 w-16 text-neutral-300 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-neutral-800 mb-2\">No doctors registered</h3>\n                    <p className=\"text-neutral-500 mb-4\">Add your first doctor to get started</p>\n                    <Button onClick={() => setShowAddDoctorModal(true)}>\n                      <UserPlus className=\"h-4 w-4 mr-2\" />\n                      Add Doctor\n                    </Button>\n                  </CardContent>\n                </Card>\n              ) : (\n                doctors.map((doctor: any) => {\n                  const doctorStats = getDoctorStats(doctor.id);\n                  \n                  return (\n                    <Card key={doctor.id} className=\"shadow-sm border border-neutral-200 card-hover\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar className=\"w-12 h-12\">\n                              <AvatarFallback className=\"bg-gradient-to-br from-primary to-secondary text-white\">\n                                {doctor.name.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <h3 className=\"font-semibold text-neutral-800\">{doctor.name}</h3>\n                              <p className=\"text-sm text-neutral-500\">@{doctor.username}</p>\n                              {doctor.specialist && (\n                                <p className=\"text-xs text-neutral-400\">{doctor.specialist}</p>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => handleEditDoctor(doctor)}\n                              className=\"p-2\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => handleDeleteDoctor(doctor)}\n                              className=\"p-2 text-red-600 hover:text-red-700\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                          <div className=\"text-center\">\n                            <p className=\"font-semibold text-neutral-800\">{doctorStats.patients}</p>\n                            <p className=\"text-neutral-500\">Patients</p>\n                          </div>\n                          <div className=\"text-center\">\n                            <p className=\"font-semibold text-neutral-800\">{doctorStats.appointments}</p>\n                            <p className=\"text-neutral-500\">Appointments</p>\n                          </div>\n                          <div className=\"text-center\">\n                            <p className=\"font-semibold text-neutral-800\">{doctorStats.prescriptions}</p>\n                            <p className=\"text-neutral-500\">Prescriptions</p>\n                          </div>\n                        </div>\n\n                        <div className=\"flex space-x-2 mt-3\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1 touch-target\"\n                            onClick={() => setSelectedDoctor(doctor)}\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View Details\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </TabsContent>\n          \n          {/* System Tab */}\n          <TabsContent value=\"system\" className=\"space-y-4\">\n            <Card className=\"shadow-sm border border-neutral-200\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">System Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-sm space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-neutral-600\">Application Version:</span>\n                    <span className=\"font-medium\">1.0.0</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-neutral-600\">Database Status:</span>\n                    <span className=\"text-green-600 font-medium\">Connected</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-neutral-600\">Last Backup:</span>\n                    <span className=\"font-medium\">Never</span>\n                  </div>\n                </div>\n                \n                <div className=\"pt-4 border-t\">\n                  <Button variant=\"outline\" className=\"w-full touch-target mb-2\">\n                    Export Data\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full touch-target\">\n                    System Logs\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Add/Edit Doctor Modal */}\n      <Dialog open={showAddDoctorModal} onOpenChange={setShowAddDoctorModal}>\n        <DialogContent className=\"max-w-lg max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>{isEditing ? 'Edit Doctor' : 'Add New Doctor'}</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"username\">Username *</Label>\n                <Input\n                  id=\"username\"\n                  value={newDoctor.username}\n                  onChange={(e) => setNewDoctor({ ...newDoctor, username: e.target.value })}\n                  placeholder=\"Username for login\"\n                  className=\"form-input\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"password\">Password *</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={newDoctor.password}\n                  onChange={(e) => setNewDoctor({ ...newDoctor, password: e.target.value })}\n                  placeholder={isEditing ? \"Leave blank to keep current\" : \"Password\"}\n                  className=\"form-input\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"name\">Full Name *</Label>\n              <Input\n                id=\"name\"\n                value={newDoctor.name}\n                onChange={(e) => setNewDoctor({ ...newDoctor, name: e.target.value })}\n                placeholder=\"Dr. Full Name\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={newDoctor.email}\n                  onChange={(e) => setNewDoctor({ ...newDoctor, email: e.target.value })}\n                  placeholder=\"email@example.com\"\n                  className=\"form-input\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Phone</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={newDoctor.phone}\n                  onChange={(e) => setNewDoctor({ ...newDoctor, phone: e.target.value })}\n                  placeholder=\"Phone number\"\n                  className=\"form-input\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"clinicName\">Clinic Name</Label>\n              <Input\n                id=\"clinicName\"\n                value={newDoctor.clinicName}\n                onChange={(e) => setNewDoctor({ ...newDoctor, clinicName: e.target.value })}\n                placeholder=\"Clinic name in English\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"clinicNameBengali\">Clinic Name (Bengali)</Label>\n              <Input\n                id=\"clinicNameBengali\"\n                value={newDoctor.clinicNameBengali}\n                onChange={(e) => setNewDoctor({ ...newDoctor, clinicNameBengali: e.target.value })}\n                placeholder=\"ক্লিনিকের নাম বাংলায়\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"clinicLocation\">Location</Label>\n              <Input\n                id=\"clinicLocation\"\n                value={newDoctor.clinicLocation}\n                onChange={(e) => setNewDoctor({ ...newDoctor, clinicLocation: e.target.value })}\n                placeholder=\"Clinic location in English\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"degree\">Degree</Label>\n              <Input\n                id=\"degree\"\n                value={newDoctor.degree}\n                onChange={(e) => setNewDoctor({ ...newDoctor, degree: e.target.value })}\n                placeholder=\"e.g., BHMS, MD (Hom)\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"specialist\">Specialization</Label>\n              <Input\n                id=\"specialist\"\n                value={newDoctor.specialist}\n                onChange={(e) => setNewDoctor({ ...newDoctor, specialist: e.target.value })}\n                placeholder=\"Area of specialization\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => {\n                  setShowAddDoctorModal(false);\n                  setIsEditing(false);\n                  resetForm();\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                className=\"flex-1\"\n                onClick={handleAddDoctor}\n                disabled={createDoctorMutation.isPending || updateDoctorMutation.isPending}\n              >\n                {createDoctorMutation.isPending || updateDoctorMutation.isPending \n                  ? (isEditing ? \"Updating...\" : \"Adding...\") \n                  : (isEditing ? \"Update Doctor\" : \"Add Doctor\")\n                }\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Doctor Details Modal */}\n      <Dialog open={!!selectedDoctor && !isEditing} onOpenChange={() => setSelectedDoctor(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Doctor Details</DialogTitle>\n          </DialogHeader>\n          \n          {selectedDoctor && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <Avatar className=\"w-16 h-16\">\n                  <AvatarFallback className=\"bg-gradient-to-br from-primary to-secondary text-white text-lg\">\n                    {selectedDoctor.name.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <h3 className=\"text-lg font-semibold\">{selectedDoctor.name}</h3>\n                  <p className=\"text-neutral-600\">@{selectedDoctor.username}</p>\n                  {selectedDoctor.degree && (\n                    <p className=\"text-sm text-neutral-500\">{selectedDoctor.degree}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                {selectedDoctor.email && (\n                  <div>\n                    <span className=\"font-medium text-neutral-700\">Email:</span>\n                    <p>{selectedDoctor.email}</p>\n                  </div>\n                )}\n                {selectedDoctor.phone && (\n                  <div>\n                    <span className=\"font-medium text-neutral-700\">Phone:</span>\n                    <p>{selectedDoctor.phone}</p>\n                  </div>\n                )}\n                {selectedDoctor.clinicName && (\n                  <div className=\"col-span-2\">\n                    <span className=\"font-medium text-neutral-700\">Clinic:</span>\n                    <p>{selectedDoctor.clinicName}</p>\n                    {selectedDoctor.clinicLocation && (\n                      <p className=\"text-neutral-500\">{selectedDoctor.clinicLocation}</p>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {selectedDoctor.specialist && (\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Specialization:</span>\n                  <p className=\"text-sm mt-1\">{selectedDoctor.specialist}</p>\n                </div>\n              )}\n\n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setSelectedDoctor(null)}\n                >\n                  Close\n                </Button>\n                <Button\n                  className=\"flex-1\"\n                  onClick={() => handleEditDoctor(selectedDoctor)}\n                >\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit Doctor\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":25994},"client/src/pages/AdminSettingsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Settings, User, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AdminSettingsPageProps {\n  user: any;\n  onNavigate: (page: string) => void;\n}\n\nexport default function AdminSettingsPage({ user, onNavigate }: AdminSettingsPageProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: doctors = [], isLoading } = useQuery({\n    queryKey: [\"/api/users/doctors\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/users?role=doctor\");\n      if (!response.ok) throw new Error(\"Failed to fetch doctors\");\n      return response.json();\n    },\n  });\n\n  const updatePermissionMutation = useMutation({\n    mutationFn: async ({ userId, canDeletePatients }: { userId: string; canDeletePatients: boolean }) => {\n      const response = await apiRequest(\"PATCH\", `/api/users/${userId}/permissions`, {\n        canDeletePatients,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/doctors\"] });\n      toast({\n        title: \"Success\",\n        description: \"Doctor permissions updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update permissions\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePermissionChange = (doctorId: string, canDeletePatients: boolean) => {\n    updatePermissionMutation.mutate({ userId: doctorId, canDeletePatients });\n  };\n\n  if (user.role !== \"admin\") {\n    return (\n      <div className=\"p-4\">\n        <Card className=\"shadow-sm border border-neutral-200\">\n          <CardContent className=\"p-8 text-center\">\n            <Shield className=\"h-16 w-16 text-neutral-300 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-neutral-800 mb-2\">Access Denied</h3>\n            <p className=\"text-neutral-500\">Admin privileges required to access this page.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 space-y-4 pb-20\">\n        <div className=\"animate-pulse space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"bg-white rounded-xl p-4 shadow-sm border h-24\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pb-20\">\n      {/* Header */}\n      <div className=\"p-4 border-b bg-white sticky top-16 z-10\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h1 className=\"text-xl font-semibold text-neutral-800\">Admin Settings</h1>\n          <Settings className=\"h-6 w-6 text-neutral-600\" />\n        </div>\n      </div>\n\n      {/* Doctor Permissions */}\n      <div className=\"p-4 space-y-4\">\n        <Card className=\"shadow-sm border border-neutral-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <User className=\"h-5 w-5\" />\n              <span>Doctor Permissions</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {doctors.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <User className=\"h-12 w-12 text-neutral-300 mx-auto mb-4\" />\n                <p className=\"text-neutral-500\">No doctors found</p>\n              </div>\n            ) : (\n              doctors.map((doctor: any) => (\n                <div key={doctor.id} className=\"flex items-center justify-between p-4 bg-neutral-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarFallback className=\"bg-gradient-to-br from-primary to-secondary text-white\">\n                        {doctor.name.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"font-medium text-neutral-800\">{doctor.name}</h3>\n                      <p className=\"text-sm text-neutral-500\">{doctor.email || doctor.username}</p>\n                      {doctor.clinicName && (\n                        <p className=\"text-xs text-neutral-400\">{doctor.clinicName}</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Label htmlFor={`delete-permission-${doctor.id}`} className=\"text-sm font-medium\">\n                        Delete Patients\n                      </Label>\n                      <Switch\n                        id={`delete-permission-${doctor.id}`}\n                        checked={doctor.canDeletePatients || false}\n                        onCheckedChange={(checked) => handlePermissionChange(doctor.id, checked)}\n                        disabled={updatePermissionMutation.isPending}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-sm border border-neutral-200\">\n          <CardHeader>\n            <CardTitle>Permission Guide</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3 text-sm text-neutral-600\">\n            <div className=\"flex items-start space-x-2\">\n              <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n              <div>\n                <p className=\"font-medium\">Delete Patients Permission</p>\n                <p>Allows doctors to permanently delete patients from their patient list. This will also delete all associated prescriptions and appointments.</p>\n              </div>\n            </div>\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mt-4\">\n              <p className=\"text-yellow-800 text-sm\">\n                <strong>Warning:</strong> Patient deletion is permanent and cannot be undone. Only grant this permission to trusted doctors who understand the implications.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6726},"client/src/pages/AppointmentsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Plus, Calendar, Clock, CheckCircle, XCircle, Eye, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format, parseISO } from \"date-fns\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface AppointmentsPageProps {\n  user: any;\n  onNavigate: (page: string) => void;\n}\n\nexport default function AppointmentsPage({ user, onNavigate }: AppointmentsPageProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedAppointment, setSelectedAppointment] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { t, translateData } = useLanguage();\n\n  const { data: appointments = [], isLoading } = useQuery({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: patients = [] } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const updateAppointmentMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/appointments/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Appointment updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAppointmentMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/appointments/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Appointment deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Enrich appointments with patient data\n  const enrichedAppointments = appointments.map((appointment: any) => {\n    const patient = patients.find((p: any) => p.id === appointment.patientId);\n    return {\n      ...appointment,\n      patientName: patient?.name || 'Unknown Patient',\n      patientPhone: patient?.phone || '',\n      patientAge: patient?.age || '',\n      patientGender: patient?.gender || '',\n      patientId: patient?.patientId || 'N/A',\n    };\n  });\n\n  // Filter appointments\n  const filteredAppointments = enrichedAppointments.filter((appointment: any) => {\n    const matchesSearch = \n      appointment.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      appointment.patientId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      appointment.appointmentId.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || appointment.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  // Group appointments by status\n  const upcomingAppointments = filteredAppointments.filter((apt: any) => apt.status === \"upcoming\");\n  const completedAppointments = filteredAppointments.filter((apt: any) => apt.status === \"completed\");\n  const cancelledAppointments = filteredAppointments.filter((apt: any) => apt.status === \"cancelled\");\n\n  const handleStatusUpdate = (appointmentId: string, newStatus: string) => {\n    updateAppointmentMutation.mutate({\n      id: appointmentId,\n      updates: { status: newStatus }\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'upcoming':\n        return 'bg-orange-100 text-orange-600';\n      case 'completed':\n        return 'bg-green-100 text-green-600';\n      case 'cancelled':\n        return 'bg-red-100 text-red-600';\n      default:\n        return 'bg-neutral-100 text-neutral-600';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'upcoming':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'cancelled':\n        return <XCircle className=\"h-4 w-4\" />;\n      default:\n        return <Calendar className=\"h-4 w-4\" />;\n    }\n  };\n\n  const AppointmentCard = ({ appointment }: { appointment: any }) => (\n    <Card className=\"shadow-sm border border-neutral-200 card-hover\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"w-12 h-12\">\n              <AvatarFallback className=\"bg-gradient-to-br from-primary to-secondary text-white\">\n                {appointment.patientName.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <h3 className=\"font-semibold text-neutral-800\">{appointment.patientName}</h3>\n              <p className=\"text-sm text-neutral-500\">\n                {appointment.patientGender}, {appointment.patientAge} • {appointment.patientId}\n              </p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm font-medium text-neutral-700\">\n              {format(parseISO(appointment.dateTime), 'h:mm a')}\n            </p>\n            <p className=\"text-xs text-neutral-500\">\n              {format(parseISO(appointment.dateTime), 'MMM d, yyyy')}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between mb-3\">\n          <span className={`inline-flex items-center space-x-1 px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(appointment.status)}`}>\n            {getStatusIcon(appointment.status)}\n            <span className=\"capitalize\">{appointment.status}</span>\n          </span>\n          <span className=\"text-xs text-neutral-500\">ID: {appointment.appointmentId}</span>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"flex-1 touch-target\"\n            onClick={() => setSelectedAppointment(appointment)}\n          >\n            <Eye className=\"h-4 w-4 mr-1\" />\n{t('view.details')}\n          </Button>\n          {appointment.status === 'upcoming' && (\n            <Button\n              size=\"sm\"\n              className=\"flex-1 touch-target\"\n              onClick={() => handleStatusUpdate(appointment.id, 'completed')}\n              disabled={updateAppointmentMutation.isPending}\n            >\n              {t('mark.complete')}\n            </Button>\n          )}\n          {user?.canDeletePatients && (\n            <Button\n              size=\"sm\"\n              variant=\"destructive\"\n              className=\"touch-target\"\n              onClick={() => {\n                if (window.confirm(`Are you sure you want to delete this appointment? This action cannot be undone.`)) {\n                  deleteAppointmentMutation.mutate(appointment.id);\n                }\n              }}\n              disabled={deleteAppointmentMutation.isPending}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 space-y-4 pb-20\">\n        <div className=\"animate-pulse space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"bg-white rounded-xl p-4 shadow-sm border h-32\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pb-20\">\n      {/* Header */}\n      <div className=\"p-4 border-b bg-white sticky top-16 z-10\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h1 className=\"text-xl font-semibold text-neutral-800\">{t('appointments.title')}</h1>\n          <Button\n            size=\"sm\"\n            className=\"touch-target\"\n            onClick={() => onNavigate('calendar')}\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n{t('appointments.book')}\n          </Button>\n        </div>\n        \n        {/* Search and Filter */}\n        <div className=\"space-y-3\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-neutral-400 h-4 w-4\" />\n            <Input\n              placeholder={t('appointments.search.placeholder')}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 form-input\"\n            />\n          </div>\n          \n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger>\n              <SelectValue placeholder={t('filter.by.status')} />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">{t('appointments.all')}</SelectItem>\n              <SelectItem value=\"upcoming\">{t('appointments.upcoming')}</SelectItem>\n              <SelectItem value=\"completed\">{t('appointments.completed')}</SelectItem>\n              <SelectItem value=\"cancelled\">{t('appointments.cancelled')}</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Appointments List */}\n      <div className=\"p-4\">\n        <Tabs defaultValue=\"all\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"all\">All ({filteredAppointments.length})</TabsTrigger>\n            <TabsTrigger value=\"upcoming\">Upcoming ({upcomingAppointments.length})</TabsTrigger>\n            <TabsTrigger value=\"completed\">Done ({completedAppointments.length})</TabsTrigger>\n            <TabsTrigger value=\"cancelled\">Cancelled ({cancelledAppointments.length})</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"all\" className=\"space-y-3\">\n            {filteredAppointments.length === 0 ? (\n              <Card className=\"shadow-sm border border-neutral-200\">\n                <CardContent className=\"p-8 text-center\">\n                  <Calendar className=\"h-16 w-16 text-neutral-300 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-neutral-800 mb-2\">{t('no.data.found')}</h3>\n                  <p className=\"text-neutral-500 mb-4\">\n{searchTerm ? t('try.different.search') : t('no.appointments.scheduled')}\n                  </p>\n                  <Button onClick={() => onNavigate('calendar')}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n{t('appointments.book')}\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              filteredAppointments\n                .sort((a: any, b: any) => new Date(b.dateTime).getTime() - new Date(a.dateTime).getTime())\n                .map((appointment: any) => (\n                  <AppointmentCard key={appointment.id} appointment={appointment} />\n                ))\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"upcoming\" className=\"space-y-3\">\n            {upcomingAppointments.length === 0 ? (\n              <Card className=\"shadow-sm border border-neutral-200\">\n                <CardContent className=\"p-8 text-center\">\n                  <Clock className=\"h-16 w-16 text-neutral-300 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-neutral-800 mb-2\">No upcoming appointments</h3>\n                  <p className=\"text-neutral-500\">All caught up!</p>\n                </CardContent>\n              </Card>\n            ) : (\n              upcomingAppointments\n                .sort((a: any, b: any) => new Date(a.dateTime).getTime() - new Date(b.dateTime).getTime())\n                .map((appointment: any) => (\n                  <AppointmentCard key={appointment.id} appointment={appointment} />\n                ))\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"completed\" className=\"space-y-3\">\n            {completedAppointments.length === 0 ? (\n              <Card className=\"shadow-sm border border-neutral-200\">\n                <CardContent className=\"p-8 text-center\">\n                  <CheckCircle className=\"h-16 w-16 text-neutral-300 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-neutral-800 mb-2\">No completed appointments</h3>\n                  <p className=\"text-neutral-500\">Completed appointments will appear here</p>\n                </CardContent>\n              </Card>\n            ) : (\n              completedAppointments\n                .sort((a: any, b: any) => new Date(b.dateTime).getTime() - new Date(a.dateTime).getTime())\n                .map((appointment: any) => (\n                  <AppointmentCard key={appointment.id} appointment={appointment} />\n                ))\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"cancelled\" className=\"space-y-3\">\n            {cancelledAppointments.length === 0 ? (\n              <Card className=\"shadow-sm border border-neutral-200\">\n                <CardContent className=\"p-8 text-center\">\n                  <XCircle className=\"h-16 w-16 text-neutral-300 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-neutral-800 mb-2\">No cancelled appointments</h3>\n                  <p className=\"text-neutral-500\">Cancelled appointments will appear here</p>\n                </CardContent>\n              </Card>\n            ) : (\n              cancelledAppointments\n                .sort((a: any, b: any) => new Date(b.dateTime).getTime() - new Date(a.dateTime).getTime())\n                .map((appointment: any) => (\n                  <AppointmentCard key={appointment.id} appointment={appointment} />\n                ))\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Appointment Details Modal */}\n      <Dialog open={!!selectedAppointment} onOpenChange={() => setSelectedAppointment(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Appointment Details</DialogTitle>\n          </DialogHeader>\n          \n          {selectedAppointment && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <Avatar className=\"w-16 h-16\">\n                  <AvatarFallback className=\"bg-gradient-to-br from-primary to-secondary text-white text-lg\">\n                    {selectedAppointment.patientName.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <h3 className=\"text-lg font-semibold\">{selectedAppointment.patientName}</h3>\n                  <p className=\"text-neutral-600\">Patient ID: {selectedAppointment.patientId}</p>\n                  <p className=\"text-sm text-neutral-500\">\n                    {selectedAppointment.patientGender}, {selectedAppointment.patientAge} years\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Appointment ID:</span>\n                  <p>{selectedAppointment.appointmentId}</p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Status:</span>\n                  <span className={`inline-flex items-center space-x-1 px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(selectedAppointment.status)}`}>\n                    {getStatusIcon(selectedAppointment.status)}\n                    <span className=\"capitalize\">{selectedAppointment.status}</span>\n                  </span>\n                </div>\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Date:</span>\n                  <p>{format(parseISO(selectedAppointment.dateTime), 'EEEE, MMMM d, yyyy')}</p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Time:</span>\n                  <p>{format(parseISO(selectedAppointment.dateTime), 'h:mm a')}</p>\n                </div>\n              </div>\n\n              {selectedAppointment.notes && (\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Notes:</span>\n                  <p className=\"text-sm mt-1\">{selectedAppointment.notes}</p>\n                </div>\n              )}\n\n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setSelectedAppointment(null)}\n                >\n                  Close\n                </Button>\n                {selectedAppointment.status === 'upcoming' && (\n                  <Button\n                    className=\"flex-1\"\n                    onClick={() => {\n                      handleStatusUpdate(selectedAppointment.id, 'completed');\n                      setSelectedAppointment(null);\n                    }}\n                    disabled={updateAppointmentMutation.isPending}\n                  >\n                    Mark Complete\n                  </Button>\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":18121},"client/src/pages/CalendarPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport MobileCalendar from \"@/components/mobile/MobileCalendar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface CalendarPageProps {\n  user: any;\n}\n\nexport default function CalendarPage({ user }: CalendarPageProps) {\n  const [selectedSlot, setSelectedSlot] = useState<{ date: Date; time: string } | null>(null);\n  const [selectedPatient, setSelectedPatient] = useState<string>(\"\");\n  const [patientType, setPatientType] = useState<\"existing\" | \"new\">(\"existing\");\n  const [newPatientData, setNewPatientData] = useState({\n    name: \"\",\n    age: \"\",\n    location: \"\",\n    gender: \"\",\n    phone: \"\"\n  });\n  const [patientSearchQuery, setPatientSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: appointments = [], isLoading: isLoadingAppointments } = useQuery({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: patients = [], isLoading: isLoadingPatients } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const createPatientMutation = useMutation({\n    mutationFn: async (patientData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/patients\", patientData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n    },\n  });\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (appointmentData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/appointments\", appointmentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Appointment booked successfully\",\n      });\n      setSelectedSlot(null);\n      setSelectedPatient(\"\");\n      setNewPatientData({ name: \"\", age: \"\", location: \"\", gender: \"\", phone: \"\" });\n      setPatientSearchQuery(\"\");\n      setPatientType(\"existing\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to book appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSlotSelect = (date: Date, time: string) => {\n    setSelectedSlot({ date, time });\n  };\n\n  const handleAppointmentClick = (appointment: any) => {\n    // Navigate to appointment details or patient profile\n    console.log(\"Appointment clicked:\", appointment);\n  };\n\n  const handleBookAppointment = async () => {\n    if (!selectedSlot) return;\n\n    let patientId = selectedPatient;\n\n    // If booking for a new patient, create the patient first\n    if (patientType === \"new\") {\n      if (!newPatientData.name || !newPatientData.age || !newPatientData.gender) {\n        toast({\n          title: \"Error\",\n          description: \"Please fill in all required fields for the new patient\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      try {\n        const newPatient = await createPatientMutation.mutateAsync({\n          name: newPatientData.name,\n          age: parseInt(newPatientData.age),\n          gender: newPatientData.gender,\n          location: newPatientData.location,\n          phone: newPatientData.phone,\n          doctorId: user.id,\n        });\n        patientId = newPatient.id;\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create new patient\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    } else {\n      if (!selectedPatient) {\n        toast({\n          title: \"Error\",\n          description: \"Please select a patient\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    const [time, period] = selectedSlot.time.split(' ');\n    const [hours, minutes] = time.split(':');\n    let hour24 = parseInt(hours);\n    \n    if (period === 'PM' && hour24 !== 12) {\n      hour24 += 12;\n    } else if (period === 'AM' && hour24 === 12) {\n      hour24 = 0;\n    }\n\n    const dateTime = new Date(selectedSlot.date);\n    dateTime.setHours(hour24, parseInt(minutes), 0, 0);\n    \n    createAppointmentMutation.mutate({\n      patientId: patientId,\n      dateTime: dateTime.toISOString(),\n      status: \"upcoming\",\n      notes: \"\",\n    });\n  };\n\n  // Filter patients based on search query\n  const filteredPatients = (patients as any[]).filter((patient: any) =>\n    patient.name.toLowerCase().includes(patientSearchQuery.toLowerCase()) ||\n    patient.patientId.toLowerCase().includes(patientSearchQuery.toLowerCase())\n  );\n\n  if (isLoadingAppointments || isLoadingPatients) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"animate-pulse bg-white rounded-xl shadow-sm border border-neutral-200 h-96\"></div>\n      </div>\n    );\n  }\n\n  const enrichedAppointments = (appointments as any[]).map((appointment: any) => {\n    const patient = (patients as any[]).find((p: any) => p.id === appointment.patientId);\n    return {\n      ...appointment,\n      patientName: patient?.name || 'Unknown Patient',\n      patientId: patient?.patientId || 'N/A',\n    };\n  });\n\n  return (\n    <div className=\"pb-20\">\n      <MobileCalendar\n        appointments={enrichedAppointments}\n        onSlotSelect={handleSlotSelect}\n        onAppointmentClick={handleAppointmentClick}\n        user={user}\n      />\n\n      {/* Appointment Booking Modal */}\n      <Dialog open={!!selectedSlot} onOpenChange={() => setSelectedSlot(null)}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Book Appointment</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm text-neutral-600 mb-2\">Selected Time:</p>\n              <p className=\"font-medium\">\n                {selectedSlot && format(selectedSlot.date, 'EEEE, MMMM d, yyyy')} at {selectedSlot?.time}\n              </p>\n            </div>\n\n            <Tabs value={patientType} onValueChange={(value) => setPatientType(value as \"existing\" | \"new\")}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"existing\">Existing Patient</TabsTrigger>\n                <TabsTrigger value=\"new\">New Patient</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"existing\" className=\"space-y-3\">\n                <div>\n                  <Label htmlFor=\"patient-search\" className=\"text-sm font-medium\">\n                    Search Patient\n                  </Label>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      id=\"patient-search\"\n                      type=\"text\"\n                      placeholder=\"Search by name or ID...\"\n                      value={patientSearchQuery}\n                      onChange={(e) => setPatientSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm font-medium\">Select Patient</Label>\n                  <Select value={selectedPatient} onValueChange={setSelectedPatient}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choose a patient\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {filteredPatients.map((patient: any) => (\n                        <SelectItem key={patient.id} value={patient.id}>\n                          {patient.name} ({patient.patientId})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"new\" className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label htmlFor=\"patient-name\" className=\"text-sm font-medium\">\n                      Name *\n                    </Label>\n                    <Input\n                      id=\"patient-name\"\n                      type=\"text\"\n                      value={newPatientData.name}\n                      onChange={(e) => setNewPatientData(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Patient name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"patient-age\" className=\"text-sm font-medium\">\n                      Age *\n                    </Label>\n                    <Input\n                      id=\"patient-age\"\n                      type=\"number\"\n                      value={newPatientData.age}\n                      onChange={(e) => setNewPatientData(prev => ({ ...prev, age: e.target.value }))}\n                      placeholder=\"Age\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"patient-gender\" className=\"text-sm font-medium\">\n                    Gender *\n                  </Label>\n                  <Select \n                    value={newPatientData.gender} \n                    onValueChange={(value) => setNewPatientData(prev => ({ ...prev, gender: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select gender\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"male\">Male</SelectItem>\n                      <SelectItem value=\"female\">Female</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"patient-location\" className=\"text-sm font-medium\">\n                    Location\n                  </Label>\n                  <Input\n                    id=\"patient-location\"\n                    type=\"text\"\n                    value={newPatientData.location}\n                    onChange={(e) => setNewPatientData(prev => ({ ...prev, location: e.target.value }))}\n                    placeholder=\"Patient location\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"patient-phone\" className=\"text-sm font-medium\">\n                    Phone\n                  </Label>\n                  <Input\n                    id=\"patient-phone\"\n                    type=\"tel\"\n                    value={newPatientData.phone}\n                    onChange={(e) => setNewPatientData(prev => ({ ...prev, phone: e.target.value }))}\n                    placeholder=\"Phone number\"\n                  />\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => setSelectedSlot(null)}\n              >\n                Cancel\n              </Button>\n              <Button\n                className=\"flex-1\"\n                onClick={handleBookAppointment}\n                disabled={\n                  (patientType === \"existing\" && !selectedPatient) ||\n                  (patientType === \"new\" && (!newPatientData.name || !newPatientData.age || !newPatientData.gender)) ||\n                  createAppointmentMutation.isPending ||\n                  createPatientMutation.isPending\n                }\n              >\n                {(createAppointmentMutation.isPending || createPatientMutation.isPending) \n                  ? \"Booking...\" \n                  : \"Book Appointment\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":12538},"client/src/pages/DashboardPage.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { CalendarCheck, Users, FileText, Clock, Activity, AlertTriangle, Download } from \"lucide-react\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { format } from \"date-fns\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface DashboardPageProps {\n  user: any;\n  onNavigate: (page: string) => void;\n}\n\nexport default function DashboardPage({ user, onNavigate }: DashboardPageProps) {\n  const { t, translateData } = useLanguage();\n  const { data: stats, isLoading: isLoadingStats } = useQuery<any>({\n    queryKey: [\"/api/stats/dashboard\"],\n  });\n\n  const { data: appointments = [], isLoading: isLoadingAppointments } = useQuery<any[]>({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: patients = [], isLoading: isLoadingPatients } = useQuery<any[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: prescriptions = [], isLoading: isLoadingPrescriptions } = useQuery<any[]>({\n    queryKey: [\"/api/prescriptions\"],\n  });\n\n  const { data: medicines = [], isLoading: isLoadingMedicines } = useQuery<any[]>({\n    queryKey: [\"/api/medicines\"],\n  });\n\n  const today = new Date();\n  const todayString = format(today, 'yyyy-MM-dd');\n  \n  const todayAppointments = appointments.filter((apt: any) => {\n    const aptDate = format(new Date(apt.dateTime), 'yyyy-MM-dd');\n    return aptDate === todayString && apt.status !== 'completed';\n  });\n\n  const recentPatients = patients\n    .sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 3);\n\n  // Prepare data for symptoms breakdown chart\n  const symptomsData = prescriptions.reduce((acc: any, prescription: any) => {\n    if (prescription.symptoms) {\n      const symptoms = prescription.symptoms.toLowerCase();\n      // Extract common symptoms - more comprehensive matching\n      const commonSymptoms = ['fever', 'headache', 'cough', 'cold', 'stomach', 'pain', 'anxiety', 'fatigue', 'weakness', 'nausea', 'dizziness', 'insomnia'];\n      \n      // Check for multiple symptoms in the text\n      commonSymptoms.forEach(symptom => {\n        if (symptoms.includes(symptom)) {\n          acc[symptom] = (acc[symptom] || 0) + 1;\n        }\n      });\n      \n      // If no common symptoms found, categorize as 'other'\n      const hasCommonSymptom = commonSymptoms.some(symptom => symptoms.includes(symptom));\n      if (!hasCommonSymptom) {\n        acc['other'] = (acc['other'] || 0) + 1;\n      }\n    }\n    return acc;\n  }, {});\n\n  const symptomsChartData = Object.entries(symptomsData)\n    .map(([name, value]) => ({\n      name: name.charAt(0).toUpperCase() + name.slice(1),\n      value: value as number,\n    }))\n    .sort((a, b) => b.value - a.value) // Sort by value descending\n    .slice(0, 6); // Top 6 symptoms\n\n  // Prepare data for patient type chart (new vs existing)\n  const currentDate = new Date();\n  const thirtyDaysAgo = new Date(currentDate.getTime() - (30 * 24 * 60 * 60 * 1000));\n  \n  const newPatients = patients.filter((patient: any) => \n    new Date(patient.createdAt) >= thirtyDaysAgo\n  ).length;\n  \n  const existingPatients = patients.length - newPatients;\n\n  const patientTypeData = [\n    { name: 'New Patients (30 days)', value: newPatients },\n    { name: 'Existing Patients', value: existingPatients },\n  ];\n\n  // Get low stock medicines\n  const lowStockMedicines = medicines.filter((medicine: any) => \n    (medicine.currentStock || 0) <= (medicine.lowStockThreshold || 10)\n  );\n\n  // Export functions\n  const exportToExcel = (data: any[], filename: string) => {\n    // Simple CSV export (Excel compatible)\n    const headers = ['Medicine Name', 'Code', 'Current Stock', 'Low Stock Threshold', 'Status'];\n    const csvContent = [\n      headers.join(','),\n      ...data.map(medicine => [\n        `\"${medicine.name}\"`,\n        medicine.code,\n        medicine.currentStock || 0,\n        medicine.lowStockThreshold || 10,\n        (medicine.currentStock || 0) <= (medicine.lowStockThreshold || 10) ? 'Low Stock' : 'In Stock'\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `${filename}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const exportToPDF = (data: any[], filename: string) => {\n    // Create a simple HTML table for printing\n    const htmlContent = `\n      <html>\n        <head>\n          <title>Low Stock Medicines Report</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            h1 { color: #333; margin-bottom: 20px; }\n            table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n            th, td { border: 1px solid #ddd; padding: 8px 12px; text-align: left; }\n            th { background-color: #f5f5f5; font-weight: bold; }\n            .low-stock { color: #dc2626; font-weight: bold; }\n            .in-stock { color: #16a34a; }\n          </style>\n        </head>\n        <body>\n          <h1>Low Stock Medicines Report</h1>\n          <p>Generated on: ${new Date().toLocaleDateString()}</p>\n          <table>\n            <thead>\n              <tr>\n                <th>Medicine Name</th>\n                <th>Code</th>\n                <th>Current Stock</th>\n                <th>Low Stock Threshold</th>\n                <th>Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${data.map(medicine => `\n                <tr>\n                  <td>${medicine.name}</td>\n                  <td>${medicine.code}</td>\n                  <td>${medicine.currentStock || 0}</td>\n                  <td>${medicine.lowStockThreshold || 10}</td>\n                  <td class=\"${(medicine.currentStock || 0) <= (medicine.lowStockThreshold || 10) ? 'low-stock' : 'in-stock'}\">\n                    ${(medicine.currentStock || 0) <= (medicine.lowStockThreshold || 10) ? 'Low Stock' : 'In Stock'}\n                  </td>\n                </tr>\n              `).join('')}\n            </tbody>\n          </table>\n        </body>\n      </html>\n    `;\n\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(htmlContent);\n      printWindow.document.close();\n      printWindow.focus();\n      printWindow.print();\n    }\n  };\n\n  console.log('Prescriptions data:', prescriptions.length);\n  console.log('Symptoms chart data:', symptomsChartData);\n  console.log('Patient type data:', patientTypeData);\n\n  // Colors for charts\n  const SYMPTOM_COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];\n  const PATIENT_TYPE_COLORS = ['#00C49F', '#0088FE'];\n\n  const statCards = [\n    {\n      title: t('dashboard.stats.appointments'),\n      value: stats?.todayAppointments || 0,\n      icon: CalendarCheck,\n      color: \"bg-primary bg-opacity-10 text-primary\",\n      onClick: () => onNavigate('appointments'),\n    },\n    {\n      title: t('dashboard.stats.patients'),\n      value: stats?.totalPatients || 0,\n      icon: Users,\n      color: \"bg-secondary bg-opacity-10 text-secondary\",\n      onClick: () => onNavigate('patients'),\n    },\n    {\n      title: t('dashboard.stats.prescriptions'),\n      value: stats?.prescriptionsToday || 0,\n      icon: FileText,\n      color: \"bg-accent bg-opacity-10 text-accent\",\n      onClick: () => onNavigate('prescriptions'),\n    },\n    {\n      title: t('dashboard.stats.pending'),\n      value: stats?.pendingAppointments || 0,\n      icon: Clock,\n      color: \"bg-orange-500 bg-opacity-10 text-orange-500\",\n      onClick: () => onNavigate('appointments'),\n    },\n  ];\n\n  if (isLoadingStats || isLoadingAppointments || isLoadingPatients) {\n    return (\n      <div className=\"p-4 space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <div key={i} className=\"bg-white rounded-xl p-4 shadow-sm border animate-pulse\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-neutral-200 rounded-lg\"></div>\n                <div className=\"space-y-2 flex-1\">\n                  <div className=\"h-6 bg-neutral-200 rounded w-12\"></div>\n                  <div className=\"h-4 bg-neutral-200 rounded w-20\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"pb-20 space-y-6\">\n      {/* Dashboard Stats Cards */}\n      <section className=\"p-4 space-y-4\">\n        <h2 className=\"text-xl font-semibold text-neutral-800\">Today's Overview</h2>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          {statCards.map((stat, index) => {\n            const Icon = stat.icon;\n            \n            return (\n              <Card \n                key={index}\n                className=\"shadow-sm border border-neutral-200 card-hover cursor-pointer\"\n                onClick={stat.onClick}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${stat.color}`}>\n                      <Icon size={20} />\n                    </div>\n                    <div>\n                      <p className=\"text-2xl font-bold text-neutral-800\">{stat.value}</p>\n                      <p className=\"text-sm text-neutral-500\">{stat.title}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </section>\n\n      {/* Analytics Charts */}\n      <section className=\"p-4 space-y-4\">\n        <h2 className=\"text-xl font-semibold text-neutral-800\">Analytics Overview</h2>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          {/* Symptoms Breakdown Chart */}\n          <Card className=\"shadow-sm border border-neutral-200\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Activity className=\"h-5 w-5\" />\n                Symptoms Breakdown\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoadingPrescriptions ? (\n                <div className=\"h-64 bg-gray-100 rounded animate-pulse\" />\n              ) : symptomsChartData.length === 0 ? (\n                <div className=\"h-64 flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <Activity className=\"h-12 w-12 text-neutral-300 mx-auto mb-3\" />\n                    <p className=\"text-neutral-500\">No symptoms data available</p>\n                    <p className=\"text-xs text-neutral-400 mt-1\">Add prescriptions with symptoms to see chart</p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={symptomsChartData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={40}\n                        outerRadius={80}\n                        paddingAngle={5}\n                        dataKey=\"value\"\n                      >\n                        {symptomsChartData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={SYMPTOM_COLORS[index % SYMPTOM_COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Patient Type Distribution Chart */}\n          <Card className=\"shadow-sm border border-neutral-200\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Users className=\"h-5 w-5\" />\n                Patient Type Distribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoadingPatients ? (\n                <div className=\"h-64 bg-gray-100 rounded animate-pulse\" />\n              ) : patientTypeData.every(item => item.value === 0) ? (\n                <div className=\"h-64 flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <Users className=\"h-12 w-12 text-neutral-300 mx-auto mb-3\" />\n                    <p className=\"text-neutral-500\">No patient data available</p>\n                    <p className=\"text-xs text-neutral-400 mt-1\">Add patients to see distribution chart</p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={patientTypeData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={40}\n                        outerRadius={80}\n                        paddingAngle={5}\n                        dataKey=\"value\"\n                      >\n                        {patientTypeData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={PATIENT_TYPE_COLORS[index % PATIENT_TYPE_COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Today's Appointments */}\n      <section className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-neutral-800\">{t('dashboard.stats.appointments')}</h3>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-sm text-primary font-medium\"\n            onClick={() => onNavigate('appointments')}\n          >\n            {t('view.all')}\n          </Button>\n        </div>\n        \n        <div className=\"space-y-3\">\n          {todayAppointments.length === 0 ? (\n            <Card className=\"shadow-sm border border-neutral-200\">\n              <CardContent className=\"p-6 text-center\">\n                <CalendarCheck className=\"h-12 w-12 text-neutral-300 mx-auto mb-3\" />\n                <p className=\"text-neutral-500\">No appointments scheduled for today</p>\n              </CardContent>\n            </Card>\n          ) : (\n            todayAppointments.slice(0, 3).map((appointment: any) => (\n              <Card key={appointment.id} className=\"shadow-sm border border-neutral-200 card-hover\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-10 h-10\">\n                        <AvatarFallback className=\"bg-gradient-to-br from-primary to-secondary text-white text-sm\">\n                          {appointment.patientName?.split(' ').map((n: string) => n[0]).join('').toUpperCase() || 'P'}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h4 className=\"font-medium text-neutral-800\">{appointment.patientName || 'Unknown Patient'}</h4>\n                        <p className=\"text-sm text-neutral-500\">ID: {appointment.patientId || 'N/A'}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-medium text-neutral-800\">\n                        {format(new Date(appointment.dateTime), 'h:mm a')}\n                      </p>\n                      <span className={`inline-block px-2 py-1 text-xs font-medium rounded-full ${\n                        appointment.status === 'completed' \n                          ? 'bg-green-100 text-green-600'\n                          : 'bg-orange-100 text-orange-600'\n                      }`}>\n                        {appointment.status === 'completed' ? 'Completed' : 'Upcoming'}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"mt-3 flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      className=\"flex-1 touch-target\"\n                      onClick={() => onNavigate('patients')}\n                    >\n                      View Details\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"flex-1 touch-target\"\n                      onClick={() => onNavigate('prescriptions')}\n                    >\n                      {appointment.status === 'completed' ? 'View Prescription' : 'Add Prescription'}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </section>\n\n      {/* Recent Patients */}\n      <section className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-neutral-800\">{t('recent.patients')}</h3>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-sm text-primary font-medium\"\n            onClick={() => onNavigate('patients')}\n          >\n            {t('view.all')}\n          </Button>\n        </div>\n        \n        <div className=\"grid grid-cols-1 gap-3\">\n          {recentPatients.length === 0 ? (\n            <Card className=\"shadow-sm border border-neutral-200\">\n              <CardContent className=\"p-6 text-center\">\n                <Users className=\"h-12 w-12 text-neutral-300 mx-auto mb-3\" />\n                <p className=\"text-neutral-500\">No patients registered yet</p>\n              </CardContent>\n            </Card>\n          ) : (\n            recentPatients.map((patient: any) => (\n              <Card key={patient.id} className=\"shadow-sm border border-neutral-200 card-hover\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-10 h-10\">\n                        <AvatarFallback className=\"bg-gradient-to-br from-secondary to-accent text-white text-sm\">\n                          {patient.name?.split(' ').map((n: string) => n[0]).join('').toUpperCase() || 'P'}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h4 className=\"font-medium text-neutral-800\">{patient.name}</h4>\n                        <p className=\"text-sm text-neutral-500\">\n                          {patient.gender}, {patient.age} • {patient.patientId}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-xs text-neutral-500\">Registered</p>\n                      <p className=\"text-sm font-medium text-neutral-700\">\n                        {format(new Date(patient.createdAt), 'MMM d')}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"mt-3 flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      className=\"flex-1 touch-target\"\n                      onClick={() => onNavigate('patients')}\n                    >\n                      View Profile\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"touch-target px-3\"\n                      onClick={() => onNavigate('appointments')}\n                    >\n                      <CalendarCheck className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </section>\n\n      {/* Low Stock Medicines */}\n      <section className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n            <h3 className=\"text-lg font-semibold text-neutral-800\">Low Stock Medicines</h3>\n            {lowStockMedicines.length > 0 && (\n              <span className=\"bg-red-100 text-red-600 text-xs font-medium px-2 py-1 rounded-full\">\n                {lowStockMedicines.length}\n              </span>\n            )}\n          </div>\n          {lowStockMedicines.length > 0 && (\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => exportToExcel(lowStockMedicines, 'low-stock-medicines')}\n                className=\"text-sm\"\n              >\n                <Download className=\"h-4 w-4 mr-1\" />\n                Excel\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => exportToPDF(lowStockMedicines, 'low-stock-medicines')}\n                className=\"text-sm\"\n              >\n                <Download className=\"h-4 w-4 mr-1\" />\n                PDF\n              </Button>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"space-y-3\">\n          {lowStockMedicines.length === 0 ? (\n            <Card className=\"shadow-sm border border-neutral-200\">\n              <CardContent className=\"p-6 text-center\">\n                <Activity className=\"h-12 w-12 text-green-400 mx-auto mb-3\" />\n                <p className=\"text-neutral-500\">All medicines are well stocked</p>\n                <p className=\"text-xs text-neutral-400 mt-1\">No medicines below stock threshold</p>\n              </CardContent>\n            </Card>\n          ) : (\n            lowStockMedicines.map((medicine: any) => (\n              <Card key={medicine.id} className=\"shadow-sm border border-neutral-200 card-hover bg-red-50 border-red-200\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                        <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-neutral-800\">{medicine.name}</h4>\n                        <p className=\"text-sm text-neutral-500\">Code: {medicine.code}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-red-600 font-medium\">\n                        Stock: {medicine.currentStock || 0}\n                      </p>\n                      <p className=\"text-xs text-neutral-500\">\n                        Alert at: {medicine.lowStockThreshold || 10}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"mt-3 flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      className=\"flex-1 touch-target\"\n                      onClick={() => onNavigate('medicines')}\n                    >\n                      Update Stock\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"touch-target px-3\"\n                      onClick={() => onNavigate('medicines')}\n                    >\n                      View Details\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </section>\n    </main>\n  );\n}\n","size_bytes":24687},"client/src/pages/DashboardPageDesktop.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Calendar, Users, Clock, CheckCircle, Search, Activity, ChevronLeft, ChevronRight, BarChart3 } from 'lucide-react';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip, BarChart, Bar, XAxis, YAxis, CartesianGrid } from 'recharts';\nimport type { AuthUser } from '@/lib/auth';\nimport type { Appointment, Patient } from '@shared/schema';\n\ninterface DashboardPageDesktopProps {\n  user: AuthUser;\n  onNavigate: (page: string) => void;\n}\n\nexport const DashboardPageDesktop: React.FC<DashboardPageDesktopProps> = ({\n  user,\n  onNavigate\n}) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedPeriod, setSelectedPeriod] = useState('month');\n  const itemsPerPage = 4;\n  const { data: appointments = [] } = useQuery<Appointment[]>({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: prescriptions = [], isLoading: isLoadingPrescriptions } = useQuery<any[]>({\n    queryKey: [\"/api/prescriptions\"],\n  });\n\n  // Enrich appointments with patient data\n  const enrichedAppointments = appointments.map((appointment: any) => {\n    const patient = patients.find((p: any) => p.id === appointment.patientId);\n    return {\n      ...appointment,\n      patientName: patient?.name || 'Unknown Patient',\n      patientCustomId: patient?.patientId || 'N/A',\n    };\n  });\n\n  const todayAppointments = enrichedAppointments.filter((apt) => {\n    const today = new Date().toDateString();\n    return new Date(apt.dateTime).toDateString() === today && apt.status !== 'completed';\n  });\n\n  const pendingAppointments = enrichedAppointments.filter((apt) => apt.status === 'upcoming');\n  const completedToday = enrichedAppointments.filter((apt) => {\n    const today = new Date().toDateString();\n    return new Date(apt.dateTime).toDateString() === today && apt.status === 'completed';\n  });\n\n  // Prepare data for symptoms breakdown chart\n  const symptomsData = prescriptions.reduce((acc: any, prescription: any) => {\n    if (prescription.symptoms) {\n      const symptoms = prescription.symptoms.toLowerCase();\n      // Extract common symptoms - more comprehensive matching\n      const commonSymptoms = ['fever', 'headache', 'cough', 'cold', 'stomach', 'pain', 'anxiety', 'fatigue', 'weakness', 'nausea', 'dizziness', 'insomnia'];\n      \n      // Check for multiple symptoms in the text\n      commonSymptoms.forEach(symptom => {\n        if (symptoms.includes(symptom)) {\n          acc[symptom] = (acc[symptom] || 0) + 1;\n        }\n      });\n      \n      // If no common symptoms found, categorize as 'other'\n      const hasCommonSymptom = commonSymptoms.some(symptom => symptoms.includes(symptom));\n      if (!hasCommonSymptom) {\n        acc['other'] = (acc['other'] || 0) + 1;\n      }\n    }\n    return acc;\n  }, {});\n\n  const symptomsChartData = Object.entries(symptomsData)\n    .map(([name, value]) => ({\n      name: name.charAt(0).toUpperCase() + name.slice(1),\n      value: value as number,\n    }))\n    .sort((a, b) => b.value - a.value) // Sort by value descending\n    .slice(0, 6); // Top 6 symptoms\n\n  // Prepare data for patient type chart (new vs existing)\n  const currentDate = new Date();\n  const thirtyDaysAgo = new Date(currentDate.getTime() - (30 * 24 * 60 * 60 * 1000));\n  \n  const newPatients = patients.filter((patient: any) => \n    new Date(patient.createdAt) >= thirtyDaysAgo\n  ).length;\n  \n  const existingPatients = patients.length - newPatients;\n\n  const patientTypeData = [\n    { name: 'New Patients (30 days)', value: newPatients },\n    { name: 'Existing Patients', value: existingPatients },\n  ];\n\n  // Colors for charts\n  const SYMPTOM_COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];\n  const PATIENT_TYPE_COLORS = ['#00C49F', '#0088FE'];\n\n  // Filter appointments for display (excluding completed ones)\n  const upcomingAppointments = enrichedAppointments.filter((apt: any) => apt.status !== 'completed');\n  \n  // Filter appointments based on search term\n  const filteredAppointments = upcomingAppointments.filter((apt: any) => {\n    if (!searchTerm) return true;\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      apt.patientName?.toLowerCase().includes(searchLower) ||\n      apt.patientCustomId?.toLowerCase().includes(searchLower) ||\n      apt.id?.toLowerCase().includes(searchLower)\n    );\n  });\n\n  // Pagination logic\n  const totalPages = Math.ceil(filteredAppointments.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentAppointments = filteredAppointments.slice(startIndex, endIndex);\n\n  // Reset to first page when search changes\n  const handleSearchChange = (value: string) => {\n    setSearchTerm(value);\n    setCurrentPage(1);\n  };\n\n  const handleNextPage = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const handlePrevPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  // Prepare medicine usage data based on selected period\n  const getMedicineUsageData = () => {\n    const now = new Date();\n    let startDate = new Date();\n    \n    switch (selectedPeriod) {\n      case 'week':\n        startDate.setDate(now.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(now.getMonth() - 1);\n        break;\n      case '3months':\n        startDate.setMonth(now.getMonth() - 3);\n        break;\n      case '6months':\n        startDate.setMonth(now.getMonth() - 6);\n        break;\n      default:\n        startDate.setMonth(now.getMonth() - 1);\n    }\n\n    // Filter prescriptions by date range\n    const filteredPrescriptions = prescriptions.filter((prescription: any) => {\n      const prescriptionDate = new Date(prescription.createdAt);\n      return prescriptionDate >= startDate && prescriptionDate <= now;\n    });\n\n    // Count medicine usage\n    const medicineUsage: { [key: string]: number } = {};\n    \n    filteredPrescriptions.forEach((prescription: any) => {\n      if (prescription.medicines && Array.isArray(prescription.medicines)) {\n        prescription.medicines.forEach((medicine: any) => {\n          // Now medicine.name should be populated from the backend\n          const medicineName = medicine.name;\n          \n          if (medicineName && medicineName !== 'Unknown Medicine') {\n            medicineUsage[medicineName] = (medicineUsage[medicineName] || 0) + 1;\n          }\n        });\n      }\n    });\n\n    // Convert to chart data and sort by usage\n    return Object.entries(medicineUsage)\n      .map(([name, count]) => ({\n        name: name.length > 15 ? name.substring(0, 15) + '...' : name,\n        fullName: name,\n        count: count as number,\n      }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10); // Top 10 medicines\n  };\n\n  const medicineUsageData = getMedicineUsageData();\n\n  const periodOptions = [\n    { value: 'week', label: '1 Week' },\n    { value: 'month', label: '1 Month' },\n    { value: '3months', label: '3 Months' },\n    { value: '6months', label: '6 Months' },\n  ];\n\n  const stats = [\n    {\n      title: \"TODAY'S APPOINTMENTS\",\n      value: todayAppointments.length,\n      icon: Calendar,\n      color: \"bg-blue-500\",\n      bgClass: \"bg-blue-50\"\n    },\n    {\n      title: \"TOTAL PATIENTS\", \n      value: patients.length,\n      icon: Users,\n      color: \"bg-green-500\",\n      bgClass: \"bg-green-50\"\n    },\n    {\n      title: \"PENDING\",\n      value: pendingAppointments.length,\n      icon: Clock,\n      color: \"bg-orange-500\", \n      bgClass: \"bg-orange-50\"\n    },\n    {\n      title: \"COMPLETED TODAY\",\n      value: completedToday.length,\n      icon: CheckCircle,\n      color: \"bg-green-500\",\n      bgClass: \"bg-green-50\"\n    }\n  ];\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto space-y-6\">\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {stats.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={index} className={`${stat.bgClass} border-0 shadow-sm`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-xs font-medium text-gray-600 tracking-wide uppercase\">\n                      {stat.title}\n                    </p>\n                    <p className=\"text-3xl font-bold text-gray-900 mt-2\">\n                      {stat.value}\n                    </p>\n                  </div>\n                  <div className={`${stat.color} p-3 rounded-full`}>\n                    <Icon className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Appointments Table */}\n      <Card className=\"shadow-sm\">\n        <CardHeader className=\"border-b border-gray-100\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-5 w-5 text-primary\" />\n              <CardTitle className=\"text-lg font-semibold\">Upcoming Appointments</CardTitle>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-500\">\n                {new Date().toLocaleDateString('en-US', { \n                  month: 'numeric', \n                  day: 'numeric', \n                  year: 'numeric' \n                })}\n              </span>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input \n                  placeholder=\"Search patient...\" \n                  className=\"pl-10 w-64\"\n                  value={searchTerm}\n                  onChange={(e) => handleSearchChange(e.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {filteredAppointments.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-12\">\n              <Calendar className=\"h-12 w-12 text-gray-300 mb-4\" />\n              <p className=\"text-gray-500 text-center\">\n                {searchTerm ? `No appointments found for \"${searchTerm}\"` : 'No upcoming appointments'}\n              </p>\n            </div>\n          ) : (\n            <>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Appointment ID\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Date & Time\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Patient Name\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Patient ID\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Status\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {currentAppointments.map((appointment) => (\n                      <tr key={appointment.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                          {appointment.appointmentId}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {new Date(appointment.dateTime).toLocaleString()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {appointment.patientName}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {appointment.patientCustomId}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                            appointment.status === 'completed' \n                              ? 'bg-green-100 text-green-800'\n                              : appointment.status === 'pending'\n                              ? 'bg-yellow-100 text-yellow-800'\n                              : 'bg-gray-100 text-gray-800'\n                            }`}>\n                            {appointment.status}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"text-primary hover:text-primary-dark\"\n                            onClick={() => onNavigate('appointments')}\n                          >\n                            View Details\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n              \n              {/* Pagination Controls */}\n              {totalPages > 1 && (\n                <div className=\"flex items-center justify-between px-6 py-4 border-t border-gray-200\">\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                    <span>\n                      Showing {startIndex + 1} to {Math.min(endIndex, filteredAppointments.length)} of {filteredAppointments.length} appointments\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handlePrevPage}\n                      disabled={currentPage === 1}\n                      className=\"flex items-center space-x-1\"\n                    >\n                      <ChevronLeft className=\"h-4 w-4\" />\n                      <span>Previous</span>\n                    </Button>\n                    \n                    <div className=\"flex items-center space-x-1\">\n                      {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (\n                        <Button\n                          key={pageNum}\n                          variant={pageNum === currentPage ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => setCurrentPage(pageNum)}\n                          className=\"w-8 h-8 p-0\"\n                        >\n                          {pageNum}\n                        </Button>\n                      ))}\n                    </div>\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleNextPage}\n                      disabled={currentPage === totalPages}\n                      className=\"flex items-center space-x-1\"\n                    >\n                      <span>Next</span>\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Analytics Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Symptoms Breakdown Chart */}\n        <Card className=\"shadow-sm\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center gap-2 text-lg\">\n              <Activity className=\"h-5 w-5\" />\n              Symptoms Breakdown\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoadingPrescriptions ? (\n              <div className=\"h-64 bg-gray-100 rounded animate-pulse\" />\n            ) : symptomsChartData.length === 0 ? (\n              <div className=\"h-64 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <Activity className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n                  <p className=\"text-gray-500\">No symptoms data available</p>\n                  <p className=\"text-xs text-gray-400 mt-1\">Add prescriptions with symptoms to see chart</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={symptomsChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={40}\n                      outerRadius={80}\n                      paddingAngle={5}\n                      dataKey=\"value\"\n                    >\n                      {symptomsChartData.map((entry: any, index: number) => (\n                        <Cell key={`cell-${index}`} fill={SYMPTOM_COLORS[index % SYMPTOM_COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Patient Type Distribution Chart */}\n        <Card className=\"shadow-sm\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center gap-2 text-lg\">\n              <Users className=\"h-5 w-5\" />\n              Patient Type Distribution\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {patients.length === 0 ? (\n              <div className=\"h-64 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <Users className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n                  <p className=\"text-gray-500\">No patient data available</p>\n                  <p className=\"text-xs text-gray-400 mt-1\">Add patients to see distribution chart</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={patientTypeData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={40}\n                      outerRadius={80}\n                      paddingAngle={5}\n                      dataKey=\"value\"\n                    >\n                      {patientTypeData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={PATIENT_TYPE_COLORS[index % PATIENT_TYPE_COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Bottom Analytics Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Medicine Usage Volume Chart (Circular) */}\n        <Card className=\"shadow-sm\">\n          <CardHeader className=\"border-b border-gray-100\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"h-5 w-5 text-primary\" />\n                <CardTitle className=\"text-lg font-semibold\">Medicine Usage Volume</CardTitle>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {periodOptions.map((option) => (\n                  <Button\n                    key={option.value}\n                    variant={selectedPeriod === option.value ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedPeriod(option.value)}\n                    className=\"text-xs\"\n                  >\n                    {option.label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {isLoadingPrescriptions ? (\n              <div className=\"flex items-center justify-center h-64\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              </div>\n            ) : medicineUsageData.length === 0 ? (\n              <div className=\"flex flex-col items-center justify-center h-64\">\n                <BarChart3 className=\"h-12 w-12 text-gray-300 mb-4\" />\n                <p className=\"text-gray-500 text-center\">\n                  No medicine usage data available for the selected period\n                </p>\n              </div>\n            ) : (\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={medicineUsageData.slice(0, 6)}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={40}\n                      outerRadius={80}\n                      paddingAngle={5}\n                      dataKey=\"count\"\n                    >\n                      {medicineUsageData.slice(0, 6).map((entry: any, index: number) => (\n                        <Cell key={`cell-${index}`} fill={SYMPTOM_COLORS[index % SYMPTOM_COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      formatter={(value: any, name: any, props: any) => [\n                        `${value} times`, \n                        'Used'\n                      ]}\n                      labelFormatter={(label: any, payload: any) => {\n                        const data = payload?.[0]?.payload;\n                        return data ? data.fullName : label;\n                      }}\n                    />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            )}\n            {medicineUsageData.length > 0 && (\n              <div className=\"mt-4 text-sm text-gray-500 text-center\">\n                Top 6 medicines in the last {periodOptions.find(p => p.value === selectedPeriod)?.label.toLowerCase()}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Appointments vs Prescriptions Chart */}\n        <Card className=\"shadow-sm\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center gap-2 text-lg\">\n              <Clock className=\"h-5 w-5\" />\n              Appointments vs Prescriptions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={[\n                      { name: `Total Appointments (${appointments.length})`, value: appointments.length },\n                      { name: `Total Prescriptions (${prescriptions.length})`, value: prescriptions.length }\n                    ]}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={40}\n                    outerRadius={80}\n                    paddingAngle={5}\n                    dataKey=\"value\"\n                  >\n                    <Cell fill=\"#0088FE\" />\n                    <Cell fill=\"#00C49F\" />\n                  </Pie>\n                  <Tooltip formatter={(value: any) => [`${value}`, 'Count']} />\n                  <Legend />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"mt-4 text-sm text-gray-500 text-center\">\n              Appointments: {appointments.length} | Prescriptions: {prescriptions.length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};","size_bytes":25115},"client/src/pages/DoctorSettingsPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Settings, Clock, Calendar, ArrowLeft } from \"lucide-react\";\n\ninterface DoctorAvailability {\n  id: string;\n  doctorId: string;\n  dayOfWeek: number;\n  isAvailable: boolean;\n  startTime: string;\n  endTime: string;\n  lunchBreakStart: string;\n  lunchBreakEnd: string;\n  slotDuration: number;\n}\n\ninterface DoctorSettingsPageProps {\n  user: any;\n  onNavigate: (page: string) => void;\n}\n\nconst DAYS_OF_WEEK = [\n  { value: 0, label: \"Sunday\", shortLabel: \"Sun\" },\n  { value: 1, label: \"Monday\", shortLabel: \"Mon\" },\n  { value: 2, label: \"Tuesday\", shortLabel: \"Tue\" },\n  { value: 3, label: \"Wednesday\", shortLabel: \"Wed\" },\n  { value: 4, label: \"Thursday\", shortLabel: \"Thu\" },\n  { value: 5, label: \"Friday\", shortLabel: \"Fri\" },\n  { value: 6, label: \"Saturday\", shortLabel: \"Sat\" },\n];\n\nexport default function DoctorSettingsPage({ user, onNavigate }: DoctorSettingsPageProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingDay, setEditingDay] = useState<number | null>(null);\n  const [daySettings, setDaySettings] = useState<Record<number, Partial<DoctorAvailability>>>({});\n\n  // Fetch doctor availability\n  const { data: availability = [], isLoading } = useQuery({\n    queryKey: [\"/api/doctor/availability\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/doctor/availability\");\n      return response.json();\n    },\n  });\n\n  // Initialize day settings from availability data\n  useEffect(() => {\n    const settings: Record<number, Partial<DoctorAvailability>> = {};\n    DAYS_OF_WEEK.forEach(day => {\n      const existingAvailability = availability.find((a: DoctorAvailability) => a.dayOfWeek === day.value);\n      settings[day.value] = existingAvailability || {\n        dayOfWeek: day.value,\n        isAvailable: false,\n        startTime: \"09:00\",\n        endTime: \"19:00\",\n        lunchBreakStart: \"13:00\",\n        lunchBreakEnd: \"14:00\",\n        slotDuration: 20,\n      };\n    });\n    setDaySettings(settings);\n  }, [availability]);\n\n  // Update availability mutation\n  const updateAvailabilityMutation = useMutation({\n    mutationFn: async (availabilityData: Partial<DoctorAvailability>) => {\n      const response = await apiRequest(\"POST\", \"/api/doctor/availability\", availabilityData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctor/availability\"] });\n      toast({\n        title: \"Success\",\n        description: \"Availability updated successfully\",\n      });\n      setEditingDay(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update availability\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete availability mutation\n  const deleteAvailabilityMutation = useMutation({\n    mutationFn: async (dayOfWeek: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/doctor/availability/${dayOfWeek}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/doctor/availability\"] });\n      toast({\n        title: \"Success\",\n        description: \"Day availability removed\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove availability\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggleAvailability = (dayOfWeek: number, isAvailable: boolean) => {\n    const updatedSettings = { ...daySettings[dayOfWeek], isAvailable };\n    setDaySettings(prev => ({ ...prev, [dayOfWeek]: updatedSettings }));\n    \n    if (isAvailable) {\n      updateAvailabilityMutation.mutate(updatedSettings);\n    } else {\n      deleteAvailabilityMutation.mutate(dayOfWeek);\n    }\n  };\n\n  const handleUpdateDaySettings = (dayOfWeek: number, field: string, value: string | number) => {\n    setDaySettings(prev => ({\n      ...prev,\n      [dayOfWeek]: { ...prev[dayOfWeek], [field]: value }\n    }));\n  };\n\n  const handleSaveDaySettings = (dayOfWeek: number) => {\n    const settings = daySettings[dayOfWeek];\n    if (settings) {\n      updateAvailabilityMutation.mutate(settings);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-neutral-600\">Loading availability settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50\">\n      {/* Mobile Header */}\n      <div className=\"bg-white shadow-sm border-b border-neutral-200 p-4 flex items-center\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => onNavigate(\"dashboard\")}\n          className=\"mr-3\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <div className=\"flex items-center\">\n          <Settings className=\"h-6 w-6 text-blue-600 mr-2\" />\n          <h1 className=\"text-xl font-bold text-neutral-800\">Availability Settings</h1>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Header Info */}\n        <Card className=\"shadow-sm border border-neutral-200\">\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center\">\n              <Calendar className=\"h-5 w-5 text-blue-600 mr-2\" />\n              Set Your Available Days & Times\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-neutral-600\">\n              Configure when patients can book appointments with you. Set your working hours, \n              lunch breaks, and appointment duration for each day of the week.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Days Configuration */}\n        <div className=\"space-y-4\">\n          {DAYS_OF_WEEK.map((day) => {\n            const settings = daySettings[day.value];\n            const isEditing = editingDay === day.value;\n\n            return (\n              <Card key={day.value} className=\"shadow-sm border border-neutral-200\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center\">\n                      <h3 className=\"font-semibold text-neutral-800 mr-3\">{day.label}</h3>\n                      <Switch\n                        checked={settings?.isAvailable || false}\n                        onCheckedChange={(checked) => handleToggleAvailability(day.value, checked)}\n                        disabled={updateAvailabilityMutation.isPending || deleteAvailabilityMutation.isPending}\n                      />\n                    </div>\n                    {settings?.isAvailable && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setEditingDay(isEditing ? null : day.value)}\n                      >\n                        <Clock className=\"h-4 w-4 mr-1\" />\n                        {isEditing ? \"Cancel\" : \"Edit Times\"}\n                      </Button>\n                    )}\n                  </div>\n\n                  {settings?.isAvailable && (\n                    <div className=\"space-y-4\">\n                      {!isEditing ? (\n                        // Display mode\n                        <div className=\"grid grid-cols-2 gap-4 text-sm text-neutral-600\">\n                          <div>\n                            <strong>Working Hours:</strong><br />\n                            {settings.startTime} - {settings.endTime}\n                          </div>\n                          <div>\n                            <strong>Lunch Break:</strong><br />\n                            {settings.lunchBreakStart} - {settings.lunchBreakEnd}\n                          </div>\n                          <div className=\"col-span-2\">\n                            <strong>Appointment Duration:</strong> {settings.slotDuration} minutes\n                          </div>\n                        </div>\n                      ) : (\n                        // Edit mode\n                        <div className=\"space-y-4\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <Label className=\"text-sm font-medium\">Start Time</Label>\n                              <Input\n                                type=\"time\"\n                                value={settings.startTime || \"09:00\"}\n                                onChange={(e) => handleUpdateDaySettings(day.value, \"startTime\", e.target.value)}\n                              />\n                            </div>\n                            <div>\n                              <Label className=\"text-sm font-medium\">End Time</Label>\n                              <Input\n                                type=\"time\"\n                                value={settings.endTime || \"19:00\"}\n                                onChange={(e) => handleUpdateDaySettings(day.value, \"endTime\", e.target.value)}\n                              />\n                            </div>\n                          </div>\n\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <Label className=\"text-sm font-medium\">Lunch Break Start</Label>\n                              <Input\n                                type=\"time\"\n                                value={settings.lunchBreakStart || \"13:00\"}\n                                onChange={(e) => handleUpdateDaySettings(day.value, \"lunchBreakStart\", e.target.value)}\n                              />\n                            </div>\n                            <div>\n                              <Label className=\"text-sm font-medium\">Lunch Break End</Label>\n                              <Input\n                                type=\"time\"\n                                value={settings.lunchBreakEnd || \"14:00\"}\n                                onChange={(e) => handleUpdateDaySettings(day.value, \"lunchBreakEnd\", e.target.value)}\n                              />\n                            </div>\n                          </div>\n\n                          <div>\n                            <Label className=\"text-sm font-medium\">Appointment Duration (minutes)</Label>\n                            <Input\n                              type=\"number\"\n                              value={settings.slotDuration || 20}\n                              onChange={(e) => handleUpdateDaySettings(day.value, \"slotDuration\", parseInt(e.target.value))}\n                              min=\"10\"\n                              max=\"60\"\n                              step=\"5\"\n                            />\n                          </div>\n\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              onClick={() => handleSaveDaySettings(day.value)}\n                              disabled={updateAvailabilityMutation.isPending}\n                              className=\"flex-1\"\n                            >\n                              {updateAvailabilityMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              onClick={() => setEditingDay(null)}\n                              className=\"flex-1\"\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Instructions */}\n        <Card className=\"shadow-sm border border-neutral-200 bg-blue-50\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold text-blue-800 mb-2\">How it works:</h3>\n            <ul className=\"text-sm text-blue-700 space-y-1\">\n              <li>• Toggle days on/off to set when you're available for appointments</li>\n              <li>• Set working hours, lunch breaks, and appointment duration for each day</li>\n              <li>• Patients will only see available time slots based on your settings</li>\n              <li>• Changes take effect immediately for new bookings</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13190},"client/src/pages/LoginPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { authApi } from \"@/lib/auth\";\nimport LoginForm from \"@/components/auth/LoginForm\";\nimport LoadingOverlay from \"@/components/mobile/LoadingOverlay\";\nimport { useLocation } from \"wouter\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const [error, setError] = useState<string>(\"\");\n  const queryClient = useQueryClient();\n\n  // Check if user is already authenticated\n  const { data: currentUser, isLoading: isCheckingAuth } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => authApi.getCurrentUser(),\n    retry: false,\n  });\n\n  // Redirect if already authenticated\n  if (currentUser && !isCheckingAuth) {\n    const defaultPage = currentUser.role === 'admin' ? '/admin' : '/dashboard';\n    setLocation(defaultPage);\n    return null;\n  }\n\n  const loginMutation = useMutation({\n    mutationFn: ({ username, password }: { username: string; password: string }) =>\n      authApi.login(username, password),\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/auth/me\"], user);\n      setError(\"\");\n      const defaultPage = user.role === 'admin' ? '/admin' : '/dashboard';\n      setLocation(defaultPage);\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Login failed. Please check your credentials.\");\n    },\n  });\n\n  const handleLogin = async (username: string, password: string): Promise<boolean> => {\n    try {\n      await loginMutation.mutateAsync({ username, password });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n\n  if (isCheckingAuth) {\n    return <LoadingOverlay isVisible={true} message=\"Checking authentication...\" />;\n  }\n\n  return (\n    <LoginForm\n      onLogin={handleLogin}\n      isLoading={loginMutation.isPending}\n      error={error}\n    />\n  );\n}\n","size_bytes":1889},"client/src/pages/MedicinesPage.tsx":{"content":"import { useState } from \"react\";\n\n// Extend Window interface for speech recognition\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Search, Plus, Pill, Eye, MessageCircle, Bot, Upload, FileText, FileSpreadsheet, File, Filter, Download, AlertTriangle, Mic, MicOff, Globe, Trash2, Edit } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface MedicinesPageProps {\n  user: any;\n  onNavigate: (page: string) => void;\n}\n\nexport default function MedicinesPage({ user, onNavigate }: MedicinesPageProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showAIModal, setShowAIModal] = useState(false);\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [selectedMedicine, setSelectedMedicine] = useState<any>(null);\n  const [editingMedicine, setEditingMedicine] = useState<any>(null);\n  const [aiQuery, setAiQuery] = useState(\"\");\n  const [aiResponse, setAiResponse] = useState(\"\");\n  const [isLoadingAI, setIsLoadingAI] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [voiceLanguage, setVoiceLanguage] = useState(\"en-US\");\n  const [recognition, setRecognition] = useState<any>(null);\n  const [uploadFile, setUploadFile] = useState<File | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(\"\");\n  const [uploadResults, setUploadResults] = useState<any>(null);\n  const [newMedicine, setNewMedicine] = useState({\n    name: \"\",\n    code: \"\",\n    company: \"\",\n    description: \"\",\n    power: \"\",\n    dosage: \"\",\n    symptoms: \"\",\n    currentStock: 0,\n    lowStockThreshold: 10,\n  });\n\n  const [showLowStockFilter, setShowLowStockFilter] = useState(false);\n  const [editMedicine, setEditMedicine] = useState({\n    name: \"\",\n    code: \"\",\n    company: \"\",\n    description: \"\",\n    power: \"\",\n    dosage: \"\",\n    symptoms: \"\",\n    currentStock: 0,\n    lowStockThreshold: 10,\n  });\n\n  const { toast } = useToast();\n  const { t, translateData } = useLanguage();\n  const queryClient = useQueryClient();\n\n  const { data: medicines = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/medicines\"],\n  });\n\n  const createMedicineMutation = useMutation({\n    mutationFn: async (medicineData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/medicines\", medicineData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/medicines\"] });\n      toast({\n        title: t('common.success'),\n        description: t('medicines.add') + \" \" + t('common.success').toLowerCase(),\n      });\n      setShowAddModal(false);\n      setNewMedicine({ name: \"\", code: \"\", company: \"\", description: \"\", power: \"\", dosage: \"\", symptoms: \"\", currentStock: 0, lowStockThreshold: 10 });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t('common.error'), \n        description: error.message || t('medicines.add') + \" \" + t('common.error').toLowerCase(),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMedicineMutation = useMutation({\n    mutationFn: async ({ id, medicineData }: { id: string; medicineData: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/medicines/${id}`, medicineData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/medicines\"] });\n      toast({\n        title: t('common.success'),\n        description: t('medicines.edit') + \" \" + t('common.success').toLowerCase(),\n      });\n      setShowEditModal(false);\n      setEditingMedicine(null);\n      setEditMedicine({ name: \"\", code: \"\", company: \"\", description: \"\", power: \"\", dosage: \"\", symptoms: \"\", currentStock: 0, lowStockThreshold: 10 });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t('common.error'),\n        description: error.message || t('medicines.edit') + \" \" + t('common.error').toLowerCase(), \n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadMedicinesMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch('/api/medicines/upload', {\n        method: 'POST',\n        credentials: 'include',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/medicines\"] });\n      setUploadResults(data);\n      toast({\n        title: \"Upload Successful\",\n        description: `${data.successful} medicines imported, ${data.failed} failed`,\n      });\n      setUploadFile(null);\n      setIsUploading(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message || \"Failed to upload medicines\",\n        variant: \"destructive\",\n      });\n      setIsUploading(false);\n    },\n  });\n\n  const deleteMedicineMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/medicines/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/medicines\"] });\n      toast({\n        title: t('common.success'),\n        description: \"Medicine deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t('common.error'),\n        description: error.message || \"Failed to delete medicine\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter medicines based on search term and low stock filter\n  const filteredMedicines = medicines.filter((medicine: any) => {\n    const searchLower = searchTerm.toLowerCase();\n    const matchesSearch = (\n      medicine.name.toLowerCase().includes(searchLower) ||\n      medicine.code.toLowerCase().includes(searchLower) ||\n      (medicine.company && medicine.company.toLowerCase().includes(searchLower)) ||\n      (medicine.symptoms && medicine.symptoms.toLowerCase().includes(searchLower)) ||\n      (medicine.description && medicine.description.toLowerCase().includes(searchLower))\n    );\n    \n    if (showLowStockFilter) {\n      const threshold = medicine.lowStockThreshold || user?.globalLowStockThreshold || 10;\n      const isLowStock = medicine.currentStock <= threshold;\n      return matchesSearch && isLowStock;\n    }\n    \n    return matchesSearch;\n  });\n\n  // Get low stock medicines for filtering and exports\n  const lowStockMedicines = medicines.filter((medicine: any) => {\n    const threshold = medicine.lowStockThreshold || user?.globalLowStockThreshold || 10;\n    return medicine.currentStock <= threshold;\n  });\n\n  // Export functionality\n  const exportLowStockToCSV = () => {\n    if (lowStockMedicines.length === 0) {\n      toast({\n        title: \"No Data\",\n        description: \"No low stock medicines to export\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const csvContent = [\n      [\"Medicine Name\", \"Code\", \"Current Stock\", \"Low Stock Threshold\", \"Description\"].join(\",\"),\n      ...lowStockMedicines.map((medicine: any) => [\n        `\"${medicine.name}\"`,\n        medicine.code,\n        medicine.currentStock || 0,\n        medicine.lowStockThreshold || user?.globalLowStockThreshold || 10,\n        `\"${medicine.description || ''}\"`\n      ].join(\",\"))\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `low-stock-medicines-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n\n    toast({\n      title: t('export.successful'),\n      description: t('export.csv.description'),\n    });\n  };\n\n  const exportLowStockToPDF = () => {\n    if (lowStockMedicines.length === 0) {\n      toast({\n        title: \"No Data\",\n        description: \"No low stock medicines to export\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const printContent = `\n      <html>\n        <head>\n          <title>Low Stock Medicines Report</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            h1 { color: #333; border-bottom: 2px solid #333; padding-bottom: 10px; }\n            table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n            th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }\n            th { background-color: #f5f5f5; font-weight: bold; }\n            .low-stock { background-color: #fee; color: #c53030; font-weight: bold; }\n            .date { text-align: right; color: #666; font-size: 14px; }\n          </style>\n        </head>\n        <body>\n          <div class=\"date\">Generated on: ${new Date().toLocaleDateString()}</div>\n          <h1>Low Stock Medicines Report</h1>\n          <p>Total medicines requiring attention: <strong>${lowStockMedicines.length}</strong></p>\n          <table>\n            <thead>\n              <tr>\n                <th>Medicine Name</th>\n                <th>Code</th>\n                <th>Current Stock</th>\n                <th>Threshold</th>\n                <th>Description</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${lowStockMedicines.map((medicine: any) => `\n                <tr class=\"low-stock\">\n                  <td>${medicine.name}</td>\n                  <td>${medicine.code}</td>\n                  <td>${medicine.currentStock || 0}</td>\n                  <td>${medicine.lowStockThreshold || user?.globalLowStockThreshold || 10}</td>\n                  <td>${medicine.description || ''}</td>\n                </tr>\n              `).join('')}\n            </tbody>\n          </table>\n        </body>\n      </html>\n    `;\n\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      printWindow.print();\n      printWindow.close();\n    }\n\n    toast({\n      title: t('export.successful'),\n      description: t('export.pdf.description'),\n    });\n  };\n\n  const handleEditMedicine = (medicine: any) => {\n    setEditingMedicine(medicine);\n    setEditMedicine({\n      name: medicine.name,\n      code: medicine.code,\n      company: medicine.company || \"\",\n      description: medicine.description || \"\",\n      power: medicine.power || \"\",\n      dosage: medicine.dosage || \"\",\n      symptoms: medicine.symptoms || \"\",\n      currentStock: medicine.currentStock || 0,\n      lowStockThreshold: medicine.lowStockThreshold || 10,\n    });\n    setShowEditModal(true);\n  };\n\n  const handleFileUpload = () => {\n    if (!uploadFile) {\n      toast({\n        title: t('common.error'),\n        description: t('upload.select.file'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file type\n    const allowedTypes = ['text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/pdf'];\n    if (!allowedTypes.includes(uploadFile.type)) {\n      toast({\n        title: t('common.error'),\n        description: t('upload.formats'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadProgress(t('upload.uploading'));\n    uploadMedicinesMutation.mutate(uploadFile);\n  };\n\n  const getFileIcon = (file: File) => {\n    if (file.type.includes('csv')) return <FileText className=\"h-4 w-4\" />;\n    if (file.type.includes('sheet') || file.type.includes('excel')) return <FileSpreadsheet className=\"h-4 w-4\" />;\n    if (file.type.includes('pdf')) return <File className=\"h-4 w-4\" />;\n    return <File className=\"h-4 w-4\" />;\n  };\n\n  const handleUpdateMedicine = () => {\n    if (!editMedicine.name.trim() || !editMedicine.code.trim()) {\n      toast({\n        title: t('common.error'),\n        description: t('form.required'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateMedicineMutation.mutate({\n      id: editingMedicine.id,\n      medicineData: editMedicine,\n    });\n  };\n\n  const handleAddMedicine = () => {\n    if (!newMedicine.name.trim() || !newMedicine.code.trim()) {\n      toast({\n        title: t('common.error'),\n        description: t('form.required'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMedicineMutation.mutate(newMedicine);\n  };\n\n  const generateCode = (name: string) => {\n    if (name.length >= 3) {\n      let baseCode = name.substring(0, 3).toUpperCase();\n      let uniqueCode = baseCode;\n      let counter = 1;\n      \n      // Check if code already exists and generate unique one\n      while (medicines.find(med => med.code === uniqueCode)) {\n        uniqueCode = `${baseCode}${counter}`;\n        counter++;\n      }\n      \n      setNewMedicine(prev => ({ ...prev, code: uniqueCode }));\n    }\n  };\n\n  // Voice Recognition Functions\n  const initializeVoiceRecognition = () => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      toast({\n        title: t('common.error'),\n        description: \"Voice recognition not supported in this browser\",\n        variant: \"destructive\",\n      });\n      return null;\n    }\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    \n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.maxAlternatives = 1;\n    recognition.lang = voiceLanguage;\n\n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n\n    recognition.onresult = (event: any) => {\n      const transcript = event.results[0][0].transcript;\n      setAiQuery(transcript);\n      setIsListening(false);\n    };\n\n    recognition.onerror = (event: any) => {\n      console.error('Speech recognition error', event.error);\n      setIsListening(false);\n      toast({\n        title: t('common.error'),\n        description: `Voice recognition error: ${event.error}`,\n        variant: \"destructive\",\n      });\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    return recognition;\n  };\n\n  const startVoiceRecognition = () => {\n    const recognitionInstance = initializeVoiceRecognition();\n    if (recognitionInstance) {\n      setRecognition(recognitionInstance);\n      recognitionInstance.start();\n      toast({\n        title: \"Voice Input\",\n        description: voiceLanguage === \"bn-BD\" ? \"বাংলায় বলুন...\" : \"Speak now...\",\n      });\n    }\n  };\n\n  const stopVoiceRecognition = () => {\n    if (recognition) {\n      recognition.stop();\n      setIsListening(false);\n    }\n  };\n\n  const toggleVoiceLanguage = () => {\n    const newLang = voiceLanguage === \"en-US\" ? \"bn-BD\" : \"en-US\";\n    setVoiceLanguage(newLang);\n    toast({\n      title: \"Language Changed\",\n      description: newLang === \"bn-BD\" ? \"বাংলা ভয়েস ইনপুট সক্রিয়\" : \"English voice input activated\",\n    });\n  };\n\n  const handleAIDiscussion = async () => {\n    if (!aiQuery.trim()) {\n      toast({\n        title: t('common.error'),\n        description: t('ai.query.placeholder'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoadingAI(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/medicines/ai-discuss\", { \n        query: aiQuery,\n        language: voiceLanguage === \"bn-BD\" ? \"bengali\" : \"english\"\n      });\n      const data = await response.json();\n      setAiResponse(data.response);\n    } catch (error) {\n      toast({\n        title: t('common.error'),\n        description: t('ai.try.again.later'),\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoadingAI(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 space-y-4 pb-20\">\n        <div className=\"animate-pulse space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"bg-white rounded-xl p-4 shadow-sm border h-32\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pb-20\">\n      {/* Header */}\n      <div className=\"p-4 border-b bg-white sticky top-16 z-10\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h1 className=\"text-xl font-semibold text-neutral-800\">{t('medicines.title') || 'Medicines'}</h1>\n          <div className=\"flex space-x-2\">\n            {user.aiFeatureEnabled !== false && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"touch-target\"\n                onClick={() => setShowAIModal(true)}\n              >\n                <Bot className=\"h-4 w-4 mr-2\" />\n                {t('medicines.discuss.ai') || 'Discuss with AI'}\n              </Button>\n            )}\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"touch-target\"\n              onClick={() => setShowUploadModal(true)}\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n{t('button.upload.list')}\n            </Button>\n            <Button\n              size=\"sm\"\n              className=\"touch-target\"\n              onClick={() => setShowAddModal(true)}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t('medicines.add') || 'Add Medicine'}\n            </Button>\n          </div>\n        </div>\n\n        {/* Filters and Export Row */}\n        <div className=\"flex items-center justify-between mb-4 gap-2\">\n          <div className=\"flex items-center gap-2\">\n            <Button\n              size=\"sm\"\n              variant={showLowStockFilter ? \"default\" : \"outline\"}\n              onClick={() => setShowLowStockFilter(!showLowStockFilter)}\n              className=\"touch-target\"\n            >\n              <Filter className=\"h-4 w-4 mr-2\" />\n              {t('filter.low.stock')}\n              {lowStockMedicines.length > 0 && (\n                <Badge variant=\"destructive\" className=\"ml-2 px-1 py-0.5 text-xs\">\n                  {lowStockMedicines.length}\n                </Badge>\n              )}\n            </Button>\n          </div>\n\n          {lowStockMedicines.length > 0 && (\n            <div className=\"flex items-center gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={exportLowStockToCSV}\n                className=\"touch-target\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n{t('export.low.stock.csv')}\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={exportLowStockToPDF}\n                className=\"touch-target\"\n              >\n                <FileText className=\"h-4 w-4 mr-2\" />\n{t('export.low.stock.pdf')}\n              </Button>\n            </div>\n          )}\n        </div>\n        \n        {/* Search with Voice Input */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-neutral-400 h-4 w-4\" />\n          <Input\n            placeholder={t('search.placeholder')}\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 pr-12 form-input\"\n          />\n          {/* Voice Search Button */}\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className={`absolute top-1/2 right-2 transform -translate-y-1/2 p-2 h-8 w-8 ${\n              isListening \n                ? 'text-red-500 hover:text-red-600 bg-red-50' \n                : 'text-gray-500 hover:text-gray-700'\n            }`}\n            onClick={() => {\n              if (isListening) {\n                stopVoiceRecognition();\n              } else {\n                // For search, we'll use the current voiceLanguage and set search term instead of AI query\n                const recognitionInstance = initializeVoiceRecognition();\n                if (recognitionInstance) {\n                  recognitionInstance.onresult = (event: any) => {\n                    const transcript = event.results[0][0].transcript;\n                    setSearchTerm(transcript);\n                    setIsListening(false);\n                  };\n                  setRecognition(recognitionInstance);\n                  recognitionInstance.start();\n                  toast({\n                    title: \"Voice Search\",\n                    description: voiceLanguage === \"bn-BD\" ? \"খুঁজে পেতে বাংলায় বলুন...\" : \"Speak to search...\",\n                  });\n                }\n              }\n            }}\n            title={isListening ? \"Stop voice search\" : \"Start voice search\"}\n          >\n            {isListening ? <MicOff className=\"h-4 w-4\" /> : <Mic className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n        \n        {/* Voice Status Indicator for Search */}\n        {isListening && (\n          <div className=\"mt-2 flex items-center space-x-2 text-sm text-red-600 bg-red-50 p-2 rounded\">\n            <div className=\"flex space-x-1\">\n              <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n              <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n              <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n            </div>\n            <span>\n              {voiceLanguage === \"bn-BD\" ? \"খুঁজছি... বাংলায় বলুন\" : \"Listening for search... Speak now\"}\n            </span>\n          </div>\n        )}\n      </div>\n\n      {/* Medicines List */}\n      <div className=\"p-4 space-y-3\">\n        {filteredMedicines.length === 0 ? (\n          <Card className=\"shadow-sm border border-neutral-200\">\n            <CardContent className=\"p-8 text-center\">\n              <Pill className=\"h-16 w-16 text-neutral-300 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-neutral-800 mb-2\">\n{searchTerm ? t('medicine.no.found') : t('medicine.no.medicines')}\n              </h3>\n              <p className=\"text-neutral-500 mb-4\">\n{searchTerm \n                  ? t('medicine.try.different') \n                  : t('medicine.add.first')\n                }\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => setShowAddModal(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n{t('medicines.add')}\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          filteredMedicines.map((medicine: any) => (\n            <Card key={medicine.id} className=\"shadow-sm border border-neutral-200 card-hover\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <h3 className=\"font-semibold text-neutral-800\">{translateData(medicine.name)}</h3>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {medicine.code}\n                      </Badge>\n                      {(medicine.currentStock || 0) <= (medicine.lowStockThreshold || 10) && (\n                        <Badge variant=\"destructive\" className=\"text-xs\">\n{t('medicine.low.stock')}\n                        </Badge>\n                      )}\n                    </div>\n                    {medicine.description && (\n                      <p className=\"text-sm text-neutral-600 mb-2\">{medicine.description}</p>\n                    )}\n                    <div className=\"flex items-center space-x-4 text-sm text-neutral-500\">\n                      {medicine.company && (\n                        <span><strong>{t('medicine.company')}:</strong> {translateData(medicine.company)}</span>\n                      )}\n                      {medicine.power && (\n                        <span><strong>{t('medicines.power')}:</strong> {translateData(medicine.power)}</span>\n                      )}\n                      {medicine.dosage && (\n                        <span><strong>{t('medicines.dosage')}:</strong> {translateData(medicine.dosage)}</span>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Action Buttons */}\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"touch-target\"\n                      onClick={() => setSelectedMedicine(medicine)}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      View\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"touch-target\"\n                      onClick={() => {\n                        setEditingMedicine(medicine);\n                        setEditMedicine({\n                          name: medicine.name,\n                          code: medicine.code,\n                          company: medicine.company || \"\",\n                          description: medicine.description || \"\",\n                          power: medicine.power || \"\",\n                          dosage: medicine.dosage || \"\",\n                          symptoms: medicine.symptoms || \"\",\n                          currentStock: medicine.currentStock || 0,\n                          lowStockThreshold: medicine.lowStockThreshold || 10,\n                        });\n                        setShowEditModal(true);\n                      }}\n                    >\n                      <Edit className=\"h-4 w-4 mr-1\" />\n                      Edit\n                    </Button>\n                    {user?.canDeletePatients && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        className=\"touch-target\"\n                        onClick={() => {\n                          if (window.confirm(`Are you sure you want to delete ${medicine.name}? This action cannot be undone.`)) {\n                            deleteMedicineMutation.mutate(medicine.id);\n                          }\n                        }}\n                        disabled={deleteMedicineMutation.isPending}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\n                        Delete\n                      </Button>\n                    )}\n                  </div>\n                </div>\n                \n                {medicine.symptoms && (\n                  <div className=\"mb-3\">\n                    <p className=\"text-sm text-neutral-600 font-medium mb-1\">{t('medicine.used.for')}:</p>\n                    <p className=\"text-sm text-neutral-700\">{translateData(medicine.symptoms)}</p>\n                  </div>\n                )}\n                \n                <div className=\"flex items-center space-x-4 text-xs text-neutral-500\">\n                  <span>{t('medicine.stock.info')}: {medicine.currentStock || 0}</span>\n                  <span>{t('medicine.alert.at')}: {medicine.lowStockThreshold || 10}</span>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Add Medicine Modal */}\n      <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{t('medicines.add')}</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">{t('medicines.name')} *</Label>\n              <Input\n                id=\"name\"\n                value={newMedicine.name}\n                onChange={(e) => {\n                  const newName = e.target.value;\n                  setNewMedicine(prev => ({ ...prev, name: newName }));\n                  generateCode(newName);\n                }}\n                placeholder=\"e.g., Arnica Montana\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"code\">{t('medicine.code')} *</Label>\n              <Input\n                id=\"code\"\n                value={newMedicine.code}\n                onChange={(e) => {\n                  const code = e.target.value.toUpperCase();\n                  setNewMedicine(prev => ({ ...prev, code }));\n                  \n                  // Check if code already exists\n                  const existingMedicine = medicines.find(med => med.code === code);\n                  if (existingMedicine && code.length > 0) {\n                    // Show warning but don't prevent input\n                    console.warn(\"Medicine code already exists:\", code);\n                  }\n                }}\n                placeholder=\"e.g., ARN\"\n                className={`form-input ${medicines.find(med => med.code === newMedicine.code) && newMedicine.code ? 'border-red-500' : ''}`}\n                maxLength={10}\n              />\n              {medicines.find(med => med.code === newMedicine.code) && newMedicine.code && (\n                <p className=\"text-sm text-red-500 mt-1\">This medicine code already exists. Please use a unique code.</p>\n              )}\n              <p className=\"text-xs text-neutral-500 mt-1\">\n                Auto-generated from medicine name or enter custom code\n              </p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"company\">Company/Manufacturer</Label>\n              <Input\n                id=\"company\"\n                value={newMedicine.company}\n                onChange={(e) => setNewMedicine(prev => ({ ...prev, company: e.target.value }))}\n                placeholder=\"e.g., Boiron, Heel, SBL\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Input\n                id=\"description\"\n                value={newMedicine.description}\n                onChange={(e) => setNewMedicine(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"Brief description of the medicine\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"power\">Power</Label>\n              <Input\n                id=\"power\"\n                value={newMedicine.power}\n                onChange={(e) => setNewMedicine(prev => ({ ...prev, power: e.target.value }))}\n                placeholder=\"e.g., 30, 200, 1M\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"dosage\">Dosage Instructions</Label>\n              <Input\n                id=\"dosage\"\n                value={newMedicine.dosage}\n                onChange={(e) => setNewMedicine(prev => ({ ...prev, dosage: e.target.value }))}\n                placeholder=\"e.g., 3 times daily, 2 drops twice daily\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"symptoms\">Symptoms/Indications</Label>\n              <Textarea\n                id=\"symptoms\"\n                value={newMedicine.symptoms}\n                onChange={(e) => setNewMedicine(prev => ({ ...prev, symptoms: e.target.value }))}\n                placeholder=\"What symptoms or conditions this medicine is used for...\"\n                className=\"form-input min-h-20\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"currentStock\">Current Stock</Label>\n                <Input\n                  id=\"currentStock\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={newMedicine.currentStock}\n                  onChange={(e) => setNewMedicine(prev => ({ ...prev, currentStock: parseInt(e.target.value) || 0 }))}\n                  placeholder=\"0\"\n                  className=\"form-input\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"lowStockThreshold\">Low Stock Alert</Label>\n                <Input\n                  id=\"lowStockThreshold\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={newMedicine.lowStockThreshold}\n                  onChange={(e) => setNewMedicine(prev => ({ ...prev, lowStockThreshold: parseInt(e.target.value) || 10 }))}\n                  placeholder=\"10\"\n                  className=\"form-input\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => setShowAddModal(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                className=\"flex-1\"\n                onClick={handleAddMedicine}\n                disabled={createMedicineMutation.isPending}\n              >\n                {createMedicineMutation.isPending ? \"Adding...\" : \"Add Medicine\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Medicine Details Modal */}\n      <Dialog open={!!selectedMedicine} onOpenChange={() => setSelectedMedicine(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Medicine Details</DialogTitle>\n          </DialogHeader>\n          \n          {selectedMedicine && (\n            <div className=\"space-y-4\">\n              <div>\n                <div className=\"flex items-center space-x-2 mb-3\">\n                  <h3 className=\"text-xl font-semibold text-neutral-800\">{selectedMedicine.name}</h3>\n                  <Badge variant=\"secondary\">{selectedMedicine.code}</Badge>\n                </div>\n                \n                {selectedMedicine.description && (\n                  <p className=\"text-neutral-600 mb-4\">{selectedMedicine.description}</p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Medicine Code:</span>\n                  <p>{selectedMedicine.code}</p>\n                </div>\n                {selectedMedicine.company && (\n                  <div>\n                    <span className=\"font-medium text-neutral-700\">Company:</span>\n                    <p>{selectedMedicine.company}</p>\n                  </div>\n                )}\n                {selectedMedicine.power && (\n                  <div>\n                    <span className=\"font-medium text-neutral-700\">Power:</span>\n                    <p>{selectedMedicine.power}</p>\n                  </div>\n                )}\n                {selectedMedicine.dosage && (\n                  <div>\n                    <span className=\"font-medium text-neutral-700\">Dosage:</span>\n                    <p>{selectedMedicine.dosage}</p>\n                  </div>\n                )}\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Current Stock:</span>\n                  <p className={(selectedMedicine.currentStock || 0) <= (selectedMedicine.lowStockThreshold || 10) ? 'text-red-600 font-semibold' : ''}>\n                    {selectedMedicine.currentStock || 0}\n                  </p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Low Stock Alert:</span>\n                  <p>{selectedMedicine.lowStockThreshold || 10}</p>\n                </div>\n              </div>\n\n              {selectedMedicine.symptoms && (\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Symptoms/Indications:</span>\n                  <p className=\"text-sm mt-1\">{selectedMedicine.symptoms}</p>\n                </div>\n              )}\n\n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setSelectedMedicine(null)}\n                >\n                  Close\n                </Button>\n                <Button\n                  className=\"flex-1\"\n                  onClick={() => {\n                    handleEditMedicine(selectedMedicine);\n                    setSelectedMedicine(null);\n                  }}\n                >\n                  Edit/Update\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Medicine Modal */}\n      <Dialog open={showEditModal} onOpenChange={setShowEditModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Medicine</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"edit-name\">Medicine Name *</Label>\n              <Input\n                id=\"edit-name\"\n                value={editMedicine.name}\n                onChange={(e) => {\n                  setEditMedicine(prev => ({ ...prev, name: e.target.value }));\n                }}\n                placeholder=\"e.g., Arnica Montana\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-code\">Medicine Code *</Label>\n              <Input\n                id=\"edit-code\"\n                value={editMedicine.code}\n                onChange={(e) => {\n                  const code = e.target.value.toUpperCase();\n                  setEditMedicine(prev => ({ ...prev, code }));\n                }}\n                placeholder=\"e.g., ARN\"\n                className={`form-input ${medicines.find(med => med.code === editMedicine.code && med.id !== editingMedicine?.id) && editMedicine.code ? 'border-red-500' : ''}`}\n                maxLength={10}\n              />\n              {medicines.find(med => med.code === editMedicine.code && med.id !== editingMedicine?.id) && editMedicine.code && (\n                <p className=\"text-sm text-red-500 mt-1\">This medicine code already exists. Please use a unique code.</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-company\">Company/Manufacturer</Label>\n              <Input\n                id=\"edit-company\"\n                value={editMedicine.company}\n                onChange={(e) => setEditMedicine(prev => ({ ...prev, company: e.target.value }))}\n                placeholder=\"e.g., Boiron, Heel, SBL\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-description\">Description</Label>\n              <Input\n                id=\"edit-description\"\n                value={editMedicine.description}\n                onChange={(e) => setEditMedicine(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"Brief description of the medicine\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-power\">Power</Label>\n              <Input\n                id=\"edit-power\"\n                value={editMedicine.power}\n                onChange={(e) => setEditMedicine(prev => ({ ...prev, power: e.target.value }))}\n                placeholder=\"e.g., 30, 200, 1M\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-dosage\">Dosage Instructions</Label>\n              <Input\n                id=\"edit-dosage\"\n                value={editMedicine.dosage}\n                onChange={(e) => setEditMedicine(prev => ({ ...prev, dosage: e.target.value }))}\n                placeholder=\"e.g., 3 times daily, 2 drops twice daily\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-symptoms\">Symptoms/Indications</Label>\n              <Textarea\n                id=\"edit-symptoms\"\n                value={editMedicine.symptoms}\n                onChange={(e) => setEditMedicine(prev => ({ ...prev, symptoms: e.target.value }))}\n                placeholder=\"What symptoms or conditions this medicine is used for...\"\n                className=\"form-input min-h-20\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-currentStock\">Current Stock</Label>\n                <Input\n                  id=\"edit-currentStock\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={editMedicine.currentStock}\n                  onChange={(e) => setEditMedicine(prev => ({ ...prev, currentStock: parseInt(e.target.value) || 0 }))}\n                  placeholder=\"0\"\n                  className=\"form-input\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-lowStockThreshold\">Low Stock Alert</Label>\n                <Input\n                  id=\"edit-lowStockThreshold\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={editMedicine.lowStockThreshold}\n                  onChange={(e) => setEditMedicine(prev => ({ ...prev, lowStockThreshold: parseInt(e.target.value) || 10 }))}\n                  placeholder=\"10\"\n                  className=\"form-input\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => {\n                  setShowEditModal(false);\n                  setEditingMedicine(null);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                className=\"flex-1\"\n                onClick={handleUpdateMedicine}\n                disabled={updateMedicineMutation.isPending}\n              >\n                {updateMedicineMutation.isPending ? \"Updating...\" : \"Update Medicine\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* AI Discussion Modal */}\n      <Dialog open={showAIModal} onOpenChange={setShowAIModal}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-hidden\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Bot className=\"h-5 w-5 text-primary\" />\n              <span>{t('medicines.discuss.title') || 'Discuss with AI'}</span>\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* Voice Language Selection */}\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <Globe className=\"h-4 w-4 text-primary\" />\n                <span className=\"text-sm font-medium\">Voice Language:</span>\n                <span className=\"text-sm text-gray-600\">\n                  {voiceLanguage === \"bn-BD\" ? \"বাংলা\" : \"English\"}\n                </span>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={toggleVoiceLanguage}\n                className=\"text-xs px-3\"\n              >\n                Switch to {voiceLanguage === \"bn-BD\" ? \"English\" : \"বাংলা\"}\n              </Button>\n            </div>\n\n            <div>\n              <Label htmlFor=\"ai-query\" className=\"text-sm font-medium\">\n                {t('medicines.discuss.query') || 'Ask about medicine usage or get medicine recommendations for diseases'}\n              </Label>\n              <div className=\"mt-2 space-y-2\">\n                <div className=\"relative\">\n                  <Textarea\n                    id=\"ai-query\"\n                    placeholder={\n                      voiceLanguage === \"bn-BD\" \n                        ? 'যেমন: \"অ্যার্নিকা মন্টানা কিসের জন্য ব্যবহৃত হয়?\" বা \"জ্বর এবং মাথাব্যথার জন্য ঔষধ\"'\n                        : 'e.g., \"What is Arnica Montana used for?\" or \"Medicines for fever and headache\"'\n                    }\n                    value={aiQuery}\n                    onChange={(e) => setAiQuery(e.target.value)}\n                    className=\"min-h-[80px] pr-12\"\n                  />\n                  {/* Voice Input Button */}\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className={`absolute top-2 right-2 p-2 h-8 w-8 ${\n                      isListening \n                        ? 'text-red-500 hover:text-red-600 bg-red-50' \n                        : 'text-gray-500 hover:text-gray-700'\n                    }`}\n                    onClick={isListening ? stopVoiceRecognition : startVoiceRecognition}\n                    title={isListening ? \"Stop listening\" : \"Start voice input\"}\n                  >\n                    {isListening ? <MicOff className=\"h-4 w-4\" /> : <Mic className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n                \n                {/* Voice Status Indicator */}\n                {isListening && (\n                  <div className=\"flex items-center space-x-2 text-sm text-red-600 bg-red-50 p-2 rounded\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n                      <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n                      <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n                    </div>\n                    <span>\n                      {voiceLanguage === \"bn-BD\" ? \"শুনছি... বাংলায় বলুন\" : \"Listening... Speak now\"}\n                    </span>\n                  </div>\n                )}\n\n                <Button \n                  onClick={handleAIDiscussion}\n                  disabled={isLoadingAI || !aiQuery.trim()}\n                  className=\"w-full\"\n                >\n                  {isLoadingAI ? (\n                    <>\n                      <MessageCircle className=\"h-4 w-4 mr-2 animate-spin\" />\n                      {t('medicines.discuss.loading') || 'Getting AI Response...'}\n                    </>\n                  ) : (\n                    <>\n                      <MessageCircle className=\"h-4 w-4 mr-2\" />\n                      {t('medicines.discuss.ask') || 'Ask AI'}\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            {aiResponse && (\n              <div className=\"border-t pt-4\">\n                <Label className=\"text-sm font-medium text-primary\">\n                  {t('medicines.discuss.response') || 'AI Response:'}\n                </Label>\n                <ScrollArea className=\"mt-2 h-64 w-full rounded-md border p-4\">\n                  <div className=\"prose prose-sm max-w-none\">\n                    <div className=\"whitespace-pre-wrap text-sm\">\n                      {translateData(aiResponse)}\n                    </div>\n                  </div>\n                </ScrollArea>\n                <div className=\"mt-3 flex justify-end\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setAiQuery(\"\");\n                      setAiResponse(\"\");\n                    }}\n                  >\n                    {t('medicines.discuss.clear') || 'Clear & Ask Again'}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Upload Medicines Modal */}\n      <Dialog open={showUploadModal} onOpenChange={setShowUploadModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Upload className=\"h-5 w-5 text-primary\" />\n              <span>Upload Medicine List</span>\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            {/* File Upload Instructions */}\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h4 className=\"font-medium text-blue-900 mb-2\">Supported File Formats:</h4>\n              <ul className=\"text-sm text-blue-800 space-y-1\">\n                <li>• <strong>CSV:</strong> Comma-separated values (.csv)</li>\n                <li>• <strong>Excel:</strong> Spreadsheet files (.xlsx, .xls)</li>\n                <li>• <strong>PDF:</strong> Text-based PDF documents (.pdf)</li>\n              </ul>\n            </div>\n\n            {/* Expected Format */}\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <h4 className=\"font-medium text-green-900 mb-2\">Expected Column Format:</h4>\n              <div className=\"text-sm text-green-800 space-y-1\">\n                <p><strong>Required:</strong> Name, Code</p>\n                <p><strong>Optional:</strong> Description, Power, Dosage, Symptoms</p>\n              </div>\n              <div className=\"mt-2 text-xs text-green-700 bg-green-100 rounded p-2 font-mono\">\n                Name, Code, Description, Power, Dosage, Symptoms<br/>\n                Arnica Montana, ARN, For trauma, 30C, 3 times daily, Bruises and shock\n              </div>\n            </div>\n\n            {/* File Upload Area */}\n            <div className=\"space-y-4\">\n              <Label htmlFor=\"medicine-file\">Select File</Label>\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors\">\n                <input\n                  id=\"medicine-file\"\n                  type=\"file\"\n                  accept=\".csv,.xlsx,.xls,.pdf\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      setUploadFile(file);\n                      setUploadResults(null);\n                    }\n                  }}\n                  className=\"hidden\"\n                />\n                <label htmlFor=\"medicine-file\" className=\"cursor-pointer\">\n                  {uploadFile ? (\n                    <div className=\"flex items-center justify-center space-x-2 text-green-600\">\n                      {getFileIcon(uploadFile)}\n                      <span className=\"font-medium\">{uploadFile.name}</span>\n                      <span className=\"text-sm text-gray-500\">({(uploadFile.size / 1024).toFixed(1)} KB)</span>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <Upload className=\"h-8 w-8 text-gray-400 mx-auto\" />\n                      <p className=\"text-gray-600\">Click to select file or drag and drop</p>\n                      <p className=\"text-sm text-gray-500\">CSV, Excel, or PDF files only</p>\n                    </div>\n                  )}\n                </label>\n              </div>\n            </div>\n\n            {/* Upload Progress */}\n            {isUploading && (\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600\"></div>\n                  <span className=\"text-yellow-800\">{uploadProgress}</span>\n                </div>\n              </div>\n            )}\n\n            {/* Upload Results */}\n            {uploadResults && (\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                <h4 className=\"font-medium text-green-900 mb-2\">Upload Results:</h4>\n                <div className=\"text-sm text-green-800 space-y-1\">\n                  <p>✅ Successfully imported: <strong>{uploadResults.successful}</strong> medicines</p>\n                  {uploadResults.failed > 0 && (\n                    <p>❌ Failed to import: <strong>{uploadResults.failed}</strong> medicines</p>\n                  )}\n                  {uploadResults.errors && uploadResults.errors.length > 0 && (\n                    <div className=\"mt-2\">\n                      <p className=\"font-medium\">Errors:</p>\n                      <ul className=\"list-disc list-inside text-xs space-y-1 max-h-20 overflow-y-auto\">\n                        {uploadResults.errors.slice(0, 5).map((error: string, index: number) => (\n                          <li key={index}>{error}</li>\n                        ))}\n                        {uploadResults.errors.length > 5 && (\n                          <li>... and {uploadResults.errors.length - 5} more errors</li>\n                        )}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => {\n                  setShowUploadModal(false);\n                  setUploadFile(null);\n                  setUploadResults(null);\n                  setUploadProgress(\"\");\n                }}\n              >\n                {uploadResults ? \"Close\" : \"Cancel\"}\n              </Button>\n              <Button\n                className=\"flex-1\"\n                onClick={handleFileUpload}\n                disabled={!uploadFile || isUploading}\n              >\n                {isUploading ? \"Uploading...\" : \"Upload Medicines\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":55051},"client/src/pages/NotificationsPage.tsx":{"content":"import React from 'react';\nimport { NotificationSettings } from '@/components/notifications/NotificationSettings';\nimport { useIsMobile } from '@/hooks/use-mobile';\n\nexport const NotificationsPage: React.FC = () => {\n  const isMobile = useIsMobile();\n\n  return (\n    <div className={`${isMobile ? 'mobile-container' : 'container mx-auto'} p-4 max-w-4xl`}>\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Notification Settings</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Manage your push notifications and reminder preferences\n          </p>\n        </div>\n        \n        <NotificationSettings />\n      </div>\n    </div>\n  );\n};","size_bytes":706},"client/src/pages/PatientDetailPage.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ArrowLeft, Plus, FileText, Calendar, User, Phone, MapPin, Clock, Edit, X, Trash2, Printer, MessageCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { useState } from \"react\";\nimport React from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport type { Patient, Prescription, Medicine } from \"@shared/schema\";\n\nconst prescriptionFormSchema = z.object({\n  symptoms: z.string().min(1, \"Symptoms are required\"),\n  medicines: z.array(z.object({\n    medicineId: z.string(),\n    dosage: z.string().min(1, \"Dosage is required\"),\n    frequency: z.string().min(1, \"Frequency is required\"),\n    duration: z.string().min(1, \"Duration is required\"),\n    instructions: z.string().optional()\n  })).min(1, \"At least one medicine is required\"),\n  notes: z.string().optional()\n});\n\ntype PrescriptionFormValues = z.infer<typeof prescriptionFormSchema>;\n\nexport default function PatientDetailPage() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { t, translateData } = useLanguage();\n  const isMobile = useIsMobile();\n  const queryClient = useQueryClient();\n  const [isAddingPrescription, setIsAddingPrescription] = useState(false);\n  const [prescriptionType, setPrescriptionType] = useState<'new' | 'existing' | 'form' | null>(null);\n  const [selectedExistingPrescription, setSelectedExistingPrescription] = useState<Prescription | null>(null);\n  const [medicineSuggestions, setMedicineSuggestions] = useState<any[]>([]);\n  const [isLoadingSuggestions, setIsLoadingSuggestions] = useState(false);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [editingPrescription, setEditingPrescription] = useState<Prescription | null>(null);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showPrintPreview, setShowPrintPreview] = useState(false);\n  const [selectedPrescriptionToPrint, setSelectedPrescriptionToPrint] = useState<Prescription | null>(null);\n  const [selectedTemplate, setSelectedTemplate] = useState<string>('');\n  const [selectedCustomTemplate, setSelectedCustomTemplate] = useState<any>(null);\n  const [showMedicineForm, setShowMedicineForm] = useState(false);\n\n  // Fetch patient data\n  const { data: patient, isLoading: patientLoading } = useQuery<Patient>({\n    queryKey: ['/api/patients', id],\n    enabled: !!id\n  });\n\n  // Fetch patient prescriptions\n  const { data: prescriptions = [], isLoading: prescriptionsLoading } = useQuery<Prescription[]>({\n    queryKey: ['/api/prescriptions', 'patient', id],\n    enabled: !!id\n  });\n\n  // Fetch medicines for prescription form\n  const { data: medicines = [] } = useQuery<Medicine[]>({\n    queryKey: ['/api/medicines']\n  });\n\n  // Fetch current user to check permissions\n  const { data: user } = useQuery({\n    queryKey: ['/api/auth/me']\n  });\n\n  // Fetch doctor's assigned templates for print preview\n  const { data: assignedTemplates = [], isLoading: templatesLoading } = useQuery({\n    queryKey: ['/api/doctor/templates'],\n    enabled: !!(user && (user as any).role === 'doctor')\n  });\n\n  // Set default template when assigned templates load\n  React.useEffect(() => {\n    if ((assignedTemplates as any[])?.length > 0 && !selectedTemplate) {\n      const templatesArray = assignedTemplates as any[];\n      const defaultTemplate = templatesArray.find(t => t.isDefault) || templatesArray[0];\n      setSelectedTemplate(defaultTemplate.templateId);\n      setSelectedCustomTemplate(defaultTemplate);\n    }\n  }, [assignedTemplates, selectedTemplate]);\n\n  const form = useForm<PrescriptionFormValues>({\n    resolver: zodResolver(prescriptionFormSchema),\n    defaultValues: {\n      symptoms: \"\",\n      medicines: [],\n      notes: \"\"\n    }\n  });\n\n  // Get unique diseases/symptoms from previous prescriptions\n  const previousDiseases = prescriptions.reduce((unique: string[], prescription: Prescription) => {\n    if (!unique.includes(prescription.symptoms)) {\n      unique.push(prescription.symptoms);\n    }\n    return unique;\n  }, []);\n\n  const addPrescriptionMutation = useMutation({\n    mutationFn: (data: PrescriptionFormValues) => \n      apiRequest('POST', '/api/prescriptions', {\n        ...data,\n        patientId: id,\n        doctorId: 1 // This should come from auth context\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/prescriptions'] });\n      setIsAddingPrescription(false);\n      setPrescriptionType(null);\n      setSelectedExistingPrescription(null);\n      setShowMedicineForm(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Prescription added successfully\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add prescription\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updatePrescriptionMutation = useMutation({\n    mutationFn: ({ id: prescriptionId, data }: { id: string, data: PrescriptionFormValues }) => \n      apiRequest('PATCH', `/api/prescriptions/${prescriptionId}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/prescriptions', 'patient', id] });\n      setShowEditModal(false);\n      setEditingPrescription(null);\n      setShowMedicineForm(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Prescription updated successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to update prescription\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deletePatientMutation = useMutation({\n    mutationFn: async (patientId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/patients/${patientId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/prescriptions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Patient deleted successfully\",\n      });\n      setLocation('/patients'); // Navigate back to patients list\n    },\n    onError: (error: any) => {\n      console.error(\"Delete error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete patient\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const showPrintPreviewModal = (prescription: Prescription) => {\n    setSelectedPrescriptionToPrint(prescription);\n    setShowPrintPreview(true);\n  };\n\n  const sendPrescriptionViaWhatsApp = (prescription: Prescription) => {\n    if (!patient?.phone) {\n      toast({\n        title: \"Error\",\n        description: \"Patient phone number is required to send via WhatsApp\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const doctorName = (user as any)?.name || 'Dr. [Doctor Name]';\n    const clinicName = (user as any)?.clinicName || 'My Homeo Health Clinic';\n    \n    // Generate prescription text for WhatsApp\n    const medicineDetails = Array.isArray(prescription.medicines) \n      ? (prescription.medicines as any[]).map((med: any) => {\n          const medicine = medicines.find(m => m.id === med.medicineId);\n          return {\n            name: medicine?.code || medicine?.name || 'Unknown Medicine',\n            power: medicine?.power || '',\n            dosage: med.dosage,\n            frequency: med.frequency,\n            duration: med.duration,\n            instructions: med.instructions\n          };\n        })\n      : [];\n\n    // Create WhatsApp message\n    const message = `\n🏥 *${clinicName}*\n👨‍⚕️ Dr. ${doctorName}\n${(user as any)?.degree ? `(${(user as any)?.degree})` : ''}\n\n📋 *PRESCRIPTION*\n📅 Date: ${format(new Date(prescription.createdAt!), 'dd/MM/yyyy')}\n🆔 Prescription ID: ${prescription.prescriptionId}\n\n👤 *Patient Details:*\nName: ${patient.name}\nAge: ${patient.age} years\nGender: ${patient.gender}\nPatient ID: ${patient.patientId}\n\n🔍 *Chief Complaints:*\n${prescription.symptoms}\n\n💊 *Medicines Prescribed:*\n${medicineDetails.map((med, index) => `\n${index + 1}. *${med.name}${med.power ? ` (${med.power})` : ''}*\n   • Dosage: ${med.dosage}\n   • Frequency: ${med.frequency}\n   • Duration: ${med.duration}${med.instructions ? `\\n   • Instructions: ${med.instructions}` : ''}\n`).join('')}\n\n${prescription.notes ? `📝 *Additional Notes:*\\n${prescription.notes}\\n` : ''}\n---\nThis is a digital prescription from ${clinicName}.\nFor any queries, please contact the clinic.\n\n📞 Contact: ${(user as any)?.phone || 'Contact clinic for details'}\n`.trim();\n\n    // Clean phone number (remove spaces, dashes, etc.)\n    const cleanPhone = patient.phone.replace(/\\D/g, '');\n    \n    // Create WhatsApp URL\n    const whatsappUrl = `https://wa.me/${cleanPhone}?text=${encodeURIComponent(message)}`;\n    \n    // Open WhatsApp\n    window.open(whatsappUrl, '_blank');\n    \n    toast({\n      title: \"WhatsApp opened\",\n      description: `Prescription ready to send to ${patient.name}`\n    });\n  };\n\n  const getTemplateStyles = (template: string) => {\n    const baseStyles = `\n      body {\n        font-family: Arial, sans-serif;\n        max-width: 800px;\n        margin: 0 auto;\n        padding: 20px;\n        line-height: 1.6;\n      }\n      @media print {\n        body { padding: 0; }\n        .no-print { display: none; }\n      }\n    `;\n\n    switch (template) {\n      case 'modern':\n        return baseStyles + `\n          .header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            text-align: center;\n            padding: 30px;\n            margin-bottom: 30px;\n            border-radius: 10px;\n          }\n          .clinic-name {\n            font-size: 28px;\n            font-weight: bold;\n            margin-bottom: 8px;\n          }\n          .doctor-name {\n            font-size: 20px;\n            opacity: 0.9;\n          }\n          .patient-info {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 30px;\n            background: #f8fafc;\n            padding: 20px;\n            border-radius: 10px;\n            border-left: 5px solid #667eea;\n          }\n          .symptoms {\n            background: #fef3c7;\n            padding: 20px;\n            border-radius: 10px;\n            margin-bottom: 20px;\n            border-left: 5px solid #f59e0b;\n          }\n          .medicine-item {\n            border: none;\n            padding: 20px;\n            margin-bottom: 15px;\n            border-radius: 10px;\n            background: #f1f5f9;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n          }\n          .notes {\n            background: #dbeafe;\n            padding: 20px;\n            border-radius: 10px;\n            margin-bottom: 20px;\n            border-left: 5px solid #3b82f6;\n          }\n          .footer {\n            text-align: center;\n            margin-top: 50px;\n            padding-top: 30px;\n            border-top: 2px solid #e2e8f0;\n          }\n        `;\n      \n      case 'minimal':\n        return baseStyles + `\n          .header {\n            text-align: center;\n            padding-bottom: 20px;\n            margin-bottom: 40px;\n            border-bottom: 1px solid #e5e5e5;\n          }\n          .clinic-name {\n            font-size: 24px;\n            font-weight: 300;\n            color: #333;\n            margin-bottom: 5px;\n          }\n          .doctor-name {\n            font-size: 16px;\n            color: #666;\n            font-weight: 300;\n          }\n          .patient-info {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 30px;\n            margin-bottom: 40px;\n            padding: 0;\n            background: none;\n          }\n          .symptoms {\n            background: none;\n            padding: 0;\n            border-left: 3px solid #333;\n            padding-left: 15px;\n            margin-bottom: 30px;\n          }\n          .medicine-item {\n            border: none;\n            padding: 15px 0;\n            margin-bottom: 15px;\n            background: none;\n            border-bottom: 1px solid #f0f0f0;\n          }\n          .notes {\n            background: none;\n            padding: 0;\n            border-left: 3px solid #666;\n            padding-left: 15px;\n            margin-bottom: 30px;\n          }\n          .footer {\n            text-align: center;\n            margin-top: 60px;\n            padding-top: 20px;\n            border-top: 1px solid #e5e5e5;\n          }\n        `;\n      \n      default: // classic\n        return baseStyles + `\n          .header {\n            text-align: center;\n            border-bottom: 2px solid #333;\n            padding-bottom: 20px;\n            margin-bottom: 30px;\n          }\n          .clinic-name {\n            font-size: 24px;\n            font-weight: bold;\n            color: #2563eb;\n            margin-bottom: 5px;\n          }\n          .doctor-name {\n            font-size: 18px;\n            color: #666;\n          }\n          .patient-info {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 30px;\n            background: #f8f9fa;\n            padding: 15px;\n            border-radius: 8px;\n          }\n          .symptoms {\n            background: #fff3cd;\n            padding: 15px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n          }\n          .medicine-item {\n            border: 1px solid #ddd;\n            padding: 15px;\n            margin-bottom: 10px;\n            border-radius: 8px;\n            background: #f8f9fa;\n          }\n          .notes {\n            background: #e7f3ff;\n            padding: 15px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n          }\n          .footer {\n            text-align: center;\n            margin-top: 50px;\n            padding-top: 20px;\n            border-top: 1px solid #ddd;\n            color: #666;\n          }\n        `;\n    }\n  };\n\n  const printPrescription = (prescription: Prescription, templateId: string) => {\n    // Create a new window for printing\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    // Get doctor name (this would normally come from auth context)\n    const doctorName = (user as any)?.name || 'Dr. [Doctor Name]';\n    \n    // Get medicines details\n    const medicineDetails = Array.isArray(prescription.medicines) \n      ? (prescription.medicines as any[]).map((med: any) => {\n          const medicine = medicines.find(m => m.id === med.medicineId);\n          return {\n            name: medicine?.code || medicine?.name || 'Unknown Medicine',\n            power: medicine?.power || '',\n            dosage: med.dosage,\n            frequency: med.frequency,\n            duration: med.duration,\n            instructions: med.instructions\n          };\n        })\n      : [];\n\n    // Find the selected template\n    const template = (assignedTemplates as any[])?.find(t => t.templateId === templateId);\n    \n    if (!template) {\n      toast({\n        title: \"Error\",\n        description: \"Selected template not found\",\n        variant: \"destructive\"\n      });\n      printWindow.close();\n      return;\n    }\n\n    // Handle file templates\n    if (template.templateType === 'file') {\n      toast({\n        title: \"Info\", \n        description: \"File templates are not yet supported for direct printing. Please use the file directly.\",\n        variant: \"destructive\"\n      });\n      printWindow.close();\n      return;\n    }\n\n    // Handle HTML templates\n    if (template.templateType === 'html' && template.templateContent) {\n      let templateHtml = template.templateContent;\n      \n      // Replace template variables with actual data\n      templateHtml = templateHtml.replace(/\\{\\{doctorName\\}\\}/g, doctorName);\n      templateHtml = templateHtml.replace(/\\{\\{clinicName\\}\\}/g, (user as any)?.clinicName || 'My Homeo Health Clinic');\n      templateHtml = templateHtml.replace(/\\{\\{degree\\}\\}/g, (user as any)?.degree || '');\n      templateHtml = templateHtml.replace(/\\{\\{specialist\\}\\}/g, (user as any)?.specialist || 'Homeopathic Specialist');\n      templateHtml = templateHtml.replace(/\\{\\{patientName\\}\\}/g, patient?.name || '');\n      templateHtml = templateHtml.replace(/\\{\\{patientId\\}\\}/g, patient?.patientId || '');\n      templateHtml = templateHtml.replace(/\\{\\{patientAge\\}\\}/g, patient?.age?.toString() || '');\n      templateHtml = templateHtml.replace(/\\{\\{patientGender\\}\\}/g, patient?.gender || '');\n      templateHtml = templateHtml.replace(/\\{\\{patientPhone\\}\\}/g, patient?.phone || '');\n      templateHtml = templateHtml.replace(/\\{\\{date\\}\\}/g, format(new Date(prescription.createdAt!), 'dd/MM/yyyy'));\n      templateHtml = templateHtml.replace(/\\{\\{prescriptionId\\}\\}/g, prescription.prescriptionId || '');\n      templateHtml = templateHtml.replace(/\\{\\{symptoms\\}\\}/g, prescription.symptoms || '');\n      templateHtml = templateHtml.replace(/\\{\\{notes\\}\\}/g, prescription.notes || '');\n      \n      // Replace medicines list\n      const medicinesHtml = medicineDetails.map((med, index) => `\n        <div style=\"margin-bottom: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px;\">\n          <div style=\"font-weight: bold; margin-bottom: 5px;\">\n            ${index + 1}. ${med.name}${med.power ? ` (${med.power})` : ''}\n          </div>\n          <div style=\"font-size: 11px;\">\n            <span style=\"margin-right: 15px;\"><strong>Dosage:</strong> ${med.dosage}</span>\n            <span style=\"margin-right: 15px;\"><strong>Frequency:</strong> ${med.frequency}</span>\n            <span><strong>Duration:</strong> ${med.duration}</span>\n            ${med.instructions ? `<br><strong>Instructions:</strong> ${med.instructions}` : ''}\n          </div>\n        </div>\n      `).join('');\n      templateHtml = templateHtml.replace(/\\{\\{medicines\\}\\}/g, medicinesHtml);\n\n      const printContent = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <title>Prescription - ${prescription.prescriptionId}</title>\n            <style>\n              body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }\n              @media print { \n                body { margin: 0; }\n                @page { margin: 1cm; }\n              }\n            </style>\n          </head>\n          <body>\n            ${templateHtml}\n          </body>\n        </html>\n      `;\n\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      printWindow.focus();\n      \n      // Wait a bit for content to load then print\n      setTimeout(() => {\n        printWindow.print();\n        printWindow.close();\n      }, 250);\n    }\n  };\n\n  const addMedicineToForm = () => {\n    const currentMedicines = form.getValues(\"medicines\");\n    form.setValue(\"medicines\", [\n      ...currentMedicines,\n      { medicineId: \"\", dosage: \"\", frequency: \"\", duration: \"\", instructions: \"\" }\n    ]);\n    setShowMedicineForm(true);\n  };\n\n  const removeMedicineFromForm = (index: number) => {\n    const currentMedicines = form.getValues(\"medicines\");\n    const newMedicines = currentMedicines.filter((_, i) => i !== index);\n    form.setValue(\"medicines\", newMedicines);\n    \n    // Hide medicine form if no medicines left\n    if (newMedicines.length === 0) {\n      setShowMedicineForm(false);\n    }\n  };\n\n  // Add medicine from suggestion - automatically adds to form\n  const addSuggestedMedicine = (suggestion: any) => {\n    const currentMedicines = form.getValues(\"medicines\");\n    \n    // Find medicine in our database if it exists\n    const matchingMedicine = (medicines as Medicine[]).find(m => \n      m.name.toLowerCase() === suggestion.name.toLowerCase()\n    );\n    \n    const newMedicine = {\n      medicineId: matchingMedicine?.id || \"\",\n      dosage: suggestion.dosage || suggestion.power || \"\",\n      frequency: suggestion.frequency || \"\",\n      duration: suggestion.duration || \"\",\n      instructions: suggestion.instructions || \"\"\n    };\n\n    form.setValue(\"medicines\", [...currentMedicines, newMedicine]);\n    setShowMedicineForm(true);\n  };\n\n  const onSubmit = (data: PrescriptionFormValues) => {\n    if (editingPrescription) {\n      updatePrescriptionMutation.mutate({ id: editingPrescription.id, data });\n    } else {\n      addPrescriptionMutation.mutate(data);\n    }\n  };\n\n  const handleEditPrescription = (prescription: Prescription) => {\n    setEditingPrescription(prescription);\n    setShowEditModal(true);\n    \n    // Pre-fill form with existing data\n    form.setValue(\"symptoms\", prescription.symptoms);\n    form.setValue(\"notes\", prescription.notes || \"\");\n    \n    // Pre-fill medicines if they exist\n    if (Array.isArray(prescription.medicines) && prescription.medicines.length > 0) {\n      form.setValue(\"medicines\", prescription.medicines.map((med: any) => ({\n        medicineId: med.medicineId || \"\",\n        dosage: med.dosage || \"\",\n        frequency: med.frequency || \"\",\n        duration: med.duration || \"\",\n        instructions: med.instructions || \"\"\n      })));\n    }\n  };\n\n  const handleExistingDiseaseSelect = (symptoms: string) => {\n    // Find the most recent prescription with these symptoms\n    const recentPrescription = prescriptions\n      .filter(p => p.symptoms === symptoms)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime())[0];\n    \n    if (recentPrescription) {\n      setSelectedExistingPrescription(recentPrescription);\n      // Pre-fill form with existing data\n      form.setValue(\"symptoms\", recentPrescription.symptoms);\n      form.setValue(\"notes\", recentPrescription.notes || \"\");\n      \n      // Pre-fill medicines if they exist\n      if (Array.isArray(recentPrescription.medicines) && recentPrescription.medicines.length > 0) {\n        form.setValue(\"medicines\", recentPrescription.medicines.map((med: any) => ({\n          medicineId: med.medicineId || \"\",\n          dosage: med.dosage || \"\",\n          frequency: med.frequency || \"\",\n          duration: med.duration || \"\",\n          instructions: med.instructions || \"\"\n        })));\n      }\n    }\n  };\n\n  const resetPrescriptionModal = () => {\n    setIsAddingPrescription(false);\n    setPrescriptionType(null);\n    setSelectedExistingPrescription(null);\n    setMedicineSuggestions([]);\n    setShowSuggestions(false);\n    setShowEditModal(false);\n    setEditingPrescription(null);\n    form.reset();\n  };\n\n  const getMedicineSuggestions = async (symptoms: string) => {\n    if (!symptoms.trim()) return;\n    \n    setIsLoadingSuggestions(true);\n    try {\n      const response = await fetch(`/api/medicines/suggestions?symptoms=${encodeURIComponent(symptoms)}`);\n      const data = await response.json();\n      setMedicineSuggestions(data.suggestions || []);\n      setShowSuggestions(true);\n    } catch (error) {\n      console.error('Failed to get medicine suggestions:', error);\n    } finally {\n      setIsLoadingSuggestions(false);\n    }\n  };\n\n  const getAISuggestions = async () => {\n    const symptoms = form.getValues(\"symptoms\");\n    if (!symptoms.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter symptoms first\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoadingSuggestions(true);\n    try {\n      const response = await apiRequest('POST', '/api/medicines/ai-suggestions', { symptoms });\n      const aiSuggestions = (response as any).suggestions || [];\n      setMedicineSuggestions(prev => [...prev, ...aiSuggestions]);\n      setShowSuggestions(true);\n      toast({\n        title: \"Success\",\n        description: `Found ${aiSuggestions.length} AI-powered suggestions`\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get AI suggestions. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoadingSuggestions(false);\n    }\n  };\n\n\n\n  if (patientLoading || !patient) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        {isMobile && (\n          <div className=\"mobile-header\">\n            <div className=\"flex items-center justify-between p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setLocation('/patients')}\n                  className=\"touch-target p-2 -ml-2\"\n                >\n                  <ArrowLeft className=\"h-5 w-5\" />\n                </Button>\n                <h1 className=\"text-lg font-semibold\">Patient Details</h1>\n              </div>\n            </div>\n          </div>\n        )}\n        <div className=\"flex items-center justify-center p-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!patient) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        {isMobile && (\n          <div className=\"mobile-header\">\n            <div className=\"flex items-center justify-between p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setLocation('/patients')}\n                  className=\"touch-target p-2 -ml-2\"\n                >\n                  <ArrowLeft className=\"h-5 w-5\" />\n                </Button>\n                <h1 className=\"text-lg font-semibold\">Patient Details</h1>\n              </div>\n            </div>\n          </div>\n        )}\n        <div className=\"flex items-center justify-center p-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-lg font-semibold\">Patient not found</h2>\n            <p className=\"text-muted-foreground\">The patient you're looking for doesn't exist.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {isMobile && (\n        <div className=\"mobile-header\">\n          <div className=\"flex items-center justify-between p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation('/patients')}\n                className=\"touch-target p-2 -ml-2\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n              <h1 className=\"text-lg font-semibold\">Patient Details</h1>\n            </div>\n            {(user as any)?.canDeletePatients && (\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                className=\"touch-target\"\n                onClick={() => {\n                  if (window.confirm(`Are you sure you want to delete ${patient?.name}? This will also delete all their prescriptions and appointments. This action cannot be undone.`)) {\n                    deletePatientMutation.mutate(patient?.id!);\n                  }\n                }}\n                disabled={deletePatientMutation.isPending}\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      )}\n      \n      <div className={`${isMobile ? 'pt-16 pb-20' : 'p-6'} space-y-6 max-w-4xl mx-auto`}>\n        {!isMobile && (\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setLocation('/patients')}\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span>Back to Patients</span>\n            </Button>\n          </div>\n        )}\n\n        {/* Patient Information Card */}\n        <Card>\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <User className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <h2 className=\"text-xl font-semibold\">{patient.name}</h2>\n                  <p className=\"text-sm text-muted-foreground\">Patient ID: {patient.patientId}</p>\n                </div>\n              </CardTitle>\n              <div className=\"flex items-center space-x-3\">\n                <Badge variant=\"secondary\">\n                  {patient.gender}, {patient.age} years\n                </Badge>\n                {/* Desktop Delete Button */}\n                {(user as any)?.canDeletePatients && !isMobile && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    className=\"touch-target\"\n                    onClick={() => {\n                      if (window.confirm(`Are you sure you want to delete ${patient.name}? This will also delete all their prescriptions and appointments. This action cannot be undone.`)) {\n                        deletePatientMutation.mutate(patient.id);\n                      }\n                    }}\n                    disabled={deletePatientMutation.isPending}\n                  >\n                    <Trash2 className=\"h-4 w-4 mr-2\" />\n                    {deletePatientMutation.isPending ? 'Deleting...' : 'Delete Patient'}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm\">{patient.phone}</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm\">{patient.address}</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm\">Registered: {format(new Date(patient.createdAt!), 'MMM dd, yyyy')}</span>\n              </div>\n            </div>\n          </CardContent>\n          \n          {/* Mobile Delete Button */}\n          {(user as any)?.canDeletePatients && isMobile && (\n            <CardContent className=\"pt-0\">\n              <Button\n                variant=\"destructive\"\n                className=\"w-full touch-target\"\n                onClick={() => {\n                  if (window.confirm(`Are you sure you want to delete ${patient.name}? This will also delete all their prescriptions and appointments. This action cannot be undone.`)) {\n                    deletePatientMutation.mutate(patient.id);\n                  }\n                }}\n                disabled={deletePatientMutation.isPending}\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                {deletePatientMutation.isPending ? 'Deleting Patient...' : 'Delete Patient'}\n              </Button>\n            </CardContent>\n          )}\n        </Card>\n\n        {/* Prescriptions Section */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle className=\"flex items-center space-x-2\">\n              <FileText className=\"h-5 w-5\" />\n              <span>Prescriptions ({prescriptions.length})</span>\n            </CardTitle>\n            <Button \n              size={isMobile ? \"sm\" : \"default\"} \n              className=\"flex items-center space-x-2\"\n              onClick={() => {\n                console.log('Add Prescription clicked');\n                setIsAddingPrescription(true);\n              }}\n            >\n              <Plus className=\"h-4 w-4\" />\n              <span>Add Prescription</span>\n            </Button>\n            \n            <Dialog open={isAddingPrescription} onOpenChange={resetPrescriptionModal}>\n              <DialogContent className={`${isMobile ? 'w-[95vw] max-h-[90vh]' : 'max-w-2xl max-h-[80vh]'} overflow-hidden`}>\n                <DialogHeader>\n                  <DialogTitle>Add New Prescription</DialogTitle>\n                  <DialogDescription>\n                    Create a new prescription for {patient.name}\n                  </DialogDescription>\n                </DialogHeader>\n                <ScrollArea className=\"max-h-[60vh] pr-4\">\n                  {!prescriptionType ? (\n                    // Disease Type Selection\n                    <div className=\"space-y-4\">\n                      <div className=\"text-center py-4\">\n                        <h3 className=\"text-lg font-medium mb-2\">Select Prescription Type</h3>\n                        <p className=\"text-sm text-muted-foreground mb-6\">\n                          Choose whether this is for a new condition or an existing one\n                        </p>\n                      </div>\n                      \n                      <div className=\"grid gap-4\">\n                        <Card \n                          className=\"cursor-pointer hover:bg-accent/50 transition-colors border-2 hover:border-primary/50\"\n                          onClick={() => setPrescriptionType('form')}\n                        >\n                          <CardContent className=\"p-6 text-center\">\n                            <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                              <Plus className=\"h-6 w-6 text-primary\" />\n                            </div>\n                            <h4 className=\"font-medium mb-2\">New Disease/Condition</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Create a prescription for a new health condition or symptoms\n                            </p>\n                          </CardContent>\n                        </Card>\n                        \n                        {previousDiseases.length > 0 && (\n                          <Card \n                            className=\"cursor-pointer hover:bg-accent/50 transition-colors border-2 hover:border-primary/50\"\n                            onClick={() => setPrescriptionType('existing')}\n                          >\n                            <CardContent className=\"p-6 text-center\">\n                              <div className=\"w-12 h-12 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                                <FileText className=\"h-6 w-6 text-secondary-foreground\" />\n                              </div>\n                              <h4 className=\"font-medium mb-2\">Existing Disease/Condition</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Select from previous conditions ({previousDiseases.length} available)\n                              </p>\n                            </CardContent>\n                          </Card>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex justify-end pt-4\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={resetPrescriptionModal}\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  ) : prescriptionType === 'existing' ? (\n                    // Existing Disease Selection\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"text-lg font-medium\">Select Existing Condition</h3>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setPrescriptionType(null)}\n                        >\n                          Back\n                        </Button>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        {previousDiseases.map((disease, index) => {\n                          const prescriptionCount = prescriptions.filter(p => p.symptoms === disease).length;\n                          const lastPrescription = prescriptions\n                            .filter(p => p.symptoms === disease)\n                            .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime())[0];\n                            \n                          return (\n                            <Card \n                              key={index}\n                              className=\"cursor-pointer hover:bg-accent/50 transition-colors border hover:border-primary/50\"\n                              onClick={() => {\n                                handleExistingDiseaseSelect(disease);\n                                setPrescriptionType('form');\n                              }}\n                            >\n                              <CardContent className=\"p-4\">\n                                <div className=\"flex justify-between items-start\">\n                                  <div className=\"flex-1\">\n                                    <h4 className=\"font-medium mb-1\">{disease}</h4>\n                                    <p className=\"text-sm text-muted-foreground\">\n                                      {prescriptionCount} previous prescription{prescriptionCount !== 1 ? 's' : ''}\n                                    </p>\n                                    {lastPrescription && (\n                                      <p className=\"text-xs text-muted-foreground mt-1\">\n                                        Last treated: {format(new Date(lastPrescription.createdAt!), 'MMM dd, yyyy')}\n                                      </p>\n                                    )}\n                                  </div>\n                                  <Badge variant=\"secondary\">\n                                    {prescriptionCount}\n                                  </Badge>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  ) : (\n                    // Prescription Form\n                    <div>\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h3 className=\"text-lg font-medium\">\n                          {selectedExistingPrescription ? 'Update Prescription' : 'New Prescription'}\n                        </h3>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (selectedExistingPrescription) {\n                              setPrescriptionType('existing');\n                              setSelectedExistingPrescription(null);\n                              form.reset();\n                            } else {\n                              setPrescriptionType(null);\n                            }\n                          }}\n                        >\n                          Back\n                        </Button>\n                      </div>\n                      \n                      {selectedExistingPrescription && (\n                        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4\">\n                          <p className=\"text-sm text-blue-800\">\n                            <strong>Note:</strong> Form is pre-filled with previous prescription data. \n                            You can modify medicines and dosages as needed.\n                          </p>\n                        </div>\n                      )}\n                      <Form {...form}>\n                        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"symptoms\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Symptoms</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"Describe symptoms (suggestions will appear automatically)\" \n                                    {...field}\n                                    onChange={(e) => {\n                                      field.onChange(e);\n                                      // Debounce the suggestion call\n                                      clearTimeout((window as any).suggestionTimeout);\n                                      (window as any).suggestionTimeout = setTimeout(() => {\n                                        getMedicineSuggestions(e.target.value);\n                                      }, 500);\n                                    }}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                                \n                                <div className=\"flex gap-2 mt-2\">\n                                  {(user as any)?.aiFeatureEnabled !== false && (\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={getAISuggestions}\n                                      disabled={isLoadingSuggestions}\n                                    >\n                                      {isLoadingSuggestions ? \"Getting AI Suggestions...\" : \"🤖 Get AI Suggestions\"}\n                                    </Button>\n                                  )}\n                                  {showSuggestions && (\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => setShowSuggestions(!showSuggestions)}\n                                    >\n                                      {showSuggestions ? \"Hide\" : \"Show\"} Suggestions ({medicineSuggestions.length})\n                                    </Button>\n                                  )}\n                                </div>\n                                \n                                {showSuggestions && medicineSuggestions.length > 0 && (\n                                  <div className=\"mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                                    <h4 className=\"font-medium text-sm mb-2\">Medicine Suggestions:</h4>\n                                    <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                                      {medicineSuggestions\n                                        .filter(suggestion => (user as any)?.aiFeatureEnabled !== false || suggestion.source !== 'ai')\n                                        .map((suggestion, index) => (\n                                        <div key={index} className=\"flex items-start justify-between bg-white p-2 rounded border\">\n                                          <div className=\"flex-1\">\n                                            <p className=\"font-medium text-sm\">\n                                              {suggestion.name} {suggestion.power && `(${suggestion.power})`}\n                                              <span className=\"ml-2 text-xs bg-gray-100 px-1 rounded\">\n                                                {suggestion.source === 'ai' ? '🤖 AI' : '💾 DB'}\n                                              </span>\n                                            </p>\n                                            <p className=\"text-xs text-gray-600\">\n                                              {suggestion.dosage} • {suggestion.frequency || 'As needed'} • {suggestion.duration || 'As directed'}\n                                            </p>\n                                            {suggestion.reasoning && (\n                                              <p className=\"text-xs text-gray-500 mt-1\">{suggestion.reasoning}</p>\n                                            )}\n                                          </div>\n                                          <Button\n                                            type=\"button\"\n                                            size=\"sm\"\n                                            variant=\"outline\"\n                                            onClick={() => addSuggestedMedicine(suggestion)}\n                                            className=\"ml-2 text-xs\"\n                                          >\n                                            Add\n                                          </Button>\n                                        </div>\n                                      ))}\n                                    </div>\n                                  </div>\n                                )}\n                              </FormItem>\n                            )}\n                          />\n\n                          <div className=\"space-y-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <FormLabel>Medicines</FormLabel>\n                              <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={addMedicineToForm}>\n                                <Plus className=\"h-4 w-4 mr-2\" />\n                                Add Medicine\n                              </Button>\n                            </div>\n\n                            {form.watch(\"medicines\").map((_, index) => (\n                              <Card key={index} className=\"p-4\">\n                                <div className=\"space-y-3\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <h4 className=\"font-medium\">Medicine {index + 1}</h4>\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => removeMedicineFromForm(index)}\n                                    >\n                                      <X className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n\n                                  <FormField\n                                    control={form.control}\n                                    name={`medicines.${index}.medicineId`}\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Medicine</FormLabel>\n                                        <Select onValueChange={field.onChange} value={field.value}>\n                                          <FormControl>\n                                            <SelectTrigger>\n                                              <SelectValue placeholder=\"Select medicine\" />\n                                            </SelectTrigger>\n                                          </FormControl>\n                                          <SelectContent>\n                                            {medicines.map((medicine) => (\n                                              <SelectItem key={medicine.id} value={medicine.id}>\n                                                {medicine.name} {medicine.power && `(${medicine.power})`}\n                                              </SelectItem>\n                                            ))}\n                                          </SelectContent>\n                                        </Select>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n\n                                  <div className=\"grid grid-cols-2 gap-3\">\n                                    <FormField\n                                      control={form.control}\n                                      name={`medicines.${index}.dosage`}\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormLabel>Dosage</FormLabel>\n                                          <FormControl>\n                                            <Input placeholder=\"e.g., 3 drops, 2 pills\" {...field} />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n\n                                    <FormField\n                                      control={form.control}\n                                      name={`medicines.${index}.frequency`}\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormLabel>Frequency</FormLabel>\n                                          <FormControl>\n                                            <Input placeholder=\"e.g., 3x daily\" {...field} />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                  </div>\n\n                                  <FormField\n                                    control={form.control}\n                                    name={`medicines.${index}.duration`}\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Duration</FormLabel>\n                                        <FormControl>\n                                          <Input placeholder=\"e.g., 15 days\" {...field} />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n\n                                  <FormField\n                                    control={form.control}\n                                    name={`medicines.${index}.instructions`}\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Instructions (Optional)</FormLabel>\n                                        <FormControl>\n                                          <Textarea placeholder=\"Special instructions\" {...field} />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                </div>\n                              </Card>\n                            ))}\n                          </div>\n\n                          <FormField\n                            control={form.control}\n                            name=\"notes\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Notes (Optional)</FormLabel>\n                                <FormControl>\n                                  <Textarea placeholder=\"Additional notes\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                      <div className=\"flex space-x-3 pt-4\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            if (selectedExistingPrescription) {\n                              setPrescriptionType('existing');\n                              setSelectedExistingPrescription(null);\n                              form.reset();\n                            } else {\n                              setPrescriptionType(null);\n                            }\n                          }}\n                          className=\"flex-1\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={addPrescriptionMutation.isPending}\n                          className=\"flex-1\"\n                        >\n                          {addPrescriptionMutation.isPending ? \"Adding...\" : \"Add Prescription\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                    </div>\n                  )}\n                </ScrollArea>\n              </DialogContent>\n            </Dialog>\n          </CardHeader>\n          <CardContent>\n            {prescriptionsLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n              </div>\n            ) : prescriptions.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium\">No prescriptions yet</h3>\n                <p className=\"text-muted-foreground\">Add the first prescription for this patient.</p>\n              </div>\n            ) : (\n              <ScrollArea className=\"h-[400px]\">\n                <div className=\"space-y-4\">\n                  {prescriptions.map((prescription) => (\n                    <Card key={prescription.id} className=\"border-l-4 border-l-primary\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div>\n                            <h4 className=\"font-medium\">Prescription #{prescription.prescriptionId}</h4>\n                            <div className=\"flex items-center space-x-2 text-sm text-muted-foreground mt-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              <span>{format(new Date(prescription.createdAt!), 'MMM dd, yyyy')}</span>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant=\"outline\">\n                              {Array.isArray(prescription.medicines) ? prescription.medicines.length : 0} medicines\n                            </Badge>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => showPrintPreviewModal(prescription)}\n                              className=\"h-8 w-8 p-0\"\n                              title=\"Print Prescription\"\n                            >\n                              <Printer className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => sendPrescriptionViaWhatsApp(prescription)}\n                              className=\"h-8 w-8 p-0\"\n                              title=\"Send via WhatsApp\"\n                            >\n                              <MessageCircle className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => handleEditPrescription(prescription)}\n                              className=\"h-8 w-8 p-0\"\n                              title=\"Edit Prescription\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <div>\n                            <p className=\"text-sm font-medium\">Symptoms:</p>\n                            <p className=\"text-sm text-muted-foreground\">{prescription.symptoms}</p>\n                          </div>\n                          \n                          {Array.isArray(prescription.medicines) && prescription.medicines.length > 0 && (\n                            <div>\n                              <p className=\"text-sm font-medium\">Medicines:</p>\n                              <div className=\"space-y-2 mt-2\">\n                                {(prescription.medicines as any[]).map((med: any, index: number) => (\n                                  <div key={index} className=\"bg-muted rounded-lg p-3\">\n                                    <div className=\"flex justify-between items-start\">\n                                      <div>\n                                        <p className=\"font-medium text-sm\">\n                                          {medicines.find(m => m.id === med.medicineId)?.name || 'Unknown Medicine'}\n                                        </p>\n                                        <p className=\"text-xs text-muted-foreground\">\n                                          {med.dosage} • {med.frequency} • {med.duration}\n                                        </p>\n                                        {med.instructions && (\n                                          <p className=\"text-xs text-muted-foreground italic mt-1\">\n                                            {med.instructions}\n                                          </p>\n                                        )}\n                                      </div>\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {prescription.notes && (\n                            <div>\n                              <p className=\"text-sm font-medium\">Notes:</p>\n                              <p className=\"text-sm text-muted-foreground\">{prescription.notes}</p>\n                            </div>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </ScrollArea>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Prescription Modal */}\n        <Dialog open={showEditModal} onOpenChange={() => setShowEditModal(false)}>\n          <DialogContent className={`${isMobile ? 'w-[95vw] max-h-[90vh]' : 'max-w-2xl max-h-[80vh]'} overflow-hidden`}>\n            <DialogHeader>\n              <DialogTitle>Edit Prescription</DialogTitle>\n              <DialogDescription>\n                Update prescription for {patient?.name}\n              </DialogDescription>\n            </DialogHeader>\n            <ScrollArea className=\"max-h-[60vh] pr-4\">\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"symptoms\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Symptoms/Disease</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Describe the symptoms...\"\n                            className=\"min-h-[80px]\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <FormLabel>Medicines</FormLabel>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={addMedicineToForm}\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add Medicine\n                      </Button>\n                    </div>\n                    \n                    {form.watch(\"medicines\").map((_, index) => (\n                      <Card key={index} className=\"p-4 space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"text-sm font-medium\">Medicine {index + 1}</h4>\n                          {form.watch(\"medicines\").length > 1 && (\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeMedicineFromForm(index)}\n                              className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                          <FormField\n                            control={form.control}\n                            name={`medicines.${index}.medicineId`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Medicine</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select medicine\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {medicines.map((medicine) => (\n                                      <SelectItem key={medicine.id} value={medicine.id}>\n                                        {medicine.name}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={form.control}\n                            name={`medicines.${index}.dosage`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Dosage</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., 30C\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                          <FormField\n                            control={form.control}\n                            name={`medicines.${index}.frequency`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Frequency</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., 3 times daily\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={form.control}\n                            name={`medicines.${index}.duration`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Duration</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., 15 days\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <FormField\n                          control={form.control}\n                          name={`medicines.${index}.instructions`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Instructions (Optional)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"e.g., Take before meals\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </Card>\n                    ))}\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Additional notes...\"\n                            className=\"min-h-[60px]\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setShowEditModal(false)}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={updatePrescriptionMutation.isPending}\n                      className=\"min-w-[100px]\"\n                    >\n                      {updatePrescriptionMutation.isPending ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                          <span>Updating...</span>\n                        </div>\n                      ) : (\n                        \"Update Prescription\"\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </ScrollArea>\n          </DialogContent>\n        </Dialog>\n\n        {/* Print Preview Modal */}\n        <Dialog open={showPrintPreview} onOpenChange={setShowPrintPreview}>\n          <DialogContent className={`${isMobile ? 'w-[95vw] max-h-[90vh]' : 'max-w-4xl max-h-[85vh]'} overflow-hidden`}>\n            <DialogHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <DialogTitle>Print Prescription Preview</DialogTitle>\n                  <DialogDescription>\n                    Select a template and preview before printing\n                  </DialogDescription>\n                </div>\n                <Button\n                  onClick={() => {\n                    if (selectedPrescriptionToPrint) {\n                      printPrescription(selectedPrescriptionToPrint, selectedTemplate);\n                      setShowPrintPreview(false);\n                    }\n                  }}\n                  className=\"flex items-center space-x-2\"\n                  size=\"sm\"\n                >\n                  <Printer className=\"h-4 w-4\" />\n                  <span>Print</span>\n                </Button>\n              </div>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              {/* Template Selection */}\n              <div className=\"space-y-3\">\n                <h4 className=\"text-sm font-medium\">Select Template:</h4>\n                {templatesLoading ? (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    Loading assigned templates...\n                  </div>\n                ) : (assignedTemplates as any[])?.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <FileText className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No templates assigned by admin</p>\n                    <p className=\"text-xs mt-1\">Contact your administrator to assign prescription templates</p>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                    {(assignedTemplates as any[]).map((template: any) => (\n                      <Card \n                        key={template.templateId}\n                        className={`cursor-pointer transition-colors ${\n                          selectedTemplate === template.templateId \n                            ? 'ring-2 ring-primary bg-primary/5' \n                            : 'hover:bg-accent/50'\n                        }`}\n                        onClick={() => {\n                          setSelectedTemplate(template.templateId);\n                          setSelectedCustomTemplate(template);\n                        }}\n                      >\n                        <CardContent className=\"p-4 text-center\">\n                          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                            <FileText className=\"h-4 w-4 text-blue-600\" />\n                          </div>\n                          <h5 className=\"font-medium text-sm\">{template.templateName}</h5>\n                          <p className=\"text-xs text-muted-foreground\">{template.templateDescription || 'Custom template'}</p>\n                          {template.isDefault && (\n                            <Badge variant=\"secondary\" className=\"mt-1 text-xs\">Default</Badge>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Preview Section */}\n              {selectedPrescriptionToPrint && (\n                <div className=\"space-y-3\">\n                  <h4 className=\"text-sm font-medium\">Preview:</h4>\n                  <div className=\"border rounded-lg p-4 bg-white max-h-[400px] overflow-y-auto\">\n                    <div \n                      className=\"text-sm\"\n                      dangerouslySetInnerHTML={{\n                        __html: (() => {\n                          if (!selectedCustomTemplate) {\n                            return '<div class=\"text-center py-8\">Select a template to preview</div>';\n                          }\n\n                          const doctorName = (user as any)?.name || 'Dr. [Doctor Name]';\n                          const medicineDetails = Array.isArray(selectedPrescriptionToPrint.medicines) \n                            ? (selectedPrescriptionToPrint.medicines as any[]).map((med: any) => {\n                                const medicine = medicines.find(m => m.id === med.medicineId);\n                                return {\n                                  name: medicine?.code || medicine?.name || 'Unknown Medicine',\n                                  power: medicine?.power || '',\n                                  dosage: med.dosage,\n                                  frequency: med.frequency,\n                                  duration: med.duration,\n                                  instructions: med.instructions\n                                };\n                              })\n                            : [];\n\n                          // If it's a custom HTML template, use the template content with variable replacement\n                          if (selectedCustomTemplate.templateType === 'html' && selectedCustomTemplate.templateContent) {\n                            let templateHtml = selectedCustomTemplate.templateContent;\n                            \n                            // Replace template variables with actual data\n                            templateHtml = templateHtml.replace(/\\{\\{doctorName\\}\\}/g, doctorName);\n                            templateHtml = templateHtml.replace(/\\{\\{clinicName\\}\\}/g, (user as any)?.clinicName || 'My Homeo Health Clinic');\n                            templateHtml = templateHtml.replace(/\\{\\{degree\\}\\}/g, (user as any)?.degree || '');\n                            templateHtml = templateHtml.replace(/\\{\\{specialist\\}\\}/g, (user as any)?.specialist || 'Homeopathic Specialist');\n                            templateHtml = templateHtml.replace(/\\{\\{patientName\\}\\}/g, patient?.name || '');\n                            templateHtml = templateHtml.replace(/\\{\\{patientId\\}\\}/g, patient?.patientId || '');\n                            templateHtml = templateHtml.replace(/\\{\\{patientAge\\}\\}/g, patient?.age?.toString() || '');\n                            templateHtml = templateHtml.replace(/\\{\\{patientGender\\}\\}/g, patient?.gender || '');\n                            templateHtml = templateHtml.replace(/\\{\\{patientPhone\\}\\}/g, patient?.phone || '');\n                            templateHtml = templateHtml.replace(/\\{\\{date\\}\\}/g, format(new Date(selectedPrescriptionToPrint.createdAt!), 'dd/MM/yyyy'));\n                            templateHtml = templateHtml.replace(/\\{\\{prescriptionId\\}\\}/g, selectedPrescriptionToPrint.prescriptionId || '');\n                            templateHtml = templateHtml.replace(/\\{\\{symptoms\\}\\}/g, selectedPrescriptionToPrint.symptoms || '');\n                            templateHtml = templateHtml.replace(/\\{\\{notes\\}\\}/g, selectedPrescriptionToPrint.notes || '');\n                            \n                            // Replace medicines list\n                            const medicinesHtml = medicineDetails.map((med, index) => `\n                              <div style=\"margin-bottom: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px;\">\n                                <div style=\"font-weight: bold; margin-bottom: 5px;\">\n                                  ${index + 1}. ${med.name}${med.power ? ` (${med.power})` : ''}\n                                </div>\n                                <div style=\"font-size: 11px;\">\n                                  <span style=\"margin-right: 15px;\"><strong>Dosage:</strong> ${med.dosage}</span>\n                                  <span style=\"margin-right: 15px;\"><strong>Frequency:</strong> ${med.frequency}</span>\n                                  <span><strong>Duration:</strong> ${med.duration}</span>\n                                  ${med.instructions ? `<br><strong>Instructions:</strong> ${med.instructions}` : ''}\n                                </div>\n                              </div>\n                            `).join('');\n                            templateHtml = templateHtml.replace(/\\{\\{medicines\\}\\}/g, medicinesHtml);\n                            \n                            return `<div style=\"transform: scale(0.8); transform-origin: top left;\">${templateHtml}</div>`;\n                          }\n                          \n                          // If it's a file template, show file info\n                          if (selectedCustomTemplate.templateType === 'file') {\n                            return `\n                              <div class=\"text-center py-8\">\n                                <div class=\"text-lg font-medium mb-2\">File Template Preview</div>\n                                <div class=\"text-sm text-muted-foreground mb-4\">\n                                  Template: ${selectedCustomTemplate.templateName}<br>\n                                  File: ${selectedCustomTemplate.fileName || 'Custom file'}\n                                </div>\n                                <div class=\"text-xs text-muted-foreground\">\n                                  File templates will be used directly for printing.<br>\n                                  Preview is not available for uploaded files.\n                                </div>\n                              </div>\n                            `;\n                          }\n                          \n                          return '<div class=\"text-center py-8\">Template type not supported</div>';\n                        })()\n                      }}\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowPrintPreview(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  if (selectedPrescriptionToPrint) {\n                    printPrescription(selectedPrescriptionToPrint, selectedTemplate);\n                    setShowPrintPreview(false);\n                  }\n                }}\n                className=\"flex items-center space-x-2 bg-primary hover:bg-primary/90\"\n              >\n                <Printer className=\"h-5 w-5\" />\n                <span>Print</span>\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":80203},"client/src/pages/PatientsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Search, Plus, Users, Eye, Trash2, Edit, Calendar, MapPin, Phone, FileText, Clock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { format } from \"date-fns\";\n\ninterface PatientsPageProps {\n  user: any;\n  onNavigate: (page: string) => void;\n}\n\nexport default function PatientsPage({ user, onNavigate }: PatientsPageProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedPatient, setSelectedPatient] = useState<any>(null);\n  const [editingPatient, setEditingPatient] = useState<any>(null);\n  const { t, translateData } = useLanguage();\n  const [newPatient, setNewPatient] = useState({\n    name: \"\",\n    age: \"\",\n    gender: \"\",\n    phone: \"\",\n    address: \"\",\n    location: \"\",\n  });\n  \n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: patients = [], isLoading } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: prescriptions = [] } = useQuery({\n    queryKey: [\"/api/prescriptions\"],\n  });\n\n  const { data: appointments = [] } = useQuery({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const createPatientMutation = useMutation({\n    mutationFn: async (patientData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/patients\", patientData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      toast({\n        title: \"Success\",\n        description: \"Patient added successfully\",\n      });\n      setShowAddModal(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add patient\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePatientMutation = useMutation({\n    mutationFn: async (patientId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/patients/${patientId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/prescriptions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Patient deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Delete error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete patient\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePatientMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/patients/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      toast({\n        title: \"Success\",\n        description: \"Patient updated successfully\",\n      });\n      setShowEditModal(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      console.error(\"Update error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update patient\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredPatients = (patients as any[]).filter((patient: any) =>\n    patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    patient.patientId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    patient.phone.includes(searchTerm) ||\n    (patient.location && patient.location.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  const handleAddPatient = () => {\n    if (!newPatient.name.trim() || !newPatient.age || !newPatient.gender || !newPatient.phone.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const patientData = {\n      ...newPatient,\n      age: parseInt(newPatient.age),\n    };\n\n    if (editingPatient) {\n      updatePatientMutation.mutate({ id: editingPatient.id, data: patientData });\n    } else {\n      createPatientMutation.mutate(patientData);\n    }\n  };\n\n  const handleEditPatient = (patient: any) => {\n    setEditingPatient(patient);\n    setNewPatient({\n      name: patient.name,\n      age: patient.age.toString(),\n      gender: patient.gender,\n      phone: patient.phone,\n      address: patient.address || \"\",\n      location: patient.location || \"\",\n    });\n    setShowEditModal(true);\n  };\n\n  const resetForm = () => {\n    setNewPatient({\n      name: \"\",\n      age: \"\",\n      gender: \"\",\n      phone: \"\",\n      address: \"\",\n      location: \"\",\n    });\n    setEditingPatient(null);\n  };\n\n  const getPatientPrescriptions = (patientId: string) => {\n    return (prescriptions as any[]).filter((p: any) => p.patientId === patientId);\n  };\n\n  const getPatientAppointments = (patientId: string) => {\n    return (appointments as any[]).filter((a: any) => a.patientId === patientId);\n  };\n\n  const getLastVisitDate = (patient: any) => {\n    if (patient.lastVisitDate) {\n      return new Date(patient.lastVisitDate);\n    }\n    \n    const patientPrescriptions = getPatientPrescriptions(patient.id);\n    const patientAppointments = getPatientAppointments(patient.id);\n    \n    const allDates = [\n      ...patientPrescriptions.map((p: any) => new Date(p.createdAt)),\n      ...patientAppointments.filter((a: any) => a.status === 'completed').map((a: any) => new Date(a.dateTime))\n    ];\n    \n    if (allDates.length === 0) return null;\n    \n    return new Date(Math.max(...allDates.map(d => d.getTime())));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 space-y-4 pb-20\">\n        <div className=\"animate-pulse space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"bg-white rounded-xl p-4 shadow-sm border h-24\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pb-20\">\n      {/* Header */}\n      <div className=\"p-4 border-b bg-white sticky top-16 z-10\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h1 className=\"text-xl font-semibold text-neutral-800\">{t('patients.title')}</h1>\n          <Button\n            size=\"sm\"\n            className=\"touch-target\"\n            onClick={() => setShowAddModal(true)}\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            {t('patients.add')}\n          </Button>\n        </div>\n        \n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-neutral-400 h-4 w-4\" />\n          <Input\n            placeholder={t('patients.search.placeholder')}\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 form-input\"\n          />\n        </div>\n      </div>\n\n      {/* Patient List */}\n      <div className=\"p-4\">\n        {filteredPatients.length === 0 ? (\n          <Card className=\"shadow-sm border border-neutral-200\">\n            <CardContent className=\"p-8 text-center\">\n              <Users className=\"h-16 w-16 text-neutral-300 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-neutral-800 mb-2\">\n                {searchTerm ? t('no.data.found') : t('patients.title')}\n              </h3>\n              <p className=\"text-neutral-500 mb-4\">\n                {searchTerm \n                  ? t('try.different.search') \n                  : t('add.first.item')\n                }\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => setShowAddModal(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  {t('patients.add')}\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            {/* Desktop View - Hidden on mobile */}\n            <div className=\"hidden md:block\">\n              <div className=\"bg-white rounded-xl shadow-sm border border-neutral-200 overflow-hidden\">\n                <div className=\"px-6 py-4 border-b border-neutral-100 bg-neutral-50\">\n                  <div className=\"grid grid-cols-12 gap-4 text-sm font-medium text-neutral-600\">\n                    <div className=\"col-span-3\">Patient Name</div>\n                    <div className=\"col-span-2\">Contact</div>\n                    <div className=\"col-span-2\">Last Visit</div>\n                    <div className=\"col-span-2\">Statistics</div>\n                    <div className=\"col-span-3\">Actions</div>\n                  </div>\n                </div>\n                <div className=\"divide-y divide-neutral-100\">\n                  {filteredPatients.map((patient: any) => {\n                    const patientPrescriptions = getPatientPrescriptions(patient.id);\n                    const patientAppointments = getPatientAppointments(patient.id);\n                    const lastVisit = getLastVisitDate(patient);\n                    \n                    return (\n                      <div key={patient.id} className=\"px-6 py-4 hover:bg-neutral-50 transition-colors\">\n                        <div className=\"grid grid-cols-12 gap-4 items-center\">\n                          {/* Patient Info */}\n                          <div className=\"col-span-3\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Avatar \n                                className=\"w-10 h-10 cursor-pointer hover:scale-105 transition-transform\"\n                                onClick={() => setLocation(`/patients/${patient.id}`)}\n                                title=\"Click to view patient details\"\n                              >\n                                <AvatarFallback className=\"bg-gradient-to-br from-primary to-secondary text-white text-sm\">\n                                  {patient.name.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <h3 \n                                  className=\"font-semibold text-primary text-sm hover:text-primary/80 cursor-pointer transition-colors underline-offset-2 hover:underline\"\n                                  onClick={() => setLocation(`/patients/${patient.id}`)}\n                                  title=\"Click to view patient details\"\n                                >\n                                  {translateData(patient.name)}\n                                </h3>\n                                <p className=\"text-xs text-neutral-500\">\n                                  {translateData(patient.gender)}, {patient.age}y • {patient.patientId}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {/* Contact */}\n                          <div className=\"col-span-2\">\n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center text-sm text-neutral-700\">\n                                <Phone className=\"h-3 w-3 mr-1 text-neutral-400\" />\n                                {patient.phone}\n                              </div>\n                              {patient.location && (\n                                <div className=\"flex items-center text-xs text-neutral-500\">\n                                  <MapPin className=\"h-3 w-3 mr-1 text-neutral-400\" />\n                                  {translateData(patient.location)}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          \n                          {/* Last Visit */}\n                          <div className=\"col-span-2\">\n                            <div className=\"flex items-center text-sm\">\n                              <Clock className=\"h-3 w-3 mr-1 text-neutral-400\" />\n                              {lastVisit ? (\n                                <div>\n                                  <div className=\"text-neutral-700 font-medium\">\n                                    {format(lastVisit, 'MMM d, yyyy')}\n                                  </div>\n                                  <div className=\"text-xs text-neutral-500\">\n                                    {format(lastVisit, 'h:mm a')}\n                                  </div>\n                                </div>\n                              ) : (\n                                <span className=\"text-neutral-500 italic\">No visits yet</span>\n                              )}\n                            </div>\n                          </div>\n                          \n                          {/* Statistics */}\n                          <div className=\"col-span-2\">\n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center text-xs text-neutral-600\">\n                                <FileText className=\"h-3 w-3 mr-1 text-neutral-400\" />\n                                {patientPrescriptions.length} prescriptions\n                              </div>\n                              <div className=\"flex items-center text-xs text-neutral-600\">\n                                <Calendar className=\"h-3 w-3 mr-1 text-neutral-400\" />\n                                {patientAppointments.length} appointments\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {/* Actions */}\n                          <div className=\"col-span-3\">\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"text-xs\"\n                                onClick={() => setLocation(`/patients/${patient.id}`)}\n                              >\n                                <Eye className=\"h-3 w-3 mr-1\" />\n                                Details\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"text-xs\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleEditPatient(patient);\n                                }}\n                              >\n                                <Edit className=\"h-3 w-3\" />\n                              </Button>\n                              {user?.canDeletePatients && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  className=\"text-xs\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    if (window.confirm(`Are you sure you want to delete ${patient.name}? This will also delete all their prescriptions and appointments. This action cannot be undone.`)) {\n                                      deletePatientMutation.mutate(patient.id);\n                                    }\n                                  }}\n                                  disabled={deletePatientMutation.isPending}\n                                >\n                                  <Trash2 className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n\n            {/* Mobile View - Hidden on desktop */}\n            <div className=\"md:hidden space-y-4\">\n              {filteredPatients.map((patient: any) => {\n                const patientPrescriptions = getPatientPrescriptions(patient.id);\n                const patientAppointments = getPatientAppointments(patient.id);\n                const lastVisit = getLastVisitDate(patient);\n                \n                return (\n                  <Card key={patient.id} className=\"shadow-sm border border-neutral-200 card-hover\">\n                    <CardContent className=\"p-4\">\n                      {/* Header Section */}\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-center space-x-3 flex-1\">\n                          <Avatar \n                            className=\"w-12 h-12 cursor-pointer hover:scale-105 transition-transform\"\n                            onClick={() => setLocation(`/patients/${patient.id}`)}\n                            title=\"Click to view patient details\"\n                          >\n                            <AvatarFallback className=\"bg-gradient-to-br from-primary to-secondary text-white\">\n                              {patient.name.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1\">\n                            <h3 \n                              className=\"font-semibold text-primary leading-tight hover:text-primary/80 cursor-pointer transition-colors underline-offset-2 hover:underline\"\n                              onClick={() => setLocation(`/patients/${patient.id}`)}\n                              title=\"Click to view patient details\"\n                            >\n                              {translateData(patient.name)}\n                            </h3>\n                            <p className=\"text-sm text-neutral-500\">\n                              {translateData(patient.gender)}, {patient.age} years • {patient.patientId}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Contact Info */}\n                      <div className=\"grid grid-cols-1 gap-2 mb-4\">\n                        <div className=\"flex items-center text-sm text-neutral-700\">\n                          <Phone className=\"h-4 w-4 mr-2 text-neutral-400\" />\n                          {patient.phone}\n                        </div>\n                        {patient.location && (\n                          <div className=\"flex items-center text-sm text-neutral-500\">\n                            <MapPin className=\"h-4 w-4 mr-2 text-neutral-400\" />\n                            {translateData(patient.location)}\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* Visit Info & Statistics */}\n                      <div className=\"bg-neutral-50 rounded-lg p-3 mb-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <div className=\"flex items-center text-xs text-neutral-500 mb-1\">\n                              <Clock className=\"h-3 w-3 mr-1\" />\n                              Last Visit\n                            </div>\n                            {lastVisit ? (\n                              <div className=\"text-sm font-medium text-neutral-700\">\n                                {format(lastVisit, 'MMM d, yyyy')}\n                                <div className=\"text-xs text-neutral-500\">\n                                  {format(lastVisit, 'h:mm a')}\n                                </div>\n                              </div>\n                            ) : (\n                              <div className=\"text-sm text-neutral-500 italic\">No visits yet</div>\n                            )}\n                          </div>\n                          <div>\n                            <div className=\"flex items-center text-xs text-neutral-500 mb-1\">\n                              <FileText className=\"h-3 w-3 mr-1\" />\n                              Records\n                            </div>\n                            <div className=\"text-sm\">\n                              <div className=\"text-neutral-700 font-medium\">{patientPrescriptions.length} prescriptions</div>\n                              <div className=\"text-xs text-neutral-500\">{patientAppointments.length} appointments</div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Action Buttons */}\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          className=\"flex-1 touch-target\"\n                          onClick={() => setLocation(`/patients/${patient.id}`)}\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          Details\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"touch-target\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleEditPatient(patient);\n                          }}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        {user?.canDeletePatients && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            className=\"touch-target\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              if (window.confirm(`Are you sure you want to delete ${patient.name}? This will also delete all their prescriptions and appointments. This action cannot be undone.`)) {\n                                deletePatientMutation.mutate(patient.id);\n                              }\n                            }}\n                            disabled={deletePatientMutation.isPending}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Add Patient Modal */}\n      <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add New Patient</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Name *</Label>\n                <Input\n                  id=\"name\"\n                  value={newPatient.name}\n                  onChange={(e) => setNewPatient({ ...newPatient, name: e.target.value })}\n                  placeholder=\"Patient name\"\n                  className=\"form-input\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"age\">Age *</Label>\n                <Input\n                  id=\"age\"\n                  type=\"number\"\n                  value={newPatient.age}\n                  onChange={(e) => setNewPatient({ ...newPatient, age: e.target.value })}\n                  placeholder=\"Age\"\n                  className=\"form-input\"\n                  min=\"1\"\n                  max=\"120\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"gender\">Gender *</Label>\n                <Select\n                  value={newPatient.gender}\n                  onValueChange={(value) => setNewPatient({ ...newPatient, gender: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select gender\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Male\">Male</SelectItem>\n                    <SelectItem value=\"Female\">Female</SelectItem>\n                    <SelectItem value=\"Other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Phone *</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={newPatient.phone}\n                  onChange={(e) => setNewPatient({ ...newPatient, phone: e.target.value })}\n                  placeholder=\"Phone number\"\n                  className=\"form-input\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"location\">Location</Label>\n              <Input\n                id=\"location\"\n                value={newPatient.location}\n                onChange={(e) => setNewPatient({ ...newPatient, location: e.target.value })}\n                placeholder=\"City or area\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"address\">Address</Label>\n              <Input\n                id=\"address\"\n                value={newPatient.address}\n                onChange={(e) => setNewPatient({ ...newPatient, address: e.target.value })}\n                placeholder=\"Full address (optional)\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => setShowAddModal(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                className=\"flex-1\"\n                onClick={handleAddPatient}\n                disabled={createPatientMutation.isPending}\n              >\n                {createPatientMutation.isPending ? \"Adding...\" : \"Add Patient\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Patient Details Modal */}\n      <Dialog open={!!selectedPatient} onOpenChange={() => setSelectedPatient(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Patient Details</DialogTitle>\n          </DialogHeader>\n          \n          {selectedPatient && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <Avatar className=\"w-16 h-16\">\n                  <AvatarFallback className=\"bg-gradient-to-br from-primary to-secondary text-white text-lg\">\n                    {selectedPatient.name.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <h3 className=\"text-lg font-semibold\">{selectedPatient.name}</h3>\n                  <p className=\"text-neutral-600\">ID: {selectedPatient.patientId}</p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Age:</span>\n                  <p>{selectedPatient.age} years</p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-neutral-700\">{t('patients.gender')}:</span>\n                  <p>{translateData(selectedPatient.gender)}</p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Phone:</span>\n                  <p>{selectedPatient.phone}</p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Registered:</span>\n                  <p>{format(new Date(selectedPatient.createdAt), 'MMM d, yyyy')}</p>\n                </div>\n              </div>\n\n              {selectedPatient.location && (\n                <div>\n                  <span className=\"font-medium text-neutral-700\">{t('patients.location')}:</span>\n                  <p className=\"text-sm\">{translateData(selectedPatient.location)}</p>\n                </div>\n              )}\n\n              {selectedPatient.address && (\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Address:</span>\n                  <p className=\"text-sm\">{selectedPatient.address}</p>\n                </div>\n              )}\n\n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setSelectedPatient(null)}\n                >\n                  Close\n                </Button>\n                <Button\n                  className=\"flex-1\"\n                  onClick={() => {\n                    setSelectedPatient(null);\n                    onNavigate('prescriptions');\n                  }}\n                >\n                  View Prescriptions\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Patient Modal */}\n      <Dialog open={showEditModal} onOpenChange={() => setShowEditModal(false)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Patient</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-name\">Name *</Label>\n                <Input\n                  id=\"edit-name\"\n                  value={newPatient.name}\n                  onChange={(e) => setNewPatient({ ...newPatient, name: e.target.value })}\n                  placeholder=\"Patient name\"\n                  className=\"form-input\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-age\">Age *</Label>\n                <Input\n                  id=\"edit-age\"\n                  type=\"number\"\n                  value={newPatient.age}\n                  onChange={(e) => setNewPatient({ ...newPatient, age: e.target.value })}\n                  placeholder=\"Age\"\n                  className=\"form-input\"\n                  min=\"1\"\n                  max=\"120\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-gender\">Gender *</Label>\n                <Select value={newPatient.gender} onValueChange={(value) => setNewPatient({ ...newPatient, gender: value })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select gender\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Male\">Male</SelectItem>\n                    <SelectItem value=\"Female\">Female</SelectItem>\n                    <SelectItem value=\"Other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"edit-phone\">Phone *</Label>\n                <Input\n                  id=\"edit-phone\"\n                  value={newPatient.phone}\n                  onChange={(e) => setNewPatient({ ...newPatient, phone: e.target.value })}\n                  placeholder=\"Phone number\"\n                  className=\"form-input\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-location\">Location</Label>\n              <Input\n                id=\"edit-location\"\n                value={newPatient.location}\n                onChange={(e) => setNewPatient({ ...newPatient, location: e.target.value })}\n                placeholder=\"City or area\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-address\">Address</Label>\n              <Input\n                id=\"edit-address\"\n                value={newPatient.address}\n                onChange={(e) => setNewPatient({ ...newPatient, address: e.target.value })}\n                placeholder=\"Full address (optional)\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => {\n                  setShowEditModal(false);\n                  resetForm();\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                className=\"flex-1\"\n                onClick={handleAddPatient}\n                disabled={updatePatientMutation.isPending}\n              >\n                {updatePatientMutation.isPending ? \"Updating...\" : \"Update Patient\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":34243},"client/src/pages/PrescriptionsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Search, Plus, FileText, Eye, Printer, X, Edit, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport React from \"react\";\n\ninterface PrescriptionsPageProps {\n  user: any;\n  onNavigate: (page: string) => void;\n}\n\ninterface Medicine {\n  name: string;\n  dosage: string;\n  frequency: string;\n  duration: string;\n  instructions?: string;\n}\n\nexport default function PrescriptionsPage({ user, onNavigate }: PrescriptionsPageProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [editingPrescription, setEditingPrescription] = useState<any>(null);\n  const [selectedPrescription, setSelectedPrescription] = useState<any>(null);\n  const [newPrescription, setNewPrescription] = useState({\n    patientId: \"\",\n    symptoms: \"\",\n    medicines: [] as Medicine[],\n    notes: \"\",\n  });\n  const [currentMedicine, setCurrentMedicine] = useState<Medicine>({\n    name: \"\",\n    dosage: \"\",\n    frequency: \"\",\n    duration: \"\",\n    instructions: \"\",\n  });\n  const [showMedicineForm, setShowMedicineForm] = useState(false);\n  const [patientSearchTerm, setPatientSearchTerm] = useState(\"\");\n  const [showPatientDropdown, setShowPatientDropdown] = useState(false);\n  \n  // Medicine search functionality state\n  const [medicineSearchTerm, setMedicineSearchTerm] = useState(\"\");\n  const [showMedicineDropdown, setShowMedicineDropdown] = useState(false);\n  const [selectedMedicine, setSelectedMedicine] = useState<any>(null);\n  \n  // Print functionality state\n  const [showPrintPreview, setShowPrintPreview] = useState(false);\n  const [selectedPrescriptionToPrint, setSelectedPrescriptionToPrint] = useState<any>(null);\n  const [selectedTemplate, setSelectedTemplate] = useState<string>('');\n  const [selectedCustomTemplate, setSelectedCustomTemplate] = useState<any>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { t, translateData } = useLanguage();\n  const isMobile = useIsMobile();\n\n  const { data: prescriptions = [], isLoading } = useQuery({\n    queryKey: [\"/api/prescriptions\"],\n  });\n\n  const { data: patients = [] } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: medicines = [] } = useQuery({\n    queryKey: [\"/api/medicines\"],\n  });\n\n  // Fetch doctor's assigned templates for print preview\n  const { data: assignedTemplates = [], isLoading: templatesLoading } = useQuery({\n    queryKey: ['/api/doctor/templates'],\n    enabled: !!(user && user.role === 'doctor')\n  });\n\n  // Set default template when assigned templates load\n  React.useEffect(() => {\n    if ((assignedTemplates as any[])?.length > 0 && !selectedTemplate) {\n      const templatesArray = assignedTemplates as any[];\n      const defaultTemplate = templatesArray.find(t => t.isDefault) || templatesArray[0];\n      setSelectedTemplate(defaultTemplate.templateId);\n      setSelectedCustomTemplate(defaultTemplate);\n    }\n  }, [assignedTemplates, selectedTemplate]);\n\n  // Close dropdowns when clicking outside\n  React.useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as Element;\n      if (!target.closest('.medicine-dropdown-container')) {\n        setShowMedicineDropdown(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // Filter medicines based on search term\n  const filteredMedicines = medicines.filter((medicine: any) =>\n    medicine.name?.toLowerCase().includes(medicineSearchTerm.toLowerCase()) ||\n    medicine.code?.toLowerCase().includes(medicineSearchTerm.toLowerCase()) ||\n    medicine.company?.toLowerCase().includes(medicineSearchTerm.toLowerCase())\n  ).slice(0, 10); // Limit to 10 results for performance\n\n  // Handle medicine selection from dropdown\n  const handleMedicineSelect = (medicine: any) => {\n    setSelectedMedicine(medicine);\n    setMedicineSearchTerm(medicine.name || medicine.code || '');\n    setCurrentMedicine(prev => ({\n      ...prev,\n      name: medicine.name || medicine.code || ''\n    }));\n    setShowMedicineDropdown(false);\n  };\n\n  // Handle medicine search input change\n  const handleMedicineSearchChange = (value: string) => {\n    setMedicineSearchTerm(value);\n    setCurrentMedicine(prev => ({\n      ...prev,\n      name: value\n    }));\n    setShowMedicineDropdown(value.length > 0);\n    if (value.length === 0) {\n      setSelectedMedicine(null);\n    }\n  };\n\n  const createPrescriptionMutation = useMutation({\n    mutationFn: async (prescriptionData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/prescriptions\", prescriptionData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prescriptions\"] });\n      toast({\n        title: \"Success\",\n        description: \"Prescription created successfully\",\n      });\n      setShowAddModal(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create prescription\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePrescriptionMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/prescriptions/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prescriptions\"] });\n      toast({\n        title: \"Success\",\n        description: \"Prescription updated successfully\",\n      });\n      setShowEditModal(false);\n      setEditingPrescription(null);\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update prescription\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePrescriptionMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/prescriptions/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prescriptions\"] });\n      toast({\n        title: \"Success\",\n        description: \"Prescription deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete prescription\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Enrich prescriptions with patient data\n  const enrichedPrescriptions = prescriptions.map((prescription: any) => {\n    const patient = patients.find((p: any) => p.id === prescription.patientId);\n    return {\n      ...prescription,\n      patientName: patient?.name || 'Unknown Patient',\n      patientAge: patient?.age || '',\n      patientGender: patient?.gender || '',\n      patientPhone: patient?.phone || '',\n      patientIdDisplay: patient?.patientId || 'N/A',\n    };\n  });\n\n  // Filter prescriptions\n  const filteredPrescriptions = enrichedPrescriptions.filter((prescription: any) => {\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      prescription.patientName.toLowerCase().includes(searchLower) ||\n      prescription.patientIdDisplay.toLowerCase().includes(searchLower) ||\n      prescription.prescriptionId.toLowerCase().includes(searchLower) ||\n      prescription.symptoms.toLowerCase().includes(searchLower)\n    );\n  });\n\n  // Filter patients for search\n  const filteredPatients = patients.filter((patient: any) => {\n    if (!patientSearchTerm) return true;\n    const searchLower = patientSearchTerm.toLowerCase();\n    return (\n      patient.name.toLowerCase().includes(searchLower) ||\n      patient.patientId.toLowerCase().includes(searchLower) ||\n      (patient.phone && patient.phone.includes(patientSearchTerm))\n    );\n  });\n\n  const resetForm = () => {\n    setNewPrescription({\n      patientId: \"\",\n      symptoms: \"\",\n      medicines: [],\n      notes: \"\",\n    });\n    setCurrentMedicine({\n      name: \"\",\n      dosage: \"\",\n      frequency: \"\",\n      duration: \"\",\n      instructions: \"\",\n    });\n    setShowMedicineForm(false);\n    setEditingPrescription(null);\n    setShowEditModal(false);\n    setPatientSearchTerm(\"\");\n    setShowPatientDropdown(false);\n    setMedicineSearchTerm(\"\");\n    setShowMedicineDropdown(false);\n    setSelectedMedicine(null);\n  };\n\n  const addMedicine = () => {\n    if (!currentMedicine.name || !currentMedicine.dosage || !currentMedicine.frequency) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in medicine name, dosage, and frequency\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setNewPrescription(prev => ({\n      ...prev,\n      medicines: [...prev.medicines, currentMedicine]\n    }));\n\n    setCurrentMedicine({\n      name: \"\",\n      dosage: \"\",\n      frequency: \"\",\n      duration: \"\",\n      instructions: \"\",\n    });\n    setMedicineSearchTerm(\"\");\n    setShowMedicineDropdown(false);\n    setSelectedMedicine(null);\n    setShowMedicineForm(false);\n  };\n\n  const removeMedicine = (index: number) => {\n    setNewPrescription(prev => ({\n      ...prev,\n      medicines: prev.medicines.filter((_, i) => i !== index)\n    }));\n  };\n\n  // Add medicine from suggestion list - automatically clears blank form\n  const addMedicineFromSuggestion = (suggestionMedicine: any) => {\n    const newMedicine: Medicine = {\n      name: suggestionMedicine.name,\n      dosage: suggestionMedicine.power || \"\",\n      frequency: suggestionMedicine.frequency || \"\",\n      duration: suggestionMedicine.duration || \"\",\n      instructions: suggestionMedicine.instructions || \"\",\n    };\n\n    setNewPrescription(prev => ({\n      ...prev,\n      medicines: [...prev.medicines, newMedicine]\n    }));\n\n    // Clear the current medicine form and hide it\n    setCurrentMedicine({\n      name: \"\",\n      dosage: \"\",\n      frequency: \"\",\n      duration: \"\",\n      instructions: \"\",\n    });\n    setShowMedicineForm(false);\n  };\n\n  const handleCreatePrescription = () => {\n    if (!newPrescription.patientId || !newPrescription.symptoms || newPrescription.medicines.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields and add at least one medicine\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingPrescription) {\n      updatePrescriptionMutation.mutate({ \n        id: editingPrescription.id, \n        data: {\n          symptoms: newPrescription.symptoms,\n          medicines: newPrescription.medicines.map((med: Medicine) => ({\n            medicineId: (medicines as any[]).find((m: any) => m.name === med.name)?.id || \"\",\n            dosage: med.dosage,\n            frequency: med.frequency,\n            duration: med.duration,\n            instructions: med.instructions\n          })),\n          notes: newPrescription.notes\n        }\n      });\n    } else {\n      createPrescriptionMutation.mutate({\n        ...newPrescription,\n        medicines: newPrescription.medicines,\n      });\n    }\n  };\n\n  const handleEditPrescription = (prescription: any) => {\n    setEditingPrescription(prescription);\n    setShowEditModal(true);\n    \n    // Pre-fill form with existing data\n    setNewPrescription({\n      patientId: prescription.patientId,\n      symptoms: prescription.symptoms,\n      medicines: Array.isArray(prescription.medicines) ? prescription.medicines.map((med: any) => {\n        const medicineData = (medicines as any[]).find((m: any) => m.id === med.medicineId);\n        return {\n          name: medicineData?.name || 'Unknown Medicine',\n          dosage: med.dosage || '',\n          frequency: med.frequency || '',\n          duration: med.duration || '',\n          instructions: med.instructions || ''\n        };\n      }) : [],\n      notes: prescription.notes || \"\"\n    });\n  };\n\n  const showPrintPreviewModal = (prescription: any) => {\n    setSelectedPrescriptionToPrint(prescription);\n    setShowPrintPreview(true);\n  };\n\n  const getTemplateStyles = (template: string) => {\n    const baseStyles = `\n      body {\n        font-family: Arial, sans-serif;\n        max-width: 800px;\n        margin: 0 auto;\n        padding: 20px;\n        line-height: 1.6;\n        color: #333;\n      }\n      .prescription-container {\n        border: 1px solid #ddd;\n        padding: 30px;\n        border-radius: 8px;\n        background: white;\n      }\n      h1, h2, h3 { margin-bottom: 15px; }\n      .medicine-list { margin: 20px 0; }\n      .medicine-item { \n        margin: 10px 0; \n        padding: 10px; \n        border: 1px solid #eee; \n        border-radius: 4px; \n      }\n      @media print { \n        body { margin: 0; padding: 10px; } \n        .prescription-container { border: none; }\n      }\n    `;\n\n    switch (template) {\n      case 'modern':\n        return baseStyles + `\n          .header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            text-align: center;\n            padding: 25px;\n            margin: -30px -30px 30px -30px;\n            border-radius: 8px 8px 0 0;\n          }\n          .clinic-name {\n            font-size: 28px;\n            font-weight: bold;\n            margin-bottom: 5px;\n          }\n          .doctor-name {\n            font-size: 16px;\n            opacity: 0.9;\n          }\n          .patient-info {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 25px;\n            background: linear-gradient(45deg, #f093fb 0%, #f5576c 100%);\n            padding: 15px;\n            border-radius: 8px;\n            color: white;\n          }\n          .symptoms {\n            background: linear-gradient(45deg, #4facfe 0%, #00f2fe 100%);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n          }\n          .medicine-item {\n            background: linear-gradient(45deg, #43e97b 0%, #38f9d7 100%);\n            color: white;\n            border: none;\n            border-radius: 8px;\n          }\n          .notes {\n            background: linear-gradient(45deg, #fa709a 0%, #fee140 100%);\n            color: white;\n            padding: 15px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n          }\n          .footer {\n            text-align: center;\n            margin-top: 40px;\n            padding-top: 20px;\n            border-top: 2px solid #667eea;\n            color: #667eea;\n          }\n        `;\n      \n      case 'minimal':\n        return baseStyles + `\n          .header {\n            text-align: left;\n            border-bottom: 1px solid #eee;\n            padding-bottom: 15px;\n            margin-bottom: 25px;\n          }\n          .clinic-name {\n            font-size: 20px;\n            font-weight: 600;\n            color: #333;\n            margin-bottom: 3px;\n          }\n          .doctor-name {\n            font-size: 14px;\n            color: #666;\n          }\n          .patient-info {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 25px;\n            padding: 10px 0;\n            border-bottom: 1px solid #f0f0f0;\n          }\n          .symptoms {\n            margin-bottom: 20px;\n            padding: 10px 0;\n          }\n          .medicine-item {\n            border: none;\n            border-left: 3px solid #333;\n            padding: 8px 12px;\n            margin-bottom: 8px;\n            background: #fafafa;\n          }\n          .notes {\n            margin-bottom: 20px;\n            padding: 10px 0;\n            border-top: 1px solid #f0f0f0;\n          }\n          .footer {\n            text-align: right;\n            margin-top: 30px;\n            font-size: 12px;\n            color: #666;\n          }\n        `;\n      \n      default: // classic\n        return baseStyles + `\n          .header {\n            text-align: center;\n            border-bottom: 2px solid #333;\n            padding-bottom: 20px;\n            margin-bottom: 30px;\n          }\n          .clinic-name {\n            font-size: 24px;\n            font-weight: bold;\n            color: #2563eb;\n            margin-bottom: 5px;\n          }\n          .doctor-name {\n            font-size: 18px;\n            color: #666;\n          }\n          .patient-info {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 30px;\n            background: #f8f9fa;\n            padding: 15px;\n            border-radius: 8px;\n          }\n          .symptoms {\n            background: #fff3cd;\n            padding: 15px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n          }\n          .medicine-item {\n            border: 1px solid #ddd;\n            padding: 15px;\n            margin-bottom: 10px;\n            border-radius: 8px;\n            background: #f8f9fa;\n          }\n          .notes {\n            background: #e7f3ff;\n            padding: 15px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n          }\n          .footer {\n            text-align: center;\n            margin-top: 50px;\n            padding-top: 20px;\n            border-top: 1px solid #ddd;\n            color: #666;\n          }\n        `;\n    }\n  };\n\n  const printPrescription = (prescription: any, templateId: string) => {\n    // Create a new window for printing\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    // Get doctor name\n    const doctorName = user?.name || 'Dr. [Doctor Name]';\n    \n    // Get medicines details\n    const medicineDetails = Array.isArray(prescription.medicines) \n      ? (prescription.medicines as any[]).map((med: any) => {\n          const medicine = medicines.find(m => m.id === med.medicineId);\n          return {\n            name: medicine?.code || medicine?.name || 'Unknown Medicine',\n            power: medicine?.power || '',\n            dosage: med.dosage,\n            frequency: med.frequency,\n            duration: med.duration,\n            instructions: med.instructions\n          };\n        })\n      : [];\n\n    // Find the selected template\n    const template = (assignedTemplates as any[])?.find(t => t.templateId === templateId);\n    \n    if (!template) {\n      toast({\n        title: \"Error\",\n        description: \"Selected template not found\",\n        variant: \"destructive\"\n      });\n      printWindow.close();\n      return;\n    }\n\n    // Handle file templates\n    if (template.templateType === 'file') {\n      toast({\n        title: \"Info\", \n        description: \"File templates are not yet supported for direct printing. Please use the file directly.\",\n        variant: \"destructive\"\n      });\n      printWindow.close();\n      return;\n    }\n\n    // Find patient data\n    const patient = patients.find(p => p.id === prescription.patientId);\n\n    // Handle HTML templates\n    if (template.templateType === 'html' && template.templateContent) {\n      let templateHtml = template.templateContent;\n      \n      // Replace template variables with actual data\n      templateHtml = templateHtml.replace(/\\{\\{doctorName\\}\\}/g, doctorName);\n      templateHtml = templateHtml.replace(/\\{\\{clinicName\\}\\}/g, user?.clinicName || 'My Homeo Health Clinic');\n      templateHtml = templateHtml.replace(/\\{\\{degree\\}\\}/g, user?.degree || '');\n      templateHtml = templateHtml.replace(/\\{\\{specialist\\}\\}/g, user?.specialist || 'Homeopathic Specialist');\n      templateHtml = templateHtml.replace(/\\{\\{patientName\\}\\}/g, patient?.name || '');\n      templateHtml = templateHtml.replace(/\\{\\{patientId\\}\\}/g, patient?.patientId || '');\n      templateHtml = templateHtml.replace(/\\{\\{patientAge\\}\\}/g, patient?.age?.toString() || '');\n      templateHtml = templateHtml.replace(/\\{\\{patientGender\\}\\}/g, patient?.gender || '');\n      templateHtml = templateHtml.replace(/\\{\\{patientPhone\\}\\}/g, patient?.phone || '');\n      templateHtml = templateHtml.replace(/\\{\\{date\\}\\}/g, format(new Date(prescription.createdAt!), 'dd/MM/yyyy'));\n      templateHtml = templateHtml.replace(/\\{\\{prescriptionId\\}\\}/g, prescription.prescriptionId || '');\n      templateHtml = templateHtml.replace(/\\{\\{symptoms\\}\\}/g, prescription.symptoms || '');\n      templateHtml = templateHtml.replace(/\\{\\{notes\\}\\}/g, prescription.notes || '');\n      \n      // Replace medicines list\n      const medicinesHtml = medicineDetails.map((med, index) => `\n        <div style=\"margin-bottom: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px;\">\n          <div style=\"font-weight: bold; margin-bottom: 5px;\">\n            ${index + 1}. ${med.name}${med.power ? ` (${med.power})` : ''}\n          </div>\n          <div style=\"font-size: 11px;\">\n            <span style=\"margin-right: 15px;\"><strong>Dosage:</strong> ${med.dosage}</span>\n            <span style=\"margin-right: 15px;\"><strong>Frequency:</strong> ${med.frequency}</span>\n            <span><strong>Duration:</strong> ${med.duration}</span>\n            ${med.instructions ? `<br><strong>Instructions:</strong> ${med.instructions}` : ''}\n          </div>\n        </div>\n      `).join('');\n      templateHtml = templateHtml.replace(/\\{\\{medicines\\}\\}/g, medicinesHtml);\n\n      const printContent = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <title>Prescription - ${prescription.prescriptionId}</title>\n            <style>\n              body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }\n              @media print { \n                body { margin: 0; }\n                @page { margin: 0.5in; }\n              }\n            </style>\n          </head>\n          <body>\n            ${templateHtml}\n          </body>\n        </html>\n      `;\n\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      printWindow.print();\n      return;\n    }\n\n    // Fallback to default template rendering\n    const printContent = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Prescription - ${prescription.prescriptionId}</title>\n          <style>\n            ${getTemplateStyles(template.templateName || 'classic')}\n          </style>\n        </head>\n        <body>\n          <div class=\"prescription-container\">\n            <div class=\"header\">\n              <div class=\"clinic-name\">${user?.clinicName || 'My Homeo Health Clinic'}</div>\n              <div class=\"doctor-name\">${doctorName}</div>\n              ${user?.degree ? `<div>${user.degree}</div>` : ''}\n              ${user?.specialist ? `<div>${user.specialist}</div>` : ''}\n            </div>\n            \n            <div class=\"patient-info\">\n              <div>\n                <strong>Patient:</strong> ${patient?.name || 'Patient Name'}<br>\n                <strong>Age:</strong> ${patient?.age || 'N/A'}<br>\n                <strong>Gender:</strong> ${patient?.gender || 'N/A'}\n              </div>\n              <div>\n                <strong>Date:</strong> ${format(new Date(prescription.createdAt!), 'dd/MM/yyyy')}<br>\n                <strong>Prescription ID:</strong> ${prescription.prescriptionId}<br>\n                <strong>Patient ID:</strong> ${patient?.patientId || 'N/A'}\n              </div>\n            </div>\n\n            ${prescription.symptoms ? `\n              <div class=\"symptoms\">\n                <h3>Chief Complaints / Symptoms:</h3>\n                <p>${prescription.symptoms}</p>\n              </div>\n            ` : ''}\n\n            <div class=\"medicine-list\">\n              <h3>Prescribed Medicines:</h3>\n              ${medicineDetails.map((med, index) => `\n                <div class=\"medicine-item\">\n                  <div style=\"font-weight: bold; margin-bottom: 5px;\">\n                    ${index + 1}. ${med.name}${med.power ? ` (${med.power})` : ''}\n                  </div>\n                  <div>\n                    <strong>Dosage:</strong> ${med.dosage} | \n                    <strong>Frequency:</strong> ${med.frequency} | \n                    <strong>Duration:</strong> ${med.duration}\n                    ${med.instructions ? `<br><strong>Instructions:</strong> ${med.instructions}` : ''}\n                  </div>\n                </div>\n              `).join('')}\n            </div>\n\n            ${prescription.notes ? `\n              <div class=\"notes\">\n                <h3>Additional Notes:</h3>\n                <p>${prescription.notes}</p>\n              </div>\n            ` : ''}\n\n            <div class=\"footer\">\n              <p><strong>Doctor:</strong> ${doctorName}</p>\n              <p><strong>Clinic:</strong> ${user?.clinicName || 'Clinic Name'}</p>\n              ${user?.clinicLocation ? `<p><strong>Address:</strong> ${user.clinicLocation}</p>` : ''}\n              ${user?.phone ? `<p><strong>Contact:</strong> ${user.phone}</p>` : ''}\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(printContent);\n    printWindow.document.close();\n    printWindow.print();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 space-y-4 pb-20\">\n        <div className=\"animate-pulse space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"bg-white rounded-xl p-4 shadow-sm border h-32\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pb-20\">\n      {/* Header */}\n      <div className=\"p-4 border-b bg-white sticky top-16 z-10\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h1 className=\"text-xl font-semibold text-neutral-800\">{t('prescriptions.title')}</h1>\n          <Button\n            size=\"sm\"\n            className=\"touch-target\"\n            onClick={() => setShowAddModal(true)}\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            {t('prescriptions.add')}\n          </Button>\n        </div>\n        \n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-neutral-400 h-4 w-4\" />\n          <Input\n            placeholder={t('prescriptions.search.placeholder')}\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 form-input\"\n          />\n        </div>\n      </div>\n\n      {/* Prescriptions List */}\n      <div className=\"p-4 space-y-3\">\n        {filteredPrescriptions.length === 0 ? (\n          <Card className=\"shadow-sm border border-neutral-200\">\n            <CardContent className=\"p-8 text-center\">\n              <FileText className=\"h-16 w-16 text-neutral-300 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-neutral-800 mb-2\">\n{searchTerm ? t('no.data.found') : t('prescriptions.title')}\n              </h3>\n              <p className=\"text-neutral-500 mb-4\">\n{searchTerm \n                  ? t('try.different.search') \n                  : t('add.first.item')\n                }\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => setShowAddModal(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n{t('prescriptions.add')}\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          filteredPrescriptions\n            .sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n            .map((prescription: any) => (\n              <Card key={prescription.id} className=\"shadow-sm border border-neutral-200 card-hover\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-12 h-12\">\n                        <AvatarFallback className=\"bg-gradient-to-br from-accent to-primary text-white\">\n                          {prescription.patientName.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h3 className=\"font-semibold text-neutral-800\">{prescription.patientName}</h3>\n                        <p className=\"text-sm text-neutral-500\">\n                          {prescription.patientGender}, {prescription.patientAge} • {prescription.patientIdDisplay}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-medium text-neutral-700\">{prescription.prescriptionId}</p>\n                      <p className=\"text-xs text-neutral-500\">\n                        {format(new Date(prescription.createdAt), 'MMM d, yyyy')}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mb-3\">\n                    <p className=\"text-sm text-neutral-600 font-medium mb-1\">Symptoms:</p>\n                    <p className=\"text-sm text-neutral-700 line-clamp-2\">{prescription.symptoms}</p>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex flex-wrap gap-1\">\n                      {prescription.medicines.slice(0, 2).map((med: Medicine, index: number) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                          {med.name}\n                        </Badge>\n                      ))}\n                      {prescription.medicines.length > 2 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{prescription.medicines.length - 2} more\n                        </Badge>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-neutral-500\">\n                      {prescription.medicines.length} medicine{prescription.medicines.length !== 1 ? 's' : ''}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"flex-1 touch-target\"\n                      onClick={() => setSelectedPrescription(prescription)}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      View Details\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"flex-1 touch-target\"\n                      onClick={() => handleEditPrescription(prescription)}\n                    >\n                      <Edit className=\"h-4 w-4 mr-1\" />\n                      Edit\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      className=\"flex-1 touch-target\"\n                      onClick={() => showPrintPreviewModal(prescription)}\n                    >\n                      <Printer className=\"h-4 w-4 mr-1\" />\n                      Print\n                    </Button>\n                    {user?.canDeletePatients && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        className=\"touch-target\"\n                        onClick={() => {\n                          if (window.confirm(`Are you sure you want to delete this prescription? This action cannot be undone.`)) {\n                            deletePrescriptionMutation.mutate(prescription.id);\n                          }\n                        }}\n                        disabled={deletePrescriptionMutation.isPending}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n        )}\n      </div>\n\n      {/* Add Prescription Modal */}\n      <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n        <DialogContent className=\"max-w-lg max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Add New Prescription</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"patient\">Patient *</Label>\n              <div className=\"relative\">\n                <Input\n                  placeholder=\"Search patient by name, ID, or mobile number...\"\n                  value={patientSearchTerm}\n                  onChange={(e) => {\n                    setPatientSearchTerm(e.target.value);\n                    setShowPatientDropdown(true);\n                  }}\n                  onFocus={() => setShowPatientDropdown(true)}\n                  onBlur={() => {\n                    // Delay hiding dropdown to allow click on options\n                    setTimeout(() => setShowPatientDropdown(false), 200);\n                  }}\n                  className=\"form-input\"\n                />\n                {showPatientDropdown && filteredPatients.length > 0 && (\n                  <div className=\"absolute z-10 w-full bg-white border border-neutral-200 rounded-md shadow-lg max-h-48 overflow-y-auto mt-1\">\n                    {filteredPatients.map((patient: any) => (\n                      <div\n                        key={patient.id}\n                        className=\"p-3 hover:bg-neutral-50 cursor-pointer border-b border-neutral-100 last:border-b-0\"\n                        onClick={() => {\n                          setNewPrescription({ ...newPrescription, patientId: patient.id });\n                          setPatientSearchTerm(`${patient.name} (${patient.patientId})`);\n                          setShowPatientDropdown(false);\n                        }}\n                      >\n                        <div className=\"font-medium text-neutral-800\">{patient.name}</div>\n                        <div className=\"text-sm text-neutral-600\">\n                          ID: {patient.patientId} • Age: {patient.age} • {patient.gender}\n                        </div>\n                        {patient.phone && (\n                          <div className=\"text-sm text-neutral-500\">Phone: {patient.phone}</div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n                {showPatientDropdown && filteredPatients.length === 0 && patientSearchTerm && (\n                  <div className=\"absolute z-10 w-full bg-white border border-neutral-200 rounded-md shadow-lg mt-1 p-3 text-center text-neutral-500\">\n                    No patients found matching \"{patientSearchTerm}\"\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"symptoms\">Symptoms *</Label>\n              <Textarea\n                id=\"symptoms\"\n                value={newPrescription.symptoms}\n                onChange={(e) => setNewPrescription({ ...newPrescription, symptoms: e.target.value })}\n                placeholder=\"Describe the patient's symptoms...\"\n                className=\"form-input min-h-20\"\n              />\n            </div>\n\n            {/* Medicine Selection */}\n            <div className=\"space-y-3\">\n              <Label>Medicines *</Label>\n              \n              {/* Current Medicines */}\n              {newPrescription.medicines.length > 0 && (\n                <div className=\"space-y-2\">\n                  {newPrescription.medicines.map((medicine, index) => (\n                    <div key={index} className=\"flex items-center justify-between bg-neutral-50 p-3 rounded-lg\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">{medicine.name}</p>\n                        <p className=\"text-xs text-neutral-600\">\n                          {medicine.dosage} • {medicine.frequency}\n                          {medicine.duration && ` • ${medicine.duration}`}\n                        </p>\n                      </div>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeMedicine(index)}\n                        className=\"p-1 h-8 w-8\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {/* Add Medicine Button or Form */}\n              {!showMedicineForm ? (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={() => setShowMedicineForm(true)}\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Medicine\n                </Button>\n              ) : (\n                <div className=\"space-y-3 border rounded-lg p-3 bg-neutral-50\">\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div className=\"medicine-dropdown-container relative\">\n                      <Label htmlFor=\"medicineName\">Medicine Name</Label>\n                      <Input\n                        id=\"medicineName\"\n                        value={medicineSearchTerm}\n                        onChange={(e) => handleMedicineSearchChange(e.target.value)}\n                        onFocus={() => setShowMedicineDropdown(medicineSearchTerm.length > 0)}\n                        placeholder=\"Search medicine by name, code, or company...\"\n                        className=\"form-input\"\n                      />\n                      \n                      {showMedicineDropdown && filteredMedicines.length > 0 && (\n                        <div className=\"absolute top-full left-0 right-0 z-50 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-y-auto mt-1\">\n                          {filteredMedicines.map((medicine: any) => (\n                            <div\n                              key={medicine.id}\n                              className=\"p-3 hover:bg-gray-50 cursor-pointer border-b last:border-b-0\"\n                              onClick={() => handleMedicineSelect(medicine)}\n                            >\n                              <div className=\"font-medium text-sm\">\n                                {medicine.name || medicine.code}\n                              </div>\n                              <div className=\"text-xs text-gray-500 mt-1\">\n                                {medicine.code && medicine.name !== medicine.code && (\n                                  <span className=\"mr-2\">Code: {medicine.code}</span>\n                                )}\n                                {medicine.company && (\n                                  <span className=\"mr-2\">Company: {medicine.company}</span>\n                                )}\n                                {medicine.power && (\n                                  <span>Power: {medicine.power}</span>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n\n                      {showMedicineDropdown && medicineSearchTerm.length > 0 && filteredMedicines.length === 0 && (\n                        <div className=\"absolute top-full left-0 right-0 z-50 bg-white border border-gray-200 rounded-md shadow-lg mt-1\">\n                          <div className=\"p-3 text-center text-gray-500 text-sm\">\n                            No medicines found matching \"{medicineSearchTerm}\"\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"dosage\">Dosage</Label>\n                      <Input\n                        id=\"dosage\"\n                        value={currentMedicine.dosage}\n                        onChange={(e) => setCurrentMedicine({ ...currentMedicine, dosage: e.target.value })}\n                        placeholder=\"e.g., 30C\"\n                        className=\"form-input\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div>\n                      <Label htmlFor=\"frequency\">Frequency</Label>\n                      <Select\n                        value={currentMedicine.frequency}\n                        onValueChange={(value) => setCurrentMedicine({ ...currentMedicine, frequency: value })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select frequency\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Once daily\">Once daily</SelectItem>\n                          <SelectItem value=\"Twice daily\">Twice daily</SelectItem>\n                          <SelectItem value=\"Three times daily\">Three times daily</SelectItem>\n                          <SelectItem value=\"Four times daily\">Four times daily</SelectItem>\n                          <SelectItem value=\"As needed\">As needed</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"duration\">Duration</Label>\n                      <Input\n                        id=\"duration\"\n                        value={currentMedicine.duration}\n                        onChange={(e) => setCurrentMedicine({ ...currentMedicine, duration: e.target.value })}\n                        placeholder=\"e.g., 7 days\"\n                        className=\"form-input\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"instructions\">Instructions</Label>\n                    <Input\n                      id=\"instructions\"\n                      value={currentMedicine.instructions}\n                      onChange={(e) => setCurrentMedicine({ ...currentMedicine, instructions: e.target.value })}\n                      placeholder=\"Special instructions (optional)\"\n                      className=\"form-input\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setShowMedicineForm(false);\n                        setCurrentMedicine({\n                          name: \"\",\n                          dosage: \"\",\n                          frequency: \"\",\n                          duration: \"\",\n                          instructions: \"\",\n                        });\n                      }}\n                      className=\"flex-1\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      size=\"sm\"\n                      onClick={addMedicine}\n                      className=\"flex-1\"\n                    >\n                      Add Medicine\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"notes\">Additional Notes</Label>\n              <Textarea\n                id=\"notes\"\n                value={newPrescription.notes}\n                onChange={(e) => setNewPrescription({ ...newPrescription, notes: e.target.value })}\n                placeholder=\"Any additional notes or instructions...\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => setShowAddModal(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                className=\"flex-1\"\n                onClick={handleCreatePrescription}\n                disabled={createPrescriptionMutation.isPending}\n              >\n                {createPrescriptionMutation.isPending ? \"Creating...\" : \"Create Prescription\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Prescription Details Modal */}\n      <Dialog open={!!selectedPrescription} onOpenChange={() => setSelectedPrescription(null)}>\n        <DialogContent className=\"max-w-lg max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Prescription Details</DialogTitle>\n          </DialogHeader>\n          \n          {selectedPrescription && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <Avatar className=\"w-16 h-16\">\n                  <AvatarFallback className=\"bg-gradient-to-br from-accent to-primary text-white text-lg\">\n                    {selectedPrescription.patientName.split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <h3 className=\"text-lg font-semibold\">{selectedPrescription.patientName}</h3>\n                  <p className=\"text-neutral-600\">Patient ID: {selectedPrescription.patientIdDisplay}</p>\n                  <p className=\"text-sm text-neutral-500\">\n                    {selectedPrescription.patientGender}, {selectedPrescription.patientAge} years\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Prescription ID:</span>\n                  <p>{selectedPrescription.prescriptionId}</p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Date:</span>\n                  <p>{format(new Date(selectedPrescription.createdAt), 'MMMM d, yyyy')}</p>\n                </div>\n              </div>\n\n              <div>\n                <span className=\"font-medium text-neutral-700\">Symptoms:</span>\n                <p className=\"text-sm mt-1\">{selectedPrescription.symptoms}</p>\n              </div>\n\n              <div>\n                <span className=\"font-medium text-neutral-700\">Medicines:</span>\n                <div className=\"space-y-3 mt-2\">\n                  {selectedPrescription.medicines.map((medicine: Medicine, index: number) => (\n                    <div key={index} className=\"bg-neutral-50 p-3 rounded-lg\">\n                      <p className=\"font-medium text-sm\">{medicine.name}</p>\n                      <div className=\"text-xs text-neutral-600 mt-1 space-y-1\">\n                        <p><strong>Dosage:</strong> {medicine.dosage}</p>\n                        <p><strong>Frequency:</strong> {medicine.frequency}</p>\n                        {medicine.duration && <p><strong>Duration:</strong> {medicine.duration}</p>}\n                        {medicine.instructions && <p><strong>Instructions:</strong> {medicine.instructions}</p>}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {selectedPrescription.notes && (\n                <div>\n                  <span className=\"font-medium text-neutral-700\">Additional Notes:</span>\n                  <p className=\"text-sm mt-1\">{selectedPrescription.notes}</p>\n                </div>\n              )}\n\n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setSelectedPrescription(null)}\n                >\n                  Close\n                </Button>\n                <Button\n                  className=\"flex-1\"\n                  onClick={() => showPrintPreviewModal(selectedPrescription)}\n                >\n                  <Printer className=\"h-4 w-4 mr-2\" />\n                  Print\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Prescription Modal */}\n      <Dialog open={showEditModal} onOpenChange={() => setShowEditModal(false)}>\n        <DialogContent className=\"max-w-lg max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Prescription</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"patient\">Patient *</Label>\n              <Select\n                value={newPrescription.patientId}\n                onValueChange={(value) => setNewPrescription({ ...newPrescription, patientId: value })}\n                disabled={true}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select patient\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {patients.map((patient: any) => (\n                    <SelectItem key={patient.id} value={patient.id}>\n                      {patient.name} ({patient.patientId})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"symptoms\">Symptoms *</Label>\n              <Textarea\n                id=\"symptoms\"\n                value={newPrescription.symptoms}\n                onChange={(e) => setNewPrescription({ ...newPrescription, symptoms: e.target.value })}\n                placeholder=\"Describe the patient's symptoms...\"\n                className=\"form-input min-h-20\"\n              />\n            </div>\n\n            {/* Medicine Selection */}\n            <div className=\"space-y-3\">\n              <Label>Medicines *</Label>\n              \n              {/* Current Medicines */}\n              {newPrescription.medicines.length > 0 && (\n                <div className=\"space-y-2\">\n                  {newPrescription.medicines.map((medicine, index) => (\n                    <div key={index} className=\"flex items-center justify-between bg-neutral-50 p-3 rounded-lg\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">{medicine.name}</p>\n                        <p className=\"text-xs text-neutral-600\">\n                          {medicine.dosage} • {medicine.frequency}\n                          {medicine.duration && ` • ${medicine.duration}`}\n                        </p>\n                      </div>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeMedicine(index)}\n                        className=\"p-1 h-8 w-8\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n              \n              {/* Add Medicine Form */}\n              <div className=\"border rounded-lg p-4 space-y-3 bg-white\">\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"medicine-dropdown-container relative\">\n                    <Label htmlFor=\"medicine-name\">Medicine *</Label>\n                    <Input\n                      id=\"medicine-name\"\n                      value={medicineSearchTerm}\n                      onChange={(e) => handleMedicineSearchChange(e.target.value)}\n                      onFocus={() => setShowMedicineDropdown(medicineSearchTerm.length > 0)}\n                      placeholder=\"Search medicine by name, code, or company...\"\n                      className=\"form-input\"\n                    />\n                    \n                    {showMedicineDropdown && filteredMedicines.length > 0 && (\n                      <div className=\"absolute top-full left-0 right-0 z-50 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-y-auto mt-1\">\n                        {filteredMedicines.map((medicine: any) => (\n                          <div\n                            key={medicine.id}\n                            className=\"p-3 hover:bg-gray-50 cursor-pointer border-b last:border-b-0\"\n                            onClick={() => handleMedicineSelect(medicine)}\n                          >\n                            <div className=\"font-medium text-sm\">\n                              {medicine.name || medicine.code}\n                            </div>\n                            <div className=\"text-xs text-gray-500 mt-1\">\n                              {medicine.code && medicine.name !== medicine.code && (\n                                <span className=\"mr-2\">Code: {medicine.code}</span>\n                              )}\n                              {medicine.company && (\n                                <span className=\"mr-2\">Company: {medicine.company}</span>\n                              )}\n                              {medicine.power && (\n                                <span>Power: {medicine.power}</span>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n\n                    {showMedicineDropdown && medicineSearchTerm.length > 0 && filteredMedicines.length === 0 && (\n                      <div className=\"absolute top-full left-0 right-0 z-50 bg-white border border-gray-200 rounded-md shadow-lg mt-1\">\n                        <div className=\"p-3 text-center text-gray-500 text-sm\">\n                          No medicines found matching \"{medicineSearchTerm}\"\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"dosage\">Dosage *</Label>\n                    <Input\n                      id=\"dosage\"\n                      value={currentMedicine.dosage}\n                      onChange={(e) => setCurrentMedicine({ ...currentMedicine, dosage: e.target.value })}\n                      placeholder=\"e.g., 30C\"\n                      className=\"form-input\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label htmlFor=\"frequency\">Frequency *</Label>\n                    <Select\n                      value={currentMedicine.frequency}\n                      onValueChange={(value) => setCurrentMedicine({ ...currentMedicine, frequency: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select frequency\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Once daily\">Once daily</SelectItem>\n                        <SelectItem value=\"Twice daily\">Twice daily</SelectItem>\n                        <SelectItem value=\"Three times daily\">Three times daily</SelectItem>\n                        <SelectItem value=\"Four times daily\">Four times daily</SelectItem>\n                        <SelectItem value=\"As needed\">As needed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"duration\">Duration</Label>\n                    <Input\n                      id=\"duration\"\n                      value={currentMedicine.duration}\n                      onChange={(e) => setCurrentMedicine({ ...currentMedicine, duration: e.target.value })}\n                      placeholder=\"e.g., 7 days\"\n                      className=\"form-input\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"instructions\">Instructions</Label>\n                  <Input\n                    id=\"instructions\"\n                    value={currentMedicine.instructions}\n                    onChange={(e) => setCurrentMedicine({ ...currentMedicine, instructions: e.target.value })}\n                    placeholder=\"Special instructions (optional)\"\n                    className=\"form-input\"\n                  />\n                </div>\n                \n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addMedicine}\n                  className=\"w-full\"\n                >\n                  Add Medicine\n                </Button>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"notes\">Additional Notes</Label>\n              <Textarea\n                id=\"notes\"\n                value={newPrescription.notes}\n                onChange={(e) => setNewPrescription({ ...newPrescription, notes: e.target.value })}\n                placeholder=\"Any additional notes or instructions...\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => {\n                  setShowEditModal(false);\n                  resetForm();\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                className=\"flex-1\"\n                onClick={handleCreatePrescription}\n                disabled={updatePrescriptionMutation.isPending}\n              >\n                {updatePrescriptionMutation.isPending ? \"Updating...\" : \"Update Prescription\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Print Preview Modal */}\n      <Dialog open={showPrintPreview} onOpenChange={setShowPrintPreview}>\n        <DialogContent className={`${isMobile ? 'w-[95vw] max-h-[90vh]' : 'max-w-4xl max-h-[85vh]'} overflow-hidden`}>\n          <DialogHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <DialogTitle>Print Prescription Preview</DialogTitle>\n                <DialogDescription>\n                  Select a template and preview before printing\n                </DialogDescription>\n              </div>\n              <Button\n                onClick={() => {\n                  if (selectedPrescriptionToPrint) {\n                    printPrescription(selectedPrescriptionToPrint, selectedTemplate);\n                    setShowPrintPreview(false);\n                  }\n                }}\n                className=\"flex items-center space-x-2\"\n                size=\"sm\"\n              >\n                <Printer className=\"h-4 w-4\" />\n                <span>Print</span>\n              </Button>\n            </div>\n          </DialogHeader>\n\n          <div className=\"flex-1 overflow-hidden\">\n            <div className=\"h-full flex flex-col space-y-4\">\n              <div className=\"flex-shrink-0\">\n                <h4 className=\"text-sm font-medium\">Select Template:</h4>\n                {templatesLoading ? (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    Loading assigned templates...\n                  </div>\n                ) : (assignedTemplates as any[])?.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <FileText className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No templates assigned by admin</p>\n                    <p className=\"text-xs mt-1\">Contact your administrator to assign prescription templates</p>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                    {(assignedTemplates as any[]).map((template: any) => (\n                      <Card \n                        key={template.templateId}\n                        className={`cursor-pointer transition-colors ${\n                          selectedTemplate === template.templateId \n                            ? 'ring-2 ring-primary bg-primary/5' \n                            : 'hover:bg-accent/50'\n                        }`}\n                        onClick={() => {\n                          setSelectedTemplate(template.templateId);\n                          setSelectedCustomTemplate(template);\n                        }}\n                      >\n                        <CardContent className=\"p-4 text-center\">\n                          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                            <FileText className=\"h-4 w-4 text-blue-600\" />\n                          </div>\n                          <p className=\"font-medium text-sm\">{template.templateName}</p>\n                          <p className=\"text-xs text-muted-foreground capitalize\">{template.templateType}</p>\n                          {template.isDefault && (\n                            <Badge variant=\"secondary\" className=\"mt-1 text-xs\">Default</Badge>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {selectedPrescriptionToPrint && selectedTemplate && (\n                <div className=\"flex-1 overflow-hidden\">\n                  <h4 className=\"text-sm font-medium mb-2\">Preview:</h4>\n                  <ScrollArea className=\"h-full border rounded-lg\">\n                    <div className=\"p-4 bg-white\">\n                      <div \n                        dangerouslySetInnerHTML={{\n                          __html: selectedCustomTemplate?.templateType === 'html' && selectedCustomTemplate?.templateContent \n                            ? (() => {\n                                let html = selectedCustomTemplate.templateContent;\n                                const patient = patients.find(p => p.id === selectedPrescriptionToPrint.patientId);\n                                const medicineDetails = Array.isArray(selectedPrescriptionToPrint.medicines) \n                                  ? (selectedPrescriptionToPrint.medicines as any[]).map((med: any) => {\n                                      const medicine = medicines.find(m => m.id === med.medicineId);\n                                      return {\n                                        name: medicine?.code || medicine?.name || 'Unknown Medicine',\n                                        power: medicine?.power || '',\n                                        dosage: med.dosage,\n                                        frequency: med.frequency,\n                                        duration: med.duration,\n                                        instructions: med.instructions\n                                      };\n                                    })\n                                  : [];\n\n                                // Replace template variables\n                                html = html.replace(/\\{\\{doctorName\\}\\}/g, user?.name || 'Dr. [Doctor Name]');\n                                html = html.replace(/\\{\\{clinicName\\}\\}/g, user?.clinicName || 'My Homeo Health Clinic');\n                                html = html.replace(/\\{\\{degree\\}\\}/g, user?.degree || '');\n                                html = html.replace(/\\{\\{specialist\\}\\}/g, user?.specialist || 'Homeopathic Specialist');\n                                html = html.replace(/\\{\\{patientName\\}\\}/g, patient?.name || '');\n                                html = html.replace(/\\{\\{patientId\\}\\}/g, patient?.patientId || '');\n                                html = html.replace(/\\{\\{patientAge\\}\\}/g, patient?.age?.toString() || '');\n                                html = html.replace(/\\{\\{patientGender\\}\\}/g, patient?.gender || '');\n                                html = html.replace(/\\{\\{patientPhone\\}\\}/g, patient?.phone || '');\n                                html = html.replace(/\\{\\{date\\}\\}/g, format(new Date(selectedPrescriptionToPrint.createdAt!), 'dd/MM/yyyy'));\n                                html = html.replace(/\\{\\{prescriptionId\\}\\}/g, selectedPrescriptionToPrint.prescriptionId || '');\n                                html = html.replace(/\\{\\{symptoms\\}\\}/g, selectedPrescriptionToPrint.symptoms || '');\n                                html = html.replace(/\\{\\{notes\\}\\}/g, selectedPrescriptionToPrint.notes || '');\n                                \n                                const medicinesHtml = medicineDetails.map((med, index) => `\n                                  <div style=\"margin-bottom: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px;\">\n                                    <div style=\"font-weight: bold; margin-bottom: 5px;\">\n                                      ${index + 1}. ${med.name}${med.power ? ` (${med.power})` : ''}\n                                    </div>\n                                    <div style=\"font-size: 11px;\">\n                                      <span style=\"margin-right: 15px;\"><strong>Dosage:</strong> ${med.dosage}</span>\n                                      <span style=\"margin-right: 15px;\"><strong>Frequency:</strong> ${med.frequency}</span>\n                                      <span><strong>Duration:</strong> ${med.duration}</span>\n                                      ${med.instructions ? `<br><strong>Instructions:</strong> ${med.instructions}` : ''}\n                                    </div>\n                                  </div>\n                                `).join('');\n                                html = html.replace(/\\{\\{medicines\\}\\}/g, medicinesHtml);\n\n                                return html;\n                              })()\n                            : `<div style=\"text-align: center; padding: 40px; color: #666;\">\n                                <h3>Template Preview</h3>\n                                <p>No custom template content available. Default template will be used for printing.</p>\n                              </div>`\n                        }}\n                      />\n                    </div>\n                  </ScrollArea>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowPrintPreview(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => {\n                if (selectedPrescriptionToPrint) {\n                  printPrescription(selectedPrescriptionToPrint, selectedTemplate);\n                  setShowPrintPreview(false);\n                }\n              }}\n              className=\"flex items-center space-x-2 bg-primary hover:bg-primary/90\"\n            >\n              <Printer className=\"h-5 w-5\" />\n              <span>Print</span>\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":68265},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/auth/LoginForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, AlertCircle } from \"lucide-react\";\nimport { MedicalLogo } from \"@/components/ui/MedicalLogo\";\nimport { useHapticFeedback } from \"@/hooks/use-pwa\";\n// Import background image directly\nimport backgroundImageUrl from \"@assets/background_1753640941516.jpg\";\n\n// Debug: log the image URL to console\nconsole.log('Background image URL:', backgroundImageUrl);\n\ninterface LoginFormProps {\n  onLogin: (username: string, password: string) => Promise<boolean>;\n  isLoading: boolean;\n  error?: string;\n}\n\nexport default function LoginForm({ onLogin, isLoading, error }: LoginFormProps) {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const { lightTap } = useHapticFeedback();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    lightTap();\n    \n    if (!username.trim() || !password.trim()) {\n      return;\n    }\n\n    await onLogin(username.trim(), password);\n  };\n\n  const demoAccounts = [\n    { username: \"admin\", password: \"admin123\", role: \"Administrator\" },\n    { username: \"doctor\", password: \"doctor123\", role: \"Doctor\" },\n    { username: \"ranajit\", password: \"ranajit123\", role: \"Dr. Ranajit\" },\n  ];\n\n  const fillDemo = (username: string, password: string) => {\n    lightTap();\n    setUsername(username);\n    setPassword(password);\n  };\n\n  return (\n    // Mobile-first responsive login layout\n    <div className=\"login-background min-h-screen flex items-center justify-center md:justify-end p-4 md:pr-16 relative\">\n      {/* Background image with opacity */}\n      <div \n        className=\"absolute inset-0 bg-blue-500\"\n        style={{\n          backgroundImage: `url(${backgroundImageUrl})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n          opacity: 0.6\n        }}\n      ></div>\n      {/* Overlay for better contrast - Updated styling */}\n      <div className=\"absolute inset-0 from-white/60 via-primary/20 to-white/40 bg-[#2a2c3700] z-10\"></div>\n      <Card className=\"w-full max-w-md mx-auto md:mx-0 relative z-20 bg-white/95 backdrop-blur-sm shadow-2xl border-0\">\n        <CardHeader className=\"text-center pb-4\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <MedicalLogo showBackground={true} size={64} className=\"mr-4\" />\n            <div className=\"text-left\">\n              <h1 className=\"text-2xl font-bold\">\n                <span className=\"text-blue-600\">My Homeo</span>{\" \"}\n                <span className=\"text-teal-600\">Health</span>\n              </h1>\n              <p className=\"text-gray-500 text-sm\">Doctor Dashboard</p>\n            </div>\n          </div>\n          <p className=\"text-neutral-600 mt-4\">\n            Sign in to access your dashboard\n          </p>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"Enter your username\"\n                className=\"form-input touch-target\"\n                required\n                autoComplete=\"username\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"Enter your password\"\n                  className=\"form-input touch-target pr-10\"\n                  required\n                  autoComplete=\"current-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-neutral-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-neutral-400\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full touch-target\"\n              disabled={isLoading || !username.trim() || !password.trim()}\n            >\n              {isLoading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"space-y-3\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-neutral-200\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white px-2 text-neutral-500\">Demo Accounts</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 gap-2\">\n              {demoAccounts.map((account) => (\n                <Button\n                  key={account.username}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"justify-start touch-target min-h-[48px] text-left p-3\"\n                  onClick={() => fillDemo(account.username, account.password)}\n                  type=\"button\"\n                >\n                  <div className=\"text-left w-full\">\n                    <div className=\"font-medium text-sm\">{account.role}</div>\n                    <div className=\"text-xs text-neutral-500\">\n                      {account.username} / {account.password}\n                    </div>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6734},"client/src/components/layout/DesktopHeader.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Calendar, Users, Pill, FileText, BarChart3, User, LogOut, ChevronDown, Settings, MessageCircle, Languages } from 'lucide-react';\nimport { MedicalLogo } from \"@/components/ui/MedicalLogo\";\nimport ProfileModal from \"@/components/ProfileModal\";\nimport WhatsAppModal from \"@/components/WhatsAppModal\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport type { AuthUser } from '@/lib/auth';\n\ninterface DesktopHeaderProps {\n  user: AuthUser;\n  currentPage: string;\n  onNavigate: (page: string) => void;\n  onLogout: () => void;\n}\n\nexport const DesktopHeader: React.FC<DesktopHeaderProps> = ({\n  user,\n  currentPage,\n  onNavigate,\n  onLogout\n}) => {\n  const [showProfileModal, setShowProfileModal] = useState(false);\n  const [showWhatsAppModal, setShowWhatsAppModal] = useState(false);\n  const { t, language, setLanguage } = useLanguage();\n  const isAdmin = user.role === 'admin';\n  const isDoctor = user.role === 'doctor';\n\n  const navigationItems = [\n    { key: 'dashboard', label: t('nav.dashboard'), icon: BarChart3, show: true },\n    { key: 'patients', label: t('nav.patients'), icon: Users, show: isAdmin || isDoctor },\n    { key: 'medicines', label: t('nav.medicines'), icon: Pill, show: isAdmin || isDoctor },\n    { key: 'appointments', label: t('nav.appointments'), icon: Calendar, show: isAdmin || isDoctor },\n    { key: 'prescriptions', label: t('nav.prescriptions'), icon: FileText, show: isAdmin || isDoctor },\n  ];\n\n  return (\n    <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between max-w-7xl mx-auto\">\n        {/* Logo and Brand */}\n        <div className=\"flex items-center space-x-3\">\n          <MedicalLogo showBackground={true} size={48} />\n          <div>\n            <h1 className=\"text-xl font-bold\">\n              <span className=\"text-blue-600\">My Homeo</span>{\" \"}\n              <span className=\"text-teal-600\">Health</span>\n            </h1>\n            <p className=\"text-sm text-gray-500\">{isAdmin ? t('dashboard.admin') : t('dashboard.doctor')}</p>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex items-center space-x-1\">\n          {navigationItems.filter(item => item.show).map((item) => {\n            const Icon = item.icon;\n            const isActive = currentPage === item.key;\n            \n            return (\n              <Button\n                key={item.key}\n                variant={isActive ? \"default\" : \"ghost\"}\n                className={`flex items-center space-x-2 px-4 py-2 ${\n                  isActive \n                    ? 'bg-primary text-white' \n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n                }`}\n                onClick={() => onNavigate(item.key)}\n              >\n                <Icon className=\"h-4 w-4\" />\n                <span>{item.label}</span>\n              </Button>\n            );\n          })}\n        </nav>\n\n        {/* User Profile */}\n        <div className=\"flex items-center space-x-4\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                className=\"flex items-center space-x-3 text-left p-2 hover:bg-gray-100\"\n              >\n                <Avatar className=\"h-8 w-8 bg-primary\">\n                  <AvatarFallback className=\"text-white text-sm font-medium\">\n                    {user.username.slice(0, 2).toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-gray-900\">\n                    {user.name || `Dr. ${user.username}`}\n                  </p>\n                  <p className=\"text-xs text-gray-500 capitalize\">\n                    {user.role}\n                  </p>\n                </div>\n                <ChevronDown className=\"h-4 w-4 text-gray-400\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-48\">\n              <DropdownMenuItem onClick={() => setShowProfileModal(true)}>\n                <User className=\"h-4 w-4 mr-2\" />\n                {t('nav.profile')}\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setLanguage(language === 'en' ? 'bn' : 'en')}>\n                <Languages className=\"h-4 w-4 mr-2\" />\n                {language === 'en' ? 'বাংলা' : 'English'}\n              </DropdownMenuItem>\n              {user?.role === 'doctor' && (\n                <DropdownMenuItem onClick={() => onNavigate('doctor/settings')}>\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Set Availability\n                </DropdownMenuItem>\n              )}\n              {user?.role === 'doctor' && (\n                <DropdownMenuItem onClick={() => setShowWhatsAppModal(true)}>\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  WhatsApp Booking\n                </DropdownMenuItem>\n              )}\n              {user?.role === 'admin' && (\n                <DropdownMenuItem onClick={() => {\n                  onNavigate('dashboard');\n                  setTimeout(() => {\n                    const adminTab = document.querySelector('[data-value=\"admins\"]') as HTMLElement;\n                    if (adminTab) {\n                      adminTab.click();\n                    }\n                  }, 200);\n                }}>\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Manage Admin Users\n                </DropdownMenuItem>\n              )}\n              <DropdownMenuItem onClick={onLogout}>\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                {t('nav.logout')}\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        <ProfileModal \n          isOpen={showProfileModal}\n          onClose={() => setShowProfileModal(false)}\n          onLogout={onLogout}\n          user={user}\n        />\n        <WhatsAppModal\n          isOpen={showWhatsAppModal}\n          onClose={() => setShowWhatsAppModal(false)}\n          user={user}\n        />\n      </div>\n    </header>\n  );\n};","size_bytes":6468},"client/src/components/mobile/BottomNavigation.tsx":{"content":"import { Calendar, Users, BarChart3, FileText, Pill } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useHapticFeedback } from \"@/hooks/use-pwa\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface BottomNavigationProps {\n  currentPage: string;\n  onNavigate: (page: string) => void;\n  userRole: string;\n}\n\nexport default function BottomNavigation({ currentPage, onNavigate, userRole }: BottomNavigationProps) {\n  const { lightTap } = useHapticFeedback();\n  const { t } = useLanguage();\n\n  const handleNavigate = (page: string) => {\n    lightTap();\n    onNavigate(page);\n  };\n\n  const navigationItems = [\n    { id: 'calendar', label: t('nav.calendar'), icon: Calendar, roles: ['doctor'] },\n    { id: 'patients', label: t('nav.patients'), icon: Users, roles: ['admin', 'doctor'] },\n    { id: 'dashboard', label: t('nav.dashboard'), icon: BarChart3, roles: ['admin', 'doctor'] },\n    { id: 'prescriptions', label: t('nav.prescriptions'), icon: FileText, roles: ['admin', 'doctor'] },\n    { id: 'medicines', label: t('nav.medicines'), icon: Pill, roles: ['admin', 'doctor'] },\n  ];\n\n  const filteredItems = navigationItems.filter(item => \n    item.roles.includes(userRole || 'patient')\n  );\n\n  return (\n    <nav className=\"mobile-nav\">\n      <div className={`grid h-16 ${filteredItems.length === 5 ? 'grid-cols-5' : 'grid-cols-4'}`}>\n        {filteredItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = currentPage === item.id;\n          \n          return (\n            <button\n              key={item.id}\n              className={cn(\n                \"flex flex-col items-center justify-center transition-smooth touch-target\",\n                isActive \n                  ? \"text-primary\" \n                  : \"text-neutral-400 hover:text-neutral-600\"\n              )}\n              onClick={() => handleNavigate(item.id)}\n            >\n              <Icon className=\"w-5 h-5 mb-1\" />\n              <span className=\"text-xs font-medium\">{item.label}</span>\n            </button>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2094},"client/src/components/mobile/LoadingOverlay.tsx":{"content":"import { Heart, Stethoscope } from \"lucide-react\";\n\ninterface LoadingOverlayProps {\n  isVisible: boolean;\n  message?: string;\n}\n\nexport default function LoadingOverlay({ isVisible, message = \"Loading...\" }: LoadingOverlayProps) {\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-gradient-to-br from-blue-50 to-green-50 flex items-center justify-center z-50\">\n      <div className=\"text-center px-8\">\n        {/* Logo and Branding */}\n        <div className=\"mb-8\">\n          <div className=\"relative\">\n            {/* Main Logo Circle */}\n            <div className=\"w-20 h-20 mx-auto mb-4 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-full flex items-center justify-center shadow-lg\">\n              <Stethoscope className=\"h-10 w-10 text-white\" />\n            </div>\n            \n            {/* Animated Pulse Rings */}\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"w-20 h-20 border-4 border-emerald-200 rounded-full animate-ping opacity-75\"></div>\n              <div className=\"absolute w-24 h-24 border-2 border-blue-200 rounded-full animate-pulse\"></div>\n            </div>\n          </div>\n          \n          {/* Clinic Name */}\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-2\">\n            My Homeo Health\n          </h1>\n          <p className=\"text-sm text-gray-600 mb-6\">\n            Homeopathy Clinic Management System\n          </p>\n        </div>\n\n        {/* Loading Animation */}\n        <div className=\"mb-6\">\n          {/* Animated Dots */}\n          <div className=\"flex justify-center space-x-2 mb-4\">\n            <div className=\"w-3 h-3 bg-emerald-500 rounded-full animate-bounce\"></div>\n            <div className=\"w-3 h-3 bg-blue-500 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n            <div className=\"w-3 h-3 bg-emerald-500 rounded-full animate-bounce\" style={{animationDelay: '0.4s'}}></div>\n          </div>\n          \n          {/* Progress Bar */}\n          <div className=\"w-48 h-2 bg-gray-200 rounded-full mx-auto overflow-hidden\">\n            <div className=\"h-full bg-gradient-to-r from-emerald-400 to-blue-500 rounded-full animate-pulse\"></div>\n          </div>\n        </div>\n\n        {/* Loading Message */}\n        <p className=\"text-gray-700 font-medium text-lg mb-2\">{message}</p>\n        <p className=\"text-gray-500 text-sm\">\n          Please wait while we prepare your healthcare dashboard...\n        </p>\n        \n        {/* Healthcare Icons Animation */}\n        <div className=\"mt-8 flex justify-center space-x-6 opacity-50\">\n          <Heart className=\"h-6 w-6 text-red-400 animate-pulse\" />\n          <div className=\"w-6 h-6 bg-green-400 rounded-full animate-pulse\"></div>\n          <div className=\"w-6 h-6 bg-blue-400 rounded-full animate-bounce\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2896},"client/src/components/mobile/MobileCalendar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useCalendarSwipe } from \"@/hooks/use-swipe\";\nimport { cn } from \"@/lib/utils\";\nimport { format, addDays, startOfWeek, isSameDay, isPast, isToday, isBefore, startOfDay } from \"date-fns\";\n\ninterface CalendarSlot {\n  id: string;\n  time: string;\n  status: 'available' | 'booked' | 'blocked';\n  patientName?: string;\n  patientId?: string;\n}\n\ninterface MobileCalendarProps {\n  appointments: any[];\n  onSlotSelect: (date: Date, time: string) => void;\n  onAppointmentClick: (appointment: any) => void;\n  user: any;\n}\n\ninterface DoctorAvailability {\n  id: string;\n  doctorId: string;\n  dayOfWeek: number;\n  isAvailable: boolean;\n  startTime: string;\n  endTime: string;\n  lunchBreakStart: string;\n  lunchBreakEnd: string;\n  slotDuration: number;\n}\n\nexport default function MobileCalendar({ appointments, onSlotSelect, onAppointmentClick, user }: MobileCalendarProps) {\n  const today = new Date();\n  const [currentWeek, setCurrentWeek] = useState(startOfWeek(today));\n  const [timeSlots, setTimeSlots] = useState<string[]>([]);\n  \n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeek, i));\n\n  // Fetch doctor availability settings\n  const { data: availability = [], isLoading: isLoadingAvailability } = useQuery({\n    queryKey: [\"/api/doctor/availability\", user?.role === 'doctor' ? user.id : null],\n    queryFn: async () => {\n      if (user?.role === 'doctor') {\n        const response = await apiRequest(\"GET\", \"/api/doctor/availability\");\n        return response.json();\n      } else if (user?.role === 'admin') {\n        // For admin, we might need to pass a specific doctor ID or get default availability\n        // For now, return empty array\n        return [];\n      }\n      return [];\n    },\n    enabled: !!user,\n  });\n\n  // Generate time slots based on doctor availability\n  useEffect(() => {\n    const generateTimeSlots = () => {\n      // Default time slots if no availability is set\n      const defaultSlots = [\n        \"9:00 AM\", \"9:20 AM\", \"9:40 AM\", \"10:00 AM\", \"10:20 AM\", \"10:40 AM\",\n        \"11:00 AM\", \"11:20 AM\", \"11:40 AM\", \"12:00 PM\", \"12:20 PM\", \"12:40 PM\",\n        // Lunch break from 1:00 PM - 2:00 PM (excluded)\n        \"2:00 PM\", \"2:20 PM\", \"2:40 PM\", \"3:00 PM\", \"3:20 PM\", \"3:40 PM\",\n        \"4:00 PM\", \"4:20 PM\", \"4:40 PM\", \"5:00 PM\", \"5:20 PM\", \"5:40 PM\",\n        \"6:00 PM\", \"6:20 PM\", \"6:40 PM\", \"7:00 PM\"\n      ];\n\n      if (availability.length === 0) {\n        setTimeSlots(defaultSlots);\n        return;\n      }\n\n      // Generate slots based on the first availability setting (assuming same slots for all days)\n      const firstAvailability = availability[0];\n      const slots: string[] = [];\n      \n      const startTime = firstAvailability.startTime || \"09:00\";\n      const endTime = firstAvailability.endTime || \"19:00\";\n      const slotDuration = firstAvailability.slotDuration || 20;\n      const lunchStart = firstAvailability.lunchBreakStart || \"13:00\";\n      const lunchEnd = firstAvailability.lunchBreakEnd || \"14:00\";\n\n      // Convert time strings to minutes for easier calculation\n      const timeToMinutes = (time: string) => {\n        const [hours, minutes] = time.split(':').map(Number);\n        return hours * 60 + minutes;\n      };\n\n      const minutesToTime = (minutes: number) => {\n        const hours = Math.floor(minutes / 60);\n        const mins = minutes % 60;\n        const ampm = hours >= 12 ? 'PM' : 'AM';\n        const displayHours = hours > 12 ? hours - 12 : hours === 0 ? 12 : hours;\n        return `${displayHours}:${mins.toString().padStart(2, '0')} ${ampm}`;\n      };\n\n      const startMinutes = timeToMinutes(startTime);\n      const endMinutes = timeToMinutes(endTime);\n      const lunchStartMinutes = timeToMinutes(lunchStart);\n      const lunchEndMinutes = timeToMinutes(lunchEnd);\n\n      for (let current = startMinutes; current < endMinutes; current += slotDuration) {\n        // Skip lunch break times\n        if (current >= lunchStartMinutes && current < lunchEndMinutes) {\n          continue;\n        }\n        slots.push(minutesToTime(current));\n      }\n\n      setTimeSlots(slots);\n    };\n\n    generateTimeSlots();\n  }, [availability]);\n\n  const goToPreviousWeek = () => {\n    const newWeek = addDays(currentWeek, -7);\n    // Don't allow navigating to weeks in the past\n    const today = new Date();\n    const startOfCurrentWeek = startOfWeek(today);\n    \n    if (newWeek >= startOfCurrentWeek) {\n      setCurrentWeek(newWeek);\n    }\n  };\n\n  const goToNextWeek = () => {\n    setCurrentWeek(prev => addDays(prev, 7));\n  };\n\n  const swipeHandlers = useCalendarSwipe(goToPreviousWeek, goToNextWeek);\n\n  const getSlotStatus = (date: Date, time: string): CalendarSlot => {\n    const dayOfWeek = date.getDay();\n    const now = new Date();\n    \n    // Block past dates completely\n    if (isBefore(startOfDay(date), startOfDay(now))) {\n      return {\n        id: `${date.toISOString()}-${time}`,\n        time,\n        status: 'blocked'\n      };\n    }\n    \n    // For today, block past times\n    if (isToday(date)) {\n      const timeToMinutes = (timeStr: string) => {\n        const [time, ampm] = timeStr.split(' ');\n        const [hours, minutes] = time.split(':').map(Number);\n        const adjustedHours = ampm === 'PM' && hours !== 12 ? hours + 12 : ampm === 'AM' && hours === 12 ? 0 : hours;\n        return adjustedHours * 60 + minutes;\n      };\n      \n      const currentMinutes = now.getHours() * 60 + now.getMinutes();\n      const slotMinutes = timeToMinutes(time);\n      \n      // Block past times on current day\n      if (slotMinutes <= currentMinutes) {\n        return {\n          id: `${date.toISOString()}-${time}`,\n          time,\n          status: 'blocked'\n        };\n      }\n    }\n    \n    // Check if doctor is available on this day\n    const dayAvailability = availability.find((a: DoctorAvailability) => a.dayOfWeek === dayOfWeek);\n    \n    // If no availability set for this day, it's blocked\n    if (!dayAvailability || !dayAvailability.isAvailable) {\n      return {\n        id: `${date.toISOString()}-${time}`,\n        time,\n        status: 'blocked'\n      };\n    }\n\n    // Check if time falls within lunch break\n    const lunchStart = dayAvailability.lunchBreakStart || \"13:00\";\n    const lunchEnd = dayAvailability.lunchBreakEnd || \"14:00\";\n    \n    const timeToMinutes = (timeStr: string) => {\n      const [time, ampm] = timeStr.split(' ');\n      const [hours, minutes] = time.split(':').map(Number);\n      const adjustedHours = ampm === 'PM' && hours !== 12 ? hours + 12 : ampm === 'AM' && hours === 12 ? 0 : hours;\n      return adjustedHours * 60 + minutes;\n    };\n\n    const slotMinutes = timeToMinutes(time);\n    const lunchStartMinutes = timeToMinutes(lunchStart.includes(':') ? `${lunchStart.split(':')[0]}:${lunchStart.split(':')[1]} ${parseInt(lunchStart.split(':')[0]) >= 12 ? 'PM' : 'AM'}` : lunchStart);\n    const lunchEndMinutes = timeToMinutes(lunchEnd.includes(':') ? `${lunchEnd.split(':')[0]}:${lunchEnd.split(':')[1]} ${parseInt(lunchEnd.split(':')[0]) >= 12 ? 'PM' : 'AM'}` : lunchEnd);\n\n    if (slotMinutes >= lunchStartMinutes && slotMinutes < lunchEndMinutes) {\n      return {\n        id: `${date.toISOString()}-${time}`,\n        time,\n        status: 'blocked'\n      };\n    }\n\n\n\n    // Check if there's an appointment\n    const appointment = appointments.find(apt => {\n      const aptDate = new Date(apt.dateTime);\n      const aptTime = format(aptDate, 'h:mm a');\n      return isSameDay(aptDate, date) && aptTime === time;\n    });\n\n    if (appointment) {\n      return {\n        id: `${date.toISOString()}-${time}`,\n        time,\n        status: 'booked',\n        patientName: appointment.patientName,\n        patientId: appointment.patientId\n      };\n    }\n\n    return {\n      id: `${date.toISOString()}-${time}`,\n      time,\n      status: 'available'\n    };\n  };\n\n  const handleSlotClick = (date: Date, time: string, slot: CalendarSlot) => {\n    if (slot.status === 'available') {\n      onSlotSelect(date, time);\n    } else if (slot.status === 'booked') {\n      const appointment = appointments.find(apt => {\n        const aptDate = new Date(apt.dateTime);\n        const aptTime = format(aptDate, 'h:mm a');\n        return isSameDay(aptDate, date) && aptTime === time;\n      });\n      if (appointment) {\n        onAppointmentClick(appointment);\n      }\n    }\n  };\n\n  return (\n    <Card className=\"mx-4 shadow-sm border border-neutral-200\">\n      <CardHeader className=\"p-4 border-b border-neutral-200\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-lg font-semibold text-neutral-800\">Weekly Calendar</CardTitle>\n            <p className=\"text-xs text-neutral-500 mt-1\">\n              Hours: 9AM-7PM • Lunch: 1-2PM • Tue: Closed • Sun: 12PM-7PM\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"touch-target p-2\"\n              onClick={goToPreviousWeek}\n              disabled={currentWeek <= startOfWeek(today)}\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <span className=\"text-sm font-medium text-neutral-700 min-w-24 text-center\">\n              {format(currentWeek, 'MMM d')} - {format(addDays(currentWeek, 6), 'MMM d, yyyy')}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"touch-target p-2\"\n              onClick={goToNextWeek}\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-0\">\n        <div className=\"calendar-swipe overflow-x-auto custom-scrollbar\">\n          <div className=\"min-w-full\">\n            {/* Calendar Days Header */}\n            <div className=\"grid grid-cols-7 gap-px bg-neutral-200\">\n              {weekDays.map((date, index) => {\n                const isPastDate = isBefore(startOfDay(date), startOfDay(today));\n                return (\n                  <div key={index} className={cn(\n                    \"bg-white p-3 text-center\",\n                    isPastDate && \"bg-neutral-50\"\n                  )}>\n                    <div className={cn(\n                      \"text-xs font-medium\",\n                      isPastDate ? \"text-neutral-400\" : \"text-neutral-500\"\n                    )}>\n                      {format(date, 'EEE')}\n                    </div>\n                    <div className={cn(\n                      \"text-sm font-semibold mt-1\",\n                      isPastDate ? \"text-neutral-400\" : \n                      date.getDay() === 2 ? \"text-neutral-400\" : \"text-neutral-800\"\n                    )}>\n                      {format(date, 'd')}\n                    </div>\n                    {isPastDate ? (\n                      <div className=\"text-xs text-neutral-400 mt-1\">Past</div>\n                    ) : (\n                      <>\n                        {date.getDay() === 2 && (\n                          <div className=\"text-xs text-red-500 mt-1\">Closed</div>\n                        )}\n                        {date.getDay() === 0 && (\n                          <div className=\"text-xs text-orange-500 mt-1\">Half Day</div>\n                        )}\n                        {date.getDay() !== 2 && date.getDay() !== 0 && (\n                          <div className=\"text-xs text-blue-500 mt-1\">9AM-7PM</div>\n                        )}\n                      </>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n            \n            {/* Time Slots */}\n            <div className=\"p-4 space-y-2\">\n              {timeSlots.map((time) => (\n                <div key={time} className=\"flex items-center space-x-3\">\n                  <div className=\"w-16 text-sm font-medium text-neutral-600\">\n                    {time}\n                  </div>\n                  <div className=\"flex-1 grid grid-cols-7 gap-2\">\n                    {weekDays.map((date, dayIndex) => {\n                      const slot = getSlotStatus(date, time);\n                      \n                      return (\n                        <button\n                          key={dayIndex}\n                          className={cn(\n                            \"h-8 rounded-md text-xs font-medium transition-smooth touch-target flex items-center justify-center\",\n                            slot.status === 'available' && \"bg-primary bg-opacity-10 border border-primary border-opacity-30 text-primary hover:bg-primary hover:text-white\",\n                            slot.status === 'booked' && \"bg-secondary bg-opacity-90 text-white\",\n                            slot.status === 'blocked' && \"bg-neutral-200 text-neutral-500 cursor-not-allowed\"\n                          )}\n                          onClick={() => handleSlotClick(date, time, slot)}\n                          disabled={slot.status === 'blocked'}\n                        >\n                          {slot.status === 'available' && 'Available'}\n                          {slot.status === 'booked' && (slot.patientName?.split(' ')[0] || 'Patient')}\n                          {slot.status === 'blocked' && (() => {\n                            if (date.getDay() === 2) return 'Closed';\n                            if (date.getDay() === 0 && time.includes('AM') && !time.includes('12:')) return 'Half Day';\n                            if (time === '1:00 PM' || time === '1:20 PM' || time === '1:40 PM') return 'Lunch';\n                            \n                            // Check if it's a past time slot\n                            const now = new Date();\n                            const slotDateTime = new Date(date);\n                            const [time12, period] = time.split(' ');\n                            const [hours, minutes] = time12.split(':');\n                            let hour24 = parseInt(hours);\n                            \n                            if (period === 'PM' && hour24 !== 12) {\n                              hour24 += 12;\n                            } else if (period === 'AM' && hour24 === 12) {\n                              hour24 = 0;\n                            }\n                            \n                            slotDateTime.setHours(hour24, parseInt(minutes), 0, 0);\n                            \n                            return slotDateTime < now ? 'Past' : 'Off';\n                          })()}\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15063},"client/src/components/mobile/MobileHeader.tsx":{"content":"import { User, Menu, Bell, LogOut, Settings, MessageCircle, Languages, Users } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { MedicalLogo } from \"@/components/ui/MedicalLogo\";\nimport { useHapticFeedback } from \"@/hooks/use-pwa\";\nimport { useState } from \"react\";\nimport ProfileModal from \"@/components/ProfileModal\";\nimport WhatsAppModal from \"@/components/WhatsAppModal\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface MobileHeaderProps {\n  user: any;\n  onMenuClick: () => void;\n  onLogout: () => void;\n  onNavigate?: (page: string) => void;\n  notificationCount?: number;\n}\n\nexport default function MobileHeader({ user, onMenuClick, onLogout, onNavigate, notificationCount = 0 }: MobileHeaderProps) {\n  const { lightTap } = useHapticFeedback();\n  const { t, language, setLanguage } = useLanguage();\n  const [showProfileModal, setShowProfileModal] = useState(false);\n  const [showWhatsAppModal, setShowWhatsAppModal] = useState(false);\n\n  const handleMenuClick = () => {\n    lightTap();\n    onMenuClick();\n  };\n\n  return (\n    <header className=\"mobile-header\">\n      <div className=\"flex items-center justify-between p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"touch-target p-2 -ml-2 text-neutral-600 hover:text-primary transition-smooth\"\n            onClick={handleMenuClick}\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n          <div className=\"flex items-center space-x-2\">\n            <MedicalLogo showBackground={true} size={32} />\n            <div>\n              <h1 className=\"text-lg font-semibold\">\n                <span className=\"text-blue-600\">My Homeo</span>{\" \"}\n                <span className=\"text-teal-600\">Health</span>\n              </h1>\n              <p className=\"text-xs text-neutral-500\">\n                {user?.role === 'admin' ? t('dashboard.admin') : t('dashboard.doctor')}\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"touch-target p-2 text-neutral-600 hover:text-primary transition-smooth relative\"\n          >\n            <Bell className=\"h-5 w-5\" />\n            {notificationCount > 0 && (\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full text-xs flex items-center justify-center text-white\">\n                {notificationCount > 9 ? '9+' : notificationCount}\n              </span>\n            )}\n          </Button>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"touch-target p-2 text-neutral-600 hover:text-primary transition-smooth\"\n              >\n                <User className=\"h-5 w-5\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-48\">\n              <DropdownMenuItem onClick={() => setShowProfileModal(true)}>\n                <User className=\"h-4 w-4 mr-2\" />\n                {t('nav.profile')}\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setLanguage(language === 'en' ? 'bn' : 'en')}>\n                <Languages className=\"h-4 w-4 mr-2\" />\n                {language === 'en' ? 'বাংলা' : 'English'}\n              </DropdownMenuItem>\n              {user?.role === 'doctor' && onNavigate && (\n                <DropdownMenuItem onClick={() => onNavigate('doctor/settings')}>\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Set Availability\n                </DropdownMenuItem>\n              )}\n              {user?.role === 'doctor' && (\n                <DropdownMenuItem onClick={() => setShowWhatsAppModal(true)}>\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  WhatsApp Booking\n                </DropdownMenuItem>\n              )}\n              {user?.role === 'admin' && onNavigate && (\n                <DropdownMenuItem onClick={() => {\n                  onNavigate('dashboard');\n                  setTimeout(() => {\n                    const adminTab = document.querySelector('[data-value=\"admins\"]') as HTMLElement;\n                    if (adminTab) {\n                      adminTab.click();\n                    }\n                  }, 200);\n                }}>\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Manage Admin Users\n                </DropdownMenuItem>\n              )}\n              <DropdownMenuItem onClick={onLogout}>\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                {t('nav.logout')}\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        <ProfileModal \n          isOpen={showProfileModal}\n          onClose={() => setShowProfileModal(false)}\n          onLogout={onLogout}\n          user={user}\n        />\n        <WhatsAppModal\n          isOpen={showWhatsAppModal}\n          onClose={() => setShowWhatsAppModal(false)}\n          user={user}\n        />\n      </div>\n    </header>\n  );\n}\n","size_bytes":5380},"client/src/components/mobile/NavigationDrawer.tsx":{"content":"import { X, BarChart3, Calendar, Users, Clock, FileText, Pill, LogOut, User, Bell, Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { cn } from \"@/lib/utils\";\nimport { useHapticFeedback } from \"@/hooks/use-pwa\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { MedicalLogo } from \"@/components/ui/MedicalLogo\";\n\ninterface NavigationDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  user: any;\n  currentPage: string;\n  onNavigate: (page: string) => void;\n  onLogout: () => void;\n}\n\nexport default function NavigationDrawer({ \n  isOpen, \n  onClose, \n  user, \n  currentPage, \n  onNavigate, \n  onLogout \n}: NavigationDrawerProps) {\n  const { lightTap } = useHapticFeedback();\n  const { t } = useLanguage();\n\n  const handleNavigate = (page: string) => {\n    lightTap();\n    onNavigate(page);\n    onClose();\n  };\n\n  const handleLogout = () => {\n    lightTap();\n    onLogout();\n  };\n\n  const menuItems = [\n    { id: 'dashboard', label: t('nav.dashboard'), icon: BarChart3, roles: ['admin', 'doctor'] },\n    { id: 'calendar', label: t('nav.calendar'), icon: Calendar, roles: ['doctor'] },\n    { id: 'patients', label: t('nav.patients'), icon: Users, roles: ['admin', 'doctor'] },\n    { id: 'appointments', label: t('nav.appointments'), icon: Clock, roles: ['admin', 'doctor'] },\n    { id: 'prescriptions', label: t('nav.prescriptions'), icon: FileText, roles: ['admin', 'doctor'] },\n    { id: 'medicines', label: t('nav.medicines'), icon: Pill, roles: ['admin', 'doctor'] },\n    { id: 'doctor/settings', label: 'Availability Settings', icon: Settings, roles: ['doctor'] },\n    { id: 'notifications', label: t('nav.notifications'), icon: Bell, roles: ['admin', 'doctor'] },\n    { id: 'admin', label: t('nav.admin'), icon: User, roles: ['admin'] },\n  ];\n\n  const filteredMenuItems = menuItems.filter(item => \n    item.roles.includes(user?.role || 'patient')\n  );\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Drawer */}\n      <nav className={cn(\n        \"mobile-drawer\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n      )}>\n        <div className=\"p-6 border-b border-neutral-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-neutral-800\">{t('nav.menu')}</h2>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              className=\"p-2\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <MedicalLogo showBackground={true} size={48} />\n            <div>\n              <h3 className=\"font-semibold\">\n                <span className=\"text-blue-600\">My Homeo</span>{\" \"}\n                <span className=\"text-teal-600\">Health</span>\n              </h3>\n              <p className=\"text-sm text-neutral-500\">{user?.role === 'admin' ? t('dashboard.admin') : t('dashboard.doctor')}</p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"py-4 flex-1\">\n          {filteredMenuItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = currentPage === item.id;\n            \n            return (\n              <button\n                key={item.id}\n                className={cn(\n                  \"flex items-center w-full px-6 py-3 text-left transition-smooth\",\n                  isActive \n                    ? \"text-white bg-primary\" \n                    : \"text-neutral-700 hover:bg-primary hover:text-white\"\n                )}\n                onClick={() => handleNavigate(item.id)}\n              >\n                <Icon className=\"w-5 h-5 mr-3\" />\n                <span>{item.label}</span>\n              </button>\n            );\n          })}\n        </div>\n        \n        <div className=\"p-6 border-t border-neutral-200\">\n          <Button\n            variant=\"ghost\"\n            className=\"flex items-center w-full px-4 py-3 text-neutral-700 hover:bg-neutral-100 rounded-lg transition-smooth justify-start\"\n            onClick={handleLogout}\n          >\n            <LogOut className=\"w-5 h-5 mr-3\" />\n            <span>Logout</span>\n          </Button>\n        </div>\n      </nav>\n    </>\n  );\n}\n","size_bytes":4493},"client/src/components/mobile/QuickActionsModal.tsx":{"content":"import { UserPlus, CalendarPlus, FileText, Pill, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useHapticFeedback } from \"@/hooks/use-pwa\";\n\ninterface QuickActionsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onAction: (action: string) => void;\n  userRole: string;\n}\n\nexport default function QuickActionsModal({ isOpen, onClose, onAction, userRole }: QuickActionsModalProps) {\n  const { lightTap } = useHapticFeedback();\n\n  if (!isOpen) return null;\n\n  const handleAction = (action: string) => {\n    lightTap();\n    onAction(action);\n    onClose();\n  };\n\n  const actions = [\n    {\n      id: 'add-patient',\n      label: 'Add Patient',\n      icon: UserPlus,\n      color: 'primary',\n      roles: ['doctor', 'admin']\n    },\n    {\n      id: 'book-appointment',\n      label: 'Book Appointment',\n      icon: CalendarPlus,\n      color: 'secondary',\n      roles: ['doctor', 'admin']\n    },\n    {\n      id: 'create-prescription',\n      label: 'Add Prescription',\n      icon: FileText,\n      color: 'accent',\n      roles: ['doctor', 'admin']\n    },\n    {\n      id: 'add-medicine',\n      label: 'Add Medicine',\n      icon: Pill,\n      color: 'orange',\n      roles: ['doctor', 'admin']\n    }\n  ];\n\n  const filteredActions = actions.filter(action => \n    action.roles.includes(userRole)\n  );\n\n  const getColorClasses = (color: string) => {\n    switch (color) {\n      case 'primary':\n        return 'bg-primary bg-opacity-10 text-primary';\n      case 'secondary':\n        return 'bg-secondary bg-opacity-10 text-secondary';\n      case 'accent':\n        return 'bg-accent bg-opacity-10 text-accent';\n      case 'orange':\n        return 'bg-orange-500 bg-opacity-10 text-orange-500';\n      default:\n        return 'bg-neutral-100 text-neutral-700';\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-60 flex items-end\">\n      <Card className=\"w-full max-h-80 overflow-y-auto rounded-t-3xl rounded-b-none border-t border-x-0 border-b-0\">\n        <CardContent className=\"p-6\">\n          <div className=\"w-12 h-1 bg-neutral-300 rounded-full mx-auto mb-6\"></div>\n          \n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-neutral-800\">Quick Actions</h3>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              className=\"p-2\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n            {filteredActions.map((action) => {\n              const Icon = action.icon;\n              \n              return (\n                <button\n                  key={action.id}\n                  className={`flex flex-col items-center p-4 rounded-xl touch-target transition-smooth ${getColorClasses(action.color)}`}\n                  onClick={() => handleAction(action.id)}\n                >\n                  <Icon className=\"text-xl mb-2\" size={24} />\n                  <span className=\"text-sm font-medium\">{action.label}</span>\n                </button>\n              );\n            })}\n          </div>\n          \n          <Button\n            variant=\"secondary\"\n            className=\"w-full py-3 font-medium touch-target\"\n            onClick={onClose}\n          >\n            Cancel\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3509},"client/src/components/notifications/NotificationSettings.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Bell, BellOff, Smartphone, Clock, AlertCircle, CheckCircle } from 'lucide-react';\nimport { useNotifications } from '@/hooks/use-notifications';\n\nexport const NotificationSettings: React.FC = () => {\n  const {\n    permission,\n    subscription,\n    isSupported,\n    isLoading,\n    requestPermission,\n    subscribeToPush,\n    unsubscribeFromPush,\n    showTestNotification\n  } = useNotifications();\n\n  const [reminderSettings, setReminderSettings] = useState({\n    appointmentReminders: true,\n    reminderTime: 30, // minutes before appointment\n    dailyReminders: false,\n    weeklyReports: false\n  });\n\n  // Load existing settings on component mount\n  React.useEffect(() => {\n    const loadSettings = async () => {\n      try {\n        const response = await fetch('/api/notifications/settings');\n        if (response.ok) {\n          const settings = await response.json();\n          setReminderSettings(settings);\n        }\n      } catch (error) {\n        console.error('Error loading notification settings:', error);\n      }\n    };\n    loadSettings();\n  }, []);\n\n  const [testStatus, setTestStatus] = useState<'idle' | 'success' | 'error'>('idle');\n\n  const handleEnableNotifications = async () => {\n    const success = await subscribeToPush();\n    if (success) {\n      setTestStatus('success');\n      setTimeout(() => setTestStatus('idle'), 3000);\n    } else {\n      setTestStatus('error');\n      setTimeout(() => setTestStatus('idle'), 3000);\n    }\n  };\n\n  const handleDisableNotifications = async () => {\n    await unsubscribeFromPush();\n  };\n\n  const handleTestNotification = async () => {\n    const success = await showTestNotification(\n      'Test Notification',\n      'This is a test notification from My Homeo Health!'\n    );\n    setTestStatus(success ? 'success' : 'error');\n    setTimeout(() => setTestStatus('idle'), 3000);\n  };\n\n  const handleReminderSettingChange = (key: keyof typeof reminderSettings, value: boolean | number) => {\n    setReminderSettings(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    \n    // Save to server\n    saveReminderSettings({ ...reminderSettings, [key]: value });\n  };\n\n  const saveReminderSettings = async (settings: typeof reminderSettings) => {\n    try {\n      await fetch('/api/notifications/settings', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(settings),\n      });\n    } catch (error) {\n      console.error('Error saving reminder settings:', error);\n    }\n  };\n\n  if (!isSupported) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <BellOff className=\"h-5 w-5\" />\n            <span>Push Notifications</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Push notifications are not supported in this browser. Please use a modern browser for the best experience.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Notification Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Bell className=\"h-5 w-5\" />\n            <span>Push Notifications</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {permission.denied && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Notifications are blocked. Please enable them in your browser settings to receive appointment reminders.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {permission.default && (\n            <Alert>\n              <Smartphone className=\"h-4 w-4\" />\n              <AlertDescription>\n                Enable push notifications to receive appointment reminders and important updates.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {permission.granted && subscription && (\n            <Alert className=\"border-green-200 bg-green-50\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <AlertDescription className=\"text-green-800\">\n                Push notifications are enabled! You'll receive appointment reminders.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {testStatus === 'success' && (\n            <Alert className=\"border-green-200 bg-green-50\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <AlertDescription className=\"text-green-800\">\n                Test notification sent successfully!\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {testStatus === 'error' && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Failed to send test notification. Please check your settings.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"flex flex-col space-y-3\">\n            {!subscription ? (\n              <Button \n                onClick={handleEnableNotifications}\n                disabled={isLoading || permission.denied}\n                className=\"w-full\"\n              >\n                {isLoading ? 'Enabling...' : 'Enable Push Notifications'}\n              </Button>\n            ) : (\n              <div className=\"flex space-x-2\">\n                <Button \n                  onClick={handleTestNotification}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  disabled={isLoading}\n                >\n                  Test Notification\n                </Button>\n                <Button \n                  onClick={handleDisableNotifications}\n                  variant=\"destructive\"\n                  className=\"flex-1\"\n                  disabled={isLoading}\n                >\n                  Disable\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Reminder Settings */}\n      {subscription && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Clock className=\"h-5 w-5\" />\n              <span>Reminder Settings</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label>Appointment Reminders</Label>\n                <p className=\"text-sm text-gray-500\">\n                  Get notified before your appointments\n                </p>\n              </div>\n              <Switch\n                checked={reminderSettings.appointmentReminders}\n                onCheckedChange={(checked) => \n                  handleReminderSettingChange('appointmentReminders', checked)\n                }\n              />\n            </div>\n\n            {reminderSettings.appointmentReminders && (\n              <div className=\"space-y-2\">\n                <Label>Reminder Time</Label>\n                <select\n                  value={reminderSettings.reminderTime}\n                  onChange={(e) => \n                    handleReminderSettingChange('reminderTime', parseInt(e.target.value))\n                  }\n                  className=\"w-full p-2 border border-gray-300 rounded-md\"\n                >\n                  <option value={15}>15 minutes before</option>\n                  <option value={30}>30 minutes before</option>\n                  <option value={60}>1 hour before</option>\n                  <option value={120}>2 hours before</option>\n                  <option value={1440}>1 day before</option>\n                </select>\n              </div>\n            )}\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label>Daily Reminders</Label>\n                <p className=\"text-sm text-gray-500\">\n                  Daily summary of upcoming appointments\n                </p>\n              </div>\n              <Switch\n                checked={reminderSettings.dailyReminders}\n                onCheckedChange={(checked) => \n                  handleReminderSettingChange('dailyReminders', checked)\n                }\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label>Weekly Reports</Label>\n                <p className=\"text-sm text-gray-500\">\n                  Weekly summary of appointments and patient updates\n                </p>\n              </div>\n              <Switch\n                checked={reminderSettings.weeklyReports}\n                onCheckedChange={(checked) => \n                  handleReminderSettingChange('weeklyReports', checked)\n                }\n              />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};","size_bytes":9513},"client/src/components/ui/MedicalLogo.tsx":{"content":"import React from 'react';\n\ninterface MedicalLogoProps {\n  size?: number;\n  className?: string;\n  showBackground?: boolean;\n}\n\nexport const MedicalLogo: React.FC<MedicalLogoProps> = ({ \n  size = 24, \n  className = \"\",\n  showBackground = false\n}) => {\n  if (showBackground) {\n    return (\n      <div className={`relative ${className}`} style={{ width: size, height: size }}>\n        <svg\n          width={size}\n          height={size}\n          viewBox=\"0 0 48 48\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {/* Gradient Definition */}\n          <defs>\n            <linearGradient id=\"logoGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n              <stop offset=\"0%\" stopColor=\"#3B82F6\" />\n              <stop offset=\"100%\" stopColor=\"#14B8A6\" />\n            </linearGradient>\n          </defs>\n          \n          {/* Circle Background */}\n          <circle\n            cx=\"24\"\n            cy=\"24\"\n            r=\"24\"\n            fill=\"url(#logoGradient)\"\n          />\n          \n          {/* Medical Cross */}\n          <path\n            d=\"M24 12C24.8284 12 25.5 12.6716 25.5 13.5V22.5H34.5C35.3284 22.5 36 23.1716 36 24C36 24.8284 35.3284 25.5 34.5 25.5H25.5V34.5C25.5 35.3284 24.8284 36 24 36C23.1716 36 22.5 35.3284 22.5 34.5V25.5H13.5C12.6716 25.5 12 24.8284 12 24C12 23.1716 12.6716 22.5 13.5 22.5H22.5V13.5C22.5 12.6716 23.1716 12 24 12Z\"\n            fill=\"white\"\n          />\n        </svg>\n      </div>\n    );\n  }\n\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      {/* Medical Cross */}\n      <path\n        d=\"M12 2C12.5523 2 13 2.44772 13 3V11H21C21.5523 11 22 11.4477 22 12C22 12.5523 21.5523 13 21 13H13V21C13 21.5523 12.5523 22 12 22C11.4477 22 11 21.5523 11 21V13H3C2.44772 13 2 12.5523 2 12C2 11.4477 2.44772 11 3 11H11V3C11 2.44772 11.4477 2 12 2Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};","size_bytes":2001},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"quick-start.sh":{"content":"#!/bin/bash\n\n# My Homeo Health - Quick Start Script\n# For users who already have Node.js and PostgreSQL installed\n\nset -e\n\n# Colors for output\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nRED='\\033[0;31m'\nNC='\\033[0m'\n\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\nmain() {\n    clear\n    echo \"================================================\"\n    echo \"   My Homeo Health - Quick Start Setup         \"\n    echo \"================================================\"\n    echo \"\"\n    \n    # Check prerequisites\n    print_status \"Checking prerequisites...\"\n    \n    if ! command_exists node; then\n        print_error \"Node.js not found. Please install Node.js 18+ first.\"\n        exit 1\n    fi\n    \n    NODE_VERSION=$(node --version)\n    print_success \"Node.js: $NODE_VERSION\"\n    \n    if ! command_exists psql; then\n        print_error \"PostgreSQL not found. Please install PostgreSQL first.\"\n        exit 1\n    fi\n    \n    PG_VERSION=$(psql --version)\n    print_success \"PostgreSQL: $PG_VERSION\"\n    \n    # Install dependencies\n    print_status \"Installing dependencies...\"\n    npm install\n    print_success \"Dependencies installed\"\n    \n    # Check for existing .env.local\n    if [[ -f \".env.local\" ]]; then\n        print_status \"Found existing .env.local file\"\n        read -p \"Use existing configuration? (y/n): \" use_existing\n        if [[ ! $use_existing =~ ^[Yy]$ ]]; then\n            rm .env.local\n        fi\n    fi\n    \n    # Create .env.local if it doesn't exist\n    if [[ ! -f \".env.local\" ]]; then\n        print_status \"Creating environment configuration...\"\n        \n        # Get database details\n        read -p \"Database host (default: localhost): \" DB_HOST\n        DB_HOST=${DB_HOST:-localhost}\n        \n        read -p \"Database port (default: 5432): \" DB_PORT\n        DB_PORT=${DB_PORT:-5432}\n        \n        read -p \"Database name (default: homeo_health): \" DB_NAME\n        DB_NAME=${DB_NAME:-homeo_health}\n        \n        read -p \"Database user: \" DB_USER\n        read -s -p \"Database password: \" DB_PASSWORD\n        echo \"\"\n        \n        # Create .env.local\n        cat > .env.local << EOF\nDATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME\nPGHOST=$DB_HOST\nPGPORT=$DB_PORT\nPGDATABASE=$DB_NAME\nPGUSER=$DB_USER\nPGPASSWORD=$DB_PASSWORD\nNODE_ENV=development\nSESSION_SECRET=$(openssl rand -base64 32)\nPORT=5000\nVITE_API_URL=http://localhost:5000\nEOF\n        \n        # Optional AI configuration\n        echo \"\"\n        read -p \"Configure AI features? (y/n): \" config_ai\n        if [[ $config_ai =~ ^[Yy]$ ]]; then\n            echo \"Choose AI provider:\"\n            echo \"1) Google Gemini\"\n            echo \"2) OpenAI GPT\"\n            echo \"3) Anthropic Claude\"\n            read -p \"Enter choice (1-3): \" ai_choice\n            \n            case $ai_choice in\n                1)\n                    read -p \"Enter Gemini API Key: \" api_key\n                    echo \"GEMINI_API_KEY=$api_key\" >> .env.local\n                    ;;\n                2)\n                    read -p \"Enter OpenAI API Key: \" api_key\n                    echo \"OPENAI_API_KEY=$api_key\" >> .env.local\n                    ;;\n                3)\n                    read -p \"Enter Anthropic API Key: \" api_key\n                    echo \"ANTHROPIC_API_KEY=$api_key\" >> .env.local\n                    ;;\n            esac\n        fi\n        \n        print_success \"Environment configured\"\n    fi\n    \n    # Initialize database\n    print_status \"Initializing database...\"\n    source .env.local\n    export DATABASE_URL\n    npm run db:push || print_warning \"Database setup will complete on first run\"\n    \n    print_success \"Quick setup complete!\"\n    echo \"\"\n    echo \"🌐 Server will run on: http://localhost:5000\"\n    echo \"👤 Admin login: admin / admin123\"\n    echo \"🩺 Doctor login: doctor / doctor123\"\n    echo \"\"\n    \n    read -p \"Start the application now? (y/n): \" start_now\n    if [[ $start_now =~ ^[Yy]$ ]]; then\n        print_status \"Starting application...\"\n        npm run dev\n    else\n        print_success \"Run 'npm run dev' to start the application\"\n    fi\n}\n\ntrap 'echo -e \"\\n\\n${RED}Setup interrupted${NC}\"; exit 1' INT\nmain \"$@\"","size_bytes":4412}}}